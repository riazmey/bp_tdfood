&НаКлиенте
Процедура АвтомобильНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереопределитьСвязиПараметровВыбораАвтомобиль();	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьСвязиПараметровВыбораАвтомобиль()
	
	НовыйМассив = Новый Массив();
	Перевозчик = Объект.Водитель.Перевозчик;
	Если ЗначениеЗаполнено(Перевозчик) тогда
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Перевозчик", "Перевозчик"));
	КонецЕсли;
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Автомобиль.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПереопределитьСвязиПараметровВыбораВодитель();
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьСвязиПараметровВыбораВодитель()
	НовыйМассив = Новый Массив();
	Перевозчик = Объект.Автомобиль.Перевозчик;
	Если ЗначениеЗаполнено(Перевозчик) тогда
		НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Перевозчик", "Перевозчик"));
	КонецЕсли;
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Водитель.СвязиПараметровВыбора = НовыеСвязи;
КонецПроцедуры

&НаКлиенте
Процедура СамовывозПриИзменении(Элемент)
	
	УстановитьВидимость();
	WebMapUpdate();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ФормаГруппаПраваяЧасть.Видимость = НЕ Объект.Самовывоз;
	Элементы.Автомобиль.Видимость = НЕ Объект.Самовывоз;
	Элементы.Водитель.Видимость = НЕ Объект.Самовывоз;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	ОбновитьДанныеПоАдресам();
	
	ФайловаяСистемаКлиент.СоздатьВременныйКаталог(Новый ОписаниеОповещения(
		"ОбработкаОповещенияСоздатьВременныйКаталогФормы"
		, ЭтаФорма));

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Самовывоз тогда
		Объект.ПорядокДвижения.Сортировать("Грузополучатель");
		Объект.Автомобиль = Справочники.Автомобили.ПустаяСсылка();
		Объект.Водитель = Справочники.Водители.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокДвиженияГрузополучательПриИзменении(Элемент)
	ТекДанные = Элементы.ПорядокДвижения.ТекущиеДанные;
	ТекДанные.Адрес = ДанныеАдресаДоставкиПоУмолчанию(ТекДанные.Грузополучатель) 
КонецПроцедуры

&НаСервере
Функция ДанныеАдресаДоставкиПоУмолчанию(Контрагент) 
	
	ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.ДанныеАдресаДоставкиПоУмолчанию(Контрагент, ТекущаяДата());
	
	Если ДанныеАдреса = Неопределено тогда
		Возврат "";
	Иначе
		Возврат ДанныеАдреса.ПредставлениеСокращенное;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПоАдресам()
	
	Для Каждого Стр Из Объект.ПорядокДвижения Цикл
		Стр.Адрес =ДанныеАдресаДоставкиПоУмолчанию(Стр.Грузополучатель);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДубльВЭтомЭлементе(Грузополучатель)
	
	СруктураПоиска = Новый Структура;
	СруктураПоиска.Вставить("Грузополучатель", Грузополучатель);
	
	НайденыеДубли = Объект.ПорядокДвижения.НайтиСтроки(СруктураПоиска);
	
	Возврат НайденыеДубли.Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьДубльВДругихЭлементах(ТекущийЭлемент, Грузополучатель)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийЭлемент", ТекущийЭлемент);
	Запрос.УстановитьПараметр("Грузополучатель", Грузополучатель);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутыПорядокДвижения.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Маршруты.ПорядокДвижения КАК МаршрутыПорядокДвижения
	|ГДЕ
	|	МаршрутыПорядокДвижения.Ссылка <> &ТекущийЭлемент
	|	И МаршрутыПорядокДвижения.Грузополучатель = &Грузополучатель
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутыПорядокДвижения.Ссылка.Наименование";
	
	НайденыеДубли = Запрос.Выполнить().Выгрузить();
	
	Если НайденыеДубли.Количество() = 0 тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденыеДубли.ВыгрузитьКолонку("Наименование");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПорядокДвиженияГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЕстьДубльВЭтомЭлементе(ВыбранноеЗначение) тогда
		Сообщить("Грузополучатель "+Строка(ВыбранноеЗначение) + " уже существует в таблице порядка движения!");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	НайденыеДубли = ЕстьДубльВДругихЭлементах(Объект.Ссылка, ВыбранноеЗначение);
	Если НЕ НайденыеДубли = Неопределено тогда
		Для Каждого ДубльМаршрута из НайденыеДубли цикл
			Сообщить("Грузополучатель "+Строка(ВыбранноеЗначение) + " уже существует в маршруте "+ДубльМаршрута+"!");
		КонецЦикла;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Procedure WebMapUpdate()
	
	If Объект.Самовывоз then
		WebMapStruct = Undefined;
		Return;
	Endif;
	
	InitWebMap();
	
	IF NOT WebMapStruct = Undefined Then
		
		SelectedConsignee = Организация;
		
		ArrayRoutes = New Array;
		ArrayPoints = New Array;
		
		// New route
		Route = New Structure;
		
		// Add SelectedConsignee
		OtherOptions = New Structure;
		OtherOptions.Insert("NumCruise"   , Format(1, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
		OtherOptions.Insert("NumInCruise" , Format(0, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
		OtherOptions.Insert("Color"       , WebMapStruct.ColorPalette.Get("red"));
		OtherOptions.Insert("TypeIcon"    , WebMapStruct.IconsСollection.islandsstandart.Get("home"));
		ArrayPoints.Add(WebMapServer.CreatePointStructFromPartner(SelectedConsignee, OtherOptions));
		
		For each SelectedShipper in Объект.ПорядокДвижения do
			// Add SelectedShipper
			OtherOptions = New Structure;
			OtherOptions.Insert("NumCruise"   , Format(1, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			OtherOptions.Insert("NumInCruise" , Format(SelectedShipper.НомерСтроки, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			ArrayPoints.Add(WebMapServer.CreatePointStructFromPartner(SelectedShipper.Грузополучатель, OtherOptions));
		EndDo;
		
		If РасчитыватьВозврат then
			// Add SelectedConsignee
			OtherOptions = New Structure;
			OtherOptions.Insert("NumCruise"   , Format(1, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			OtherOptions.Insert("NumInCruise" , Format(Объект.ПорядокДвижения.Count() + 1, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			OtherOptions.Insert("Color"       , WebMapStruct.ColorPalette.Get("red"));
			OtherOptions.Insert("TypeIcon"    , WebMapStruct.IconsСollection.islandsstandart.Get("home"));
			ArrayPoints.Add(WebMapServer.CreatePointStructFromPartner(SelectedConsignee, OtherOptions));
		EndIf;
		
		Route.Insert("ArrayPoints", ArrayPoints);
		Route.Insert("Name"       , Объект.Наименование);
		If ValueIsFilled(Объект.Водитель) then
			Route.Insert("Driver" , String(Объект.Водитель));
		EndIf;
		If ValueIsFilled(Объект.Автомобиль) then
			Route.Insert("Car"    , String(Объект.Автомобиль));
		EndIf;
		
		ArrayRoutes.Add(Route);
		
		WebMapStruct.Insert("ArrayRoutes", ArrayRoutes);
		
		WebMapClient.PrepareHTMLTextRoutes(WebMapStruct);
		WebMapПолеHTML = WebMapStruct.HTMLText;
		
	EndIf;
	
EndProcedure

&НаКлиенте
Procedure InitWebMap()
	
	IF Объект.ПорядокДвижения.Количество() = 0 Then
		WebMapClient.HTMLMessage(WebMapПолеHTML,
                           "Состав маршрута пустой!<br>Отображение карты невозможно.",
		                   "#2F4F4F");
		WebMapStruct = Undefined;
		Return;
	EndIf;
	
	IF WebMapStruct = Undefined THEN
		WebMapStruct = WebMapClient.CreateStruct("Схема маршрута " + Объект.Наименование, "e041936b-a266-4a20-8e94-d0d7ffef7ec4",,,, КаталогВременныхФайловДокумента);
	ENDIF;
	
	HTMLTemplatesWebMap = HTMLTemplatesWebMap();
	
	WebMapStruct.Insert("HTMLTextMap" , WebMapServer.CommonTemplate());
	WebMapStruct.Insert("HTMLTextInit", HTMLTemplatesWebMap.HTMLTextInit);
	WebMapStruct.Insert("HTMLTextBody", HTMLTemplatesWebMap.HTMLTextBody);
	
EndProcedure

&НаСервере
Function HTMLTemplatesWebMap()
	
	ReturnedStruct = New Structure;
	
	HTMLTextInit = Documents.ТранспортнаяЛогистика.GetTemplate("HTMLYandexMap_function_init").GetText();
	HTMLTextBody = Documents.ТранспортнаяЛогистика.GetTemplate("HTMLYandexMap_body").GetText();
	
	ReturnedStruct.Вставить("HTMLTextInit", HTMLTextInit);
	ReturnedStruct.Вставить("HTMLTextBody", HTMLTextBody);
	
	Return ReturnedStruct;
	
EndFunction

&НаКлиенте
Процедура ОбработкаОповещенияСоздатьВременныйКаталогФормы(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	КаталогВременныхФайловДокумента = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаВременныхФайлов);
	
	WebMapStruct = Неопределено;
	
	WebMapUpdate();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокДвиженияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("WebMapUpdate", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитыватьВозвратПриИзменении(Элемент)
	
	WebMapUpdate();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	WebMapUpdate();
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	WebMapUpdate();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	
	WebMapUpdate();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	WebMapUpdate();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Справочники.Организации.ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОсновнаяОрганизация);
	Организация = ОсновнаяОрганизация;
	
	Если ЗначениеЗаполнено(Организация) тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
