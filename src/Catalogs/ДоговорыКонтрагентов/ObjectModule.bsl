
&Перед("ОбработкаПроверкиЗаполнения")
Процедура Базар_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ВидыВзаиморасчетов");
	ПроверяемыеРеквизиты.Добавить("Организация");
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	 ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
	 
	 	ПроверяемыеРеквизиты.Добавить("ТипЦен");
		ПроверяемыеРеквизиты.Добавить("ВремяЛогистикиНачало");
		ПроверяемыеРеквизиты.Добавить("ВремяЛогистикиОкончание");
		
		Если НЕ ОплатаЗаНаличныйРасчет тогда
			ПроверяемыеРеквизиты.Добавить("БанковскийСчетОрганизации");
			ПроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
		КонецЕсли;
		
		Если ВремяЛогистикиНачало >= ВремяЛогистикиОкончание тогда
		    Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = "Время начала транспортной логистики не может быть равной или больше времени окончания!";
		    Сообщение.Поле = "ВремяЛогистикиНачало";
		    Сообщение.УстановитьДанные(ЭтотОбъект);
		    Сообщение.Сообщить();
			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВремяЛогистикиНачало"));
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВремяЛогистикиОкончание"));
			
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВидВзаиморасчетов = ПредопределенныеЭлементыРасширенияСервер.ПредопределенноеЗначениеРасширения("Справочник", "ВидыВзаиморасчетов", "ПрочиеДоговора") Тогда
		СписокРеквизитов = Новый Массив;
		СписокРеквизитов.Добавить("Номер");
		СписокРеквизитов.Добавить("Дата");
		СписокРеквизитов.Добавить("НомерРеестровойЗаписи");
		СписокРеквизитов.Добавить("НачалоДействия");
		СписокРеквизитов.Добавить("СрокДействия");
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка) тогда
			Для Каждого ИмяРеквизита из СписокРеквизитов цикл
				Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка[ИмяРеквизита]) тогда
					ПроверяемыеРеквизиты.Добавить(ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;

		Иначе
			Для Каждого ИмяРеквизита из СписокРеквизитов цикл
				ПроверяемыеРеквизиты.Добавить(ИмяРеквизита);
			КонецЦикла;
		КонецЕсли;
		
		Базар_ПроверитьУникальностьНомераРеестровойЗаписи(Отказ);
		
	КонецЕсли;
	
	// Получим значения реквизитов договора из информационной базы
	РеквизитыДоговораИзИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ВидДоговора");
	
	// Для элемента нужно получить документы, в которых использован договор:
	ЕстьПроведенныеДокументыПоДоговору = Ложь;
	ЕстьОформленныеДокументыПоДоговору = Ложь;
	
	НеобходимаПроверка = Базар_ОпределитьНеобходимостьПроверки(РеквизитыДоговораИзИБ, 
		ЕстьПроведенныеДокументыПоДоговору, ЕстьОформленныеДокументыПоДоговору);
	
	Если НеобходимаПроверка Тогда
		СписокРеквизитов = Новый Структура("ВидДоговора", НСтр("ru = 'Вид договора'"));
		
		Для Каждого КлючИЗначение Из СписокРеквизитов Цикл
			
			Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка) тогда
				Если ЗначениеЗаполнено(ЭтотОбъект.Ссылка[КлючИЗначение.Ключ]) тогда
				
					Если ЕстьПроведенныеДокументыПоДоговору Тогда
						ТекстСообщенияДокументы = НСтр("ru = 'Существуют документы, проведенные по договору %1.'");
						ТекстСообщенияДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияДокументы, Наименование);
						ТекстСообщения = ТекстСообщенияДокументы + НСтр("ru = '
							|Реквизит %2 не может быть изменен.'");
						
						СообщитьОНекорректномРеквизите(КлючИЗначение.Ключ, КлючИЗначение.Значение, ТекстСообщения, Отказ);
							
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура Базар_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Справочники.ДоговорыКонтрагентов.УстановитьТипЦенПоУмолчанию(ЭтотОбъект);
	Справочники.ДоговорыКонтрагентов.УстановитьОрганизациюПоУмолчанию(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ЗаРуководителяПоПриказу) И
		ЗначениеЗаполнено(Руководитель) И
		ЗначениеЗаполнено(Организация) тогда
		ЗаРуководителяПоПриказу = Организация.ОснованиеПраваПодписиДоговоров;
	КонецЕсли;
	
КонецПроцедуры

Процедура Базар_ПроверитьУникальностьНомераРеестровойЗаписи(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Наименование КАК Договор,
	|	ДоговорыКонтрагентов.Владелец.Наименование КАК Контрагент
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.НомерРеестровойЗаписи = &НомерРеестровойЗаписи
	|	И ДоговорыКонтрагентов.Ссылка <> &ТекущаяСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Владелец.Наименование,
	|	ДоговорыКонтрагентов.Наименование";
	
	Запрос.УстановитьПараметр("НомерРеестровойЗаписи", НомерРеестровойЗаписи);
	Запрос.УстановитьПараметр("ТекущаяСсылка"        , Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекстСообщения = "Уникальность номера реестровой записи нарушена. Данные: " + Выборка.Контрагент + ", " + Выборка.Договор + "!";
		СообщитьОНекорректномРеквизите("НомерРеестровойЗаписи", "Номер реестровой записи", ТекстСообщения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция Базар_ОпределитьНеобходимостьПроверки(РеквизитыДоговораИзИБ, ЕстьПроведенныеДокументыПоДоговору, ЕстьОформленныеДокументыПоДоговору)

	ЕстьПроведенныеДокументыПоДоговору = Ложь;
	ЕстьОформленныеДокументыПоДоговору = Ложь;
	
	Если ВидДоговора <> РеквизитыДоговораИзИБ.ВидДоговора Тогда
		
		МассивДокументов = Справочники.ДоговорыКонтрагентов.ДокументыПоДоговору(Ссылка);
		
		Если МассивДокументов.Количество() > 0 Тогда
		
			МассивНеПроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивДокументов);
			
			ЕстьОформленныеДокументыПоДоговору = Истина;
			ЕстьПроведенныеДокументыПоДоговору = (МассивНеПроведенныхДокументов.Количество() < МассивДокументов.Количество());
			
		КонецЕсли;
			
		Возврат Истина;

	Иначе

		// Проверку запускать не надо, ключевые реквизиты не менялись
		Возврат Ложь;

	КонецЕсли;

КонецФункции