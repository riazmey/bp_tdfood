&НаКлиенте
Процедура СопрДок_ИзменитьВидимостьГруппаСопроводительныеДокументыВместо(Команда)
	
	ГруппаСопроводительныеДокументыРазвернута = НЕ ГруппаСопроводительныеДокументыРазвернута;
	Элементы.ГруппаСопроводительныеДокументы.Видимость = ГруппаСопроводительныеДокументыРазвернута;
	ОтобразитьИзображениеНаФорме();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаСервере
Процедура Базар_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	СистемныеНастройкиБазар = ОбщегоНазначенияБазарСервер.СистемныеНастройкиБазар(ТекущаяДата());
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) тогда
		ТипЦен = СистемныеНастройкиБазар.ТипЦенСебестоимость;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Склад) тогда
		Склад = СистемныеНастройкиБазар.СкладОтгрузки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОстатков) тогда
		ДатаОстатков = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаЦен) тогда
		ДатаЦен = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ЗаполнитьПараметрыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СопрДок_ПриОткрытииПосле(Отказ)
	
	ФайловаяСистемаКлиент.СоздатьВременныйКаталог(Новый ОписаниеОповещения(
		"ОбработкаОповещенияСоздатьВременныйКаталогФормы"
		, ЭтаФорма));
		
	Элементы.ГруппаСопроводительныеДокументы.Видимость = ГруппаСопроводительныеДокументыРазвернута;
	НужноОбновитьИзображения = Истина;
	ОтобразитьИзображениеНаФорме();
	СформироватьНадписьНастройкиСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СопрДок_ПриЗакрытииПосле(ЗавершениеРаботы)
	НачатьУдалениеФайлов(Новый ОписаниеОповещения(
		"ОбработкаОповещенияУдалениеВременногоКаталогаФормы"
		, ЭтотОбъект)
		, КаталогВременныхФайловДокумента);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
&НаКлиенте
Процедура СопрДок_СписокПриАктивизацииСтрокиПосле(Элемент)
	
	НужноОбновитьИзображения = Истина;
	Если ГруппаСопроводительныеДокументыРазвернута тогда
		ПодключитьОбработчикОжидания("ОтобразитьИзображениеНаФорме", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИзображениеНаФорме()
	
	Если НЕ НужноОбновитьИзображения тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЭлементыФормыДляИзображений();
	ТаблицаДанныхИзображений.Очистить();
	
	Если НЕ ГруппаСопроводительныеДокументыРазвернута тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено ИЛИ Элементы.Список.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзображений = ПодготовитьАдресаВременногоХранилищаИзображений(Элементы.Список.ТекущиеДанные.Ссылка);
	
	Если ДанныеИзображений = Неопределено тогда
		ПолныйПутьФайла = КаталогВременныхФайловДокумента+"ИзображенияОтсутствуют.jpg";
		
		ФайлИзображения = Новый Файл(ПолныйПутьФайла);
		
		Если НЕ ФайлИзображения.Существует() тогда
			БиблиотекаКартинок.ИзображенияОтсутствуют.Записать(ПолныйПутьФайла);
		КонецЕсли;
			
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайла);
		
		НоваяСтрока = ТаблицаДанныхИзображений.Добавить();
		НоваяСтрока.Заголовок           = "Изображения_отсутствуют";
		НоваяСтрока.ПолныйПуть          = ПолныйПутьФайла;
		НоваяСтрока.АдресХранилища      = ПоместитьВоВременноеХранилище(ДвоичныеДанные,УникальныйИдентификатор);
	Иначе
		Для Каждого ДанныеИзображения из ДанныеИзображений цикл
			
			ПолныйПутьФайла = КаталогВременныхФайловДокумента+ДанныеИзображения.GUIDИзображения+".jpg";
			ДанныеИзображения.ДвоичныеДанные.Записать(ПолныйПутьФайла);
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайла);
			
			Если ДанныеИзображения.ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыСопроводительныхДокументов.ДекларацияСоответствия") Тогда
				Префикс = "Декл. соотв.";
			ИначеЕсли ДанныеИзображения.ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыСопроводительныхДокументов.СертификатСоответствия") Тогда
				Префикс = "Серт. соотв.";
			ИначеЕсли ДанныеИзображения.ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыСопроводительныхДокументов.КачественноеУдостоверение") Тогда
				Префикс = "Кач. удост.";
			ИначеЕсли ДанныеИзображения.ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыСопроводительныхДокументов.ПротоколЛабораторногоИсследования") Тогда
				Префикс = "Лаб. иссл.";
			ИначеЕсли ДанныеИзображения.ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыСопроводительныхДокументов.ИнформационноеПисьмо") Тогда
				Префикс = "Инф. писмо";
			КонецЕсли;
			
			СтрокаСтандартаВыработки = "";
			Если ЗначениеЗаполнено(ДанныеИзображения.СтандартНаПродукцию) тогда
				СтрокаСтандартаВыработки = Строка(ДанныеИзображения.СтандартНаПродукцию);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДанныхИзображений.Добавить();
			НоваяСтрока.Заголовок           = Префикс + " №"+ДанныеИзображения.НомерДокумента + Символы.ПС + СтрокаСтандартаВыработки;
			НоваяСтрока.ПолныйПуть          = ПолныйПутьФайла;
			НоваяСтрока.АдресХранилища      = ПоместитьВоВременноеХранилище(ДвоичныеДанные,УникальныйИдентификатор);
			НоваяСтрока.ДокументРегистратор = ДанныеИзображения.ДокументРегистратор;
			
		КонецЦикла;
	КонецЕсли;
	
	СоздатьЭлементыФормыДляИзображений();
	
	НужноОбновитьИзображения = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыФормыДляИзображений()
	
	Счетчик = 0;
	Для Каждого ДанныеИзображения из ТаблицаДанныхИзображений цикл
		
		ИзображенияОтсутствуют = ДанныеИзображения.Заголовок = "Изображения_отсутствуют";
		
		НайденыйЭлементФормыГруппа = Элементы.Найти("СопрДок_ГруппаИзображения"+Счетчик);
		НайденыйЭлементФормыПолеКартинка = Элементы.Найти("СопрДок_Изображение"+Счетчик);
		
		Если НЕ ИзображенияОтсутствуют тогда
			НайденыйЭлементФормыДекорацияНадпись = Элементы.Найти("СопрДок_Надпись"+Счетчик);
		КонецЕсли;
		
		Если НЕ ИзображенияОтсутствуют тогда
			Если НЕ НайденыйЭлементФормыДекорацияНадпись = Неопределено тогда
				Элементы.Удалить(НайденыйЭлементФормыДекорацияНадпись);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НайденыйЭлементФормыПолеКартинка = Неопределено тогда
			Элементы.Удалить(НайденыйЭлементФормыПолеКартинка);
		КонецЕсли;
		
		Если НЕ НайденыйЭлементФормыГруппа = Неопределено тогда
			Элементы.Удалить(НайденыйЭлементФормыГруппа);
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыДляИзображений()
	
	Счетчик = 0;
	Для Каждого ДанныеИзображения из ТаблицаДанныхИзображений цикл
		
		ИзображенияОтсутствуют = ДанныеИзображения.Заголовок = "Изображения_отсутствуют";
		
		НовыйЭлементФормыГруппа = Элементы.Добавить("СопрДок_ГруппаИзображения"+Счетчик, Тип("ГруппаФормы"), Элементы.ГруппаСопроводительныеДокументы);
		НовыйЭлементФормыГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НовыйЭлементФормыГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		НовыйЭлементФормыГруппа.Поведение = ПоведениеОбычнойГруппы.Обычное;
		НовыйЭлементФормыГруппа.ОтображатьЗаголовок = Ложь;
		НовыйЭлементФормыГруппа.Объединенная = Истина;
		НовыйЭлементФормыГруппа.Заголовок = "";
		
		НовыйЭлементФормыПолеКартинка = Элементы.Добавить("СопрДок_Изображение"+Счетчик, Тип("ПолеФормы"), НовыйЭлементФормыГруппа);
		НовыйЭлементФормыПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
		НовыйЭлементФормыПолеКартинка.ПутьКДанным = "ТаблицаДанныхИзображений["+Счетчик+"].АдресХранилища";
		НовыйЭлементФормыПолеКартинка.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		НовыйЭлементФормыПолеКартинка.Ширина = 20;
		НовыйЭлементФормыПолеКартинка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		НовыйЭлементФормыПолеКартинка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлементФормыПолеКартинка.Заголовок = "";
		
		Если НЕ ИзображенияОтсутствуют тогда
			НовыйЭлементФормыДекорацияНадпись = Элементы.Добавить("СопрДок_Надпись"+Счетчик, Тип("ДекорацияФормы"), НовыйЭлементФормыГруппа);
			НовыйЭлементФормыДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
			НовыйЭлементФормыДекорацияНадпись.Гиперссылка = Истина;
			НовыйЭлементФормыДекорацияНадпись.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			НовыйЭлементФормыДекорацияНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
			НовыйЭлементФормыДекорацияНадпись.РастягиватьПоГоризонтали = Истина;
			НовыйЭлементФормыДекорацияНадпись.Заголовок = ДанныеИзображения.Заголовок;
			НовыйЭлементФормыДекорацияНадпись.Шрифт = Новый Шрифт(НовыйЭлементФормыДекорацияНадпись.Шрифт,,,,,,,90);
			НовыйЭлементФормыДекорацияНадпись.УстановитьДействие("Нажатие","СопрДок_ПриНажатииОткрытьСопроводительныйДокумент");
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПодготовитьАдресаВременногоХранилищаИзображений(Номенклатура)
	
	ДанныеВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СопроводительныеДокументы.GUIDИзображения КАК GUIDИзображения,
	               |	СопроводительныеДокументы.Регистратор.НомерДокумента КАК НомерДокумента,
	               |	СопроводительныеДокументы.Регистратор.ВидОперации КАК ВидОперации,
	               |	СопроводительныеДокументы.Регистратор КАК ДокументРегистратор
	               |ИЗ
	               |	РегистрСведений.Базар_СопроводительныеДокументы КАК СопроводительныеДокументы
	               |ГДЕ
	               |	СопроводительныеДокументы.ДатаОкончанияДействия >= &ТекущаяДата
	               |	И СопроводительныеДокументы.Регистратор.Дата <= &ТекущаяДата
	               |	И СопроводительныеДокументы.Номенклатура = &Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СопроводительныеДокументы.Регистратор,
	               |	СопроводительныеДокументы.GUIDИзображения,
	               |	СопроводительныеДокументы.Регистратор.НомерДокумента,
	               |	СопроводительныеДокументы.Регистратор.ВидОперации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидОперации,
	               |	НомерДокумента";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Пока Выборка.Следующий() цикл
		
		ЗапросИзображения = Новый Запрос;
		ЗапросИзображения.УстановитьПараметр("GUIDИзображения", Выборка.GUIDИзображения);
		
		ЗапросИзображения.Текст = 
		"ВЫБРАТЬ
		|	Базар_СопроводительныеДокументыИзображения.Изображение КАК Изображение
		|ИЗ
		|	РегистрСведений.Базар_СопроводительныеДокументыИзображения КАК Базар_СопроводительныеДокументыИзображения
		|ГДЕ
		|	Базар_СопроводительныеДокументыИзображения.GUIDИзображения = &GUIDИзображения";
		
		ВыборкаИзображений = ЗапросИзображения.Выполнить().Выбрать();
		ВыборкаИзображений.Следующий();
		
		Изображение = ВыборкаИзображений.Изображение.Получить();
		Если НЕ ТипЗнч(Изображение) = Тип("Картинка") И НЕ ТипЗнч(Изображение) = Тип("ДвоичныеДанные") тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросСтандартНаПродукцию = Новый Запрос;
		ЗапросСтандартНаПродукцию.УстановитьПараметр("Номенклатура", Номенклатура);
		ЗапросСтандартНаПродукцию.УстановитьПараметр("ДокументРегистратор", Выборка.ДокументРегистратор);
		
		ЗапросСтандартНаПродукцию.Текст = 
		"ВЫБРАТЬ
		|	Базар_СопроводительныеДокументы.СтандартНаПродукцию.Наименование КАК СтандартНаПродукциюНаименование
		|ИЗ
		|	РегистрСведений.Базар_СопроводительныеДокументы КАК Базар_СопроводительныеДокументы
		|ГДЕ
		|	Базар_СопроводительныеДокументы.Номенклатура = &Номенклатура
		|	И Базар_СопроводительныеДокументы.Регистратор = &ДокументРегистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	Базар_СопроводительныеДокументы.СтандартНаПродукцию.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтандартНаПродукциюНаименование";
		
		ВыборкаСтандартНаПродукцию = ЗапросСтандартНаПродукцию.Выполнить().Выбрать();
		
		СтрокаСтандартНаПродукцию = "";
		Пока ВыборкаСтандартНаПродукцию.Следующий() Цикл
			
			Если ПустаяСтрока(СтрокаСтандартНаПродукцию) тогда
				СтрокаСтандартНаПродукцию = ВыборкаСтандартНаПродукцию.СтандартНаПродукциюНаименование;
			Иначе
				СтрокаСтандартНаПродукцию = СтрокаСтандартНаПродукцию + ", " + ВыборкаСтандартНаПродукцию.СтандартНаПродукциюНаименование;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураЗаписи = Новый Структура;
		
		СтруктураЗаписи.Вставить("ДвоичныеДанные"     , Изображение);
		СтруктураЗаписи.Вставить("НомерДокумента"     , Выборка.НомерДокумента);
		СтруктураЗаписи.Вставить("ВидОперации"        , Выборка.ВидОперации);
		СтруктураЗаписи.Вставить("ДокументРегистратор", Выборка.ДокументРегистратор);
		СтруктураЗаписи.Вставить("GUIDИзображения"    , Выборка.GUIDИзображения);
		СтруктураЗаписи.Вставить("СтандартНаПродукцию", СтрокаСтандартНаПродукцию);
		
		ДанныеВозврата.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ ОПОВЕЩЕНИЙ
&НаКлиенте
Процедура ОбработкаОповещенияУдалениеВременногоКаталогаФормы(Контекст) Экспорт
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияСоздатьВременныйКаталогФормы(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	КаталогВременныхФайловДокумента = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаВременныхФайлов);

КонецПроцедуры

&НаКлиенте
Процедура СопрДок_ПриНажатииОткрытьСопроводительныйДокумент(Элемент)
	
	Счетчик = 0;
	Для Каждого ДанныеИзображения из ТаблицаДанныхИзображений цикл
		
		Если Элемент.Имя = "СопрДок_Надпись" + Счетчик
		 ИЛИ Элемент.Имя = "СопрДок_Изображение" + Счетчик тогда
		 
			ПараметрыДляПередачи = Новый Структура;
			ПараметрыДляПередачи.Вставить("Ключ", ДанныеИзображения.ДокументРегистратор);
			
			ОткрытьФорму("Документ.СопроводительныйДокумент.ФормаОбъекта", ПараметрыДляПередачи);
		 
			//ОткрытьЗначение(ДанныеИзображения.ДокументРегистратор);
			//ОткрытьСопроводительныйДокумент(Счетчик);
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьСопроводительныйДокумент(НомерСтрокиВТаблицеДанныхИзображений)
	
	СтрокаТаблицы = ТаблицаДанныхИзображений.Получить(НомерСтрокиВТаблицеДанныхИзображений);
	
	ДокументОбъект = СтрокаТаблицы.ДокументРегистратор.ПолучитьОбъект();
	
	ФормаДокумента = ДокументОбъект.ПолучитьФорму("ФормаДокументаОбщая");
	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Базар_КартинкиСопроводительныхДокументовПриАктивизацииСтрокиПосле(Элемент)
	Элементы.КартинкиСопроводительныхДокументов.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Базар_ОткрытьНастройкиСпискаВместо(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад"       , Склад);
	ПараметрыФормы.Вставить("ДатаОстатков", ?(ЗначениеЗаполнено(ДатаОстатков), ДатаОстатков, КонецДня(ТекущаяДата())));
	ПараметрыФормы.Вставить("ТипЦен"       , ТипЦен);
	ПараметрыФормы.Вставить("ДатаЦен"     , ?(ЗначениеЗаполнено(ДатаЦен), ДатаЦен, КонецДня(ТекущаяДата())));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаНастроекСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписьНастройкиСписка()
	
	ТекстНадписи = "Склад: ";
	Если ЗначениеЗаполнено(Склад) тогда
		ТекстНадписи = ТекстНадписи + Строка(Склад);
	Иначе
		ТекстНадписи = ТекстНадписи + "<Пусто>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОстатков) тогда
		ТекстНадписи = ТекстНадписи + " (" + Формат(ДатаОстатков,"ДФ=dd.MM.yyyy") + ")";
	Иначе
		ТекстНадписи = ТекстНадписи + " (" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + ")";
	КонецЕсли;
	
	ТекстНадписи = ТекстНадписи + "; Цены: ";
	Если ЗначениеЗаполнено(ТипЦен) тогда
		ТекстНадписи = ТекстНадписи + Строка(ТипЦен);
	Иначе
		ТекстНадписи = ТекстНадписи + "<Пусто>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЦен) тогда
		ТекстНадписи = ТекстНадписи + " (" + Формат(ДатаЦен,"ДФ=dd.MM.yyyy") + ")";
	Иначе
		ТекстНадписи = ТекстНадписи + " (" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + ")";
	КонецЕсли;
	
	Элементы.ДекорацияНастройкиСписка.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСписка()
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Список.Параметры.УстановитьЗначениеПараметра("Организация" , ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Список.Параметры.УстановитьЗначениеПараметра("Склад"       , Склад);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатков", ?(ЗначениеЗаполнено(ДатаОстатков), ДатаОстатков, КонецДня(ТекущаяДата())));
	Список.Параметры.УстановитьЗначениеПараметра("ВидыСубконто", ВидыСубконто);
	Список.Параметры.УстановитьЗначениеПараметра("СчетаЗапасов", ГосЗакупкиСервер.МассивСчетовЗапасов(ВидыСубконто));
	Список.Параметры.УстановитьЗначениеПараметра("ТипЦен"      , ТипЦен);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаЦен"     , ?(ЗначениеЗаполнено(ДатаЦен), ДатаЦен, КонецДня(ТекущаяДата())));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастроекСписка(НастройкиСписка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиСписка);
	СформироватьНадписьНастройкиСписка();
	ЗаполнитьПараметрыСписка();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Базар_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаНастроекСписка" Тогда
		ОбработкаВыбораНастроекСписка(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры
