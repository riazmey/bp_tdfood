// Процедура обработки регламентного задания по очистке регистров замеров
&После("ОчиститьРегистрыЗамерыВремени")
Процедура Базар_ОчиститьРегистрыЗамерыВремени() Экспорт
	
	// ЗАПУСК АВТОМАТИЧЕСКОЙ АКТУАЛИЗАЦИИ ДАННЫХ
	РезультатыАктуализаций = Новый Массив;
	
	Организация               = Справочники.Организации.Выбрать();
	КонечныйМесяцАктуальности = КонецМесяца(ТекущаяДата());
	КоличествоПопыток         = 3;
	
	Пока Организация.Следующий() цикл
		
		НачальныеПараметрыАктуальности = ПроверитьАктуальность(Организация.Ссылка, КонечныйМесяцАктуальности);
		
		МесяцЗакрытия = КонецМесяца(НачальныеПараметрыАктуальности.ДатаАктуальности);
		НомерПопытки  = 0;
		Пока МесяцЗакрытия <= КонечныйМесяцАктуальности цикл
			
			НомерПопытки = НомерПопытки + 1;
			ПараметрыАктуальности = ПроверитьАктуальность(Организация.Ссылка, МесяцЗакрытия);
			
			Если НЕ ПараметрыАктуальности.Свойство("ТребуетсяАктуализация") тогда
				Продолжить;
			Иначе
				Если НЕ ПараметрыАктуальности.ТребуетсяАктуализация тогда
					МесяцЗакрытия = КонецМесяца(МесяцЗакрытия + (20*86400));
					НомерПопытки  = 0;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПараметрыАктуальности.Свойство("ДатаАктуальности") тогда
				Продолжить;
			КонецЕсли;
			
			РезультатАктуализации = ЗапуститьАктуализацию(Организация.Ссылка, ПараметрыАктуальности.ДатаАктуальности);
			
			РезультатАктуализации.Вставить("ДанныеОшибок", ПолучитьИзВременногоХранилища(РезультатАктуализации.АдресХранилищаСОшибками));
			
			РезультатыАктуализаций.Добавить(РезультатАктуализации);
			
			Если НЕ РезультатАктуализации.Выполнено тогда
				Если НомерПопытки = КоличествоПопыток тогда
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МесяцЗакрытия = КонецМесяца(МесяцЗакрытия + (20*86400));
			НомерПопытки  = 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПодготовитьФайлыОтчетаИОтправитьПоЭлектроннойПочте(РезультатыАктуализаций);
	
КонецПроцедуры

Функция ПроверитьАктуальность(Организация, ПериодПроверки)
	
	ПараметрыПроверкиАктуальности = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверкиАктуальности.Организация = Организация;
	ПараметрыПроверкиАктуальности.Период      = ПериодПроверки;
	
	Возврат Обработки.ЗакрытиеМесяца.ПроверитьАктуальность(ПараметрыПроверкиАктуальности);
	
КонецФункции

Функция ЗапуститьАктуализацию(Организация, МесяцЗакрытия)
	
	ОтключитьКонтрольОтрицательныхОстатков = Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	
	Если НЕ ОтключитьКонтрольОтрицательныхОстатков тогда
		Константы.ОтключитьКонтрольОтрицательныхОстатков.Установить(Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СамостоятельнаяОперация", Истина);
	ДополнительныеПараметры.Вставить("ВидОперации", "Актуализация");
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Организация;
	ПараметрыАктуализации.Период                       = МесяцЗакрытия;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = Неопределено;
	ПараметрыАктуализации.АдресХранилищаСОшибками      = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	ПараметрыАктуализации.ЭтоЗакрытиеМесяца            = Истина;
	ПараметрыАктуализации.ДополнительныеПараметры      = ДополнительныеПараметры;

	РезультатАктуализации = Обработки.ЗакрытиеМесяца.Базар_АктуализироватьЗаПериод(ПараметрыАктуализации);
	РезультатАктуализации.Вставить("АдресХранилищаСОшибками", ПараметрыАктуализации.АдресХранилищаСОшибками);
	
	Константы.ОтключитьКонтрольОтрицательныхОстатков.Установить(ОтключитьКонтрольОтрицательныхОстатков);
	
	Возврат РезультатАктуализации;
	
КонецФункции

Процедура ПодготовитьФайлыОтчетаИОтправитьПоЭлектроннойПочте(РезультатыАктуализаций);
	
	Если НЕ РаботаСПочтовымиСообщениямиВызовСервера.ЕстьДоступныеУчетныеЗаписиДляОтправки() тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭлектронныхПисем = ПодготовитьДанныеЭлектронныхПисем(РезультатыАктуализаций);
	
	ОтправитьЭлектронныеПисьма(ДанныеЭлектронныхПисем);
	
КонецПроцедуры

Функция ПодготовитьДанныеЭлектронныхПисем(РезультатыАктуализаций)
	
	ДанныеЭлектронныхПисем = Новый Массив;
	
	Для Каждого РезультатАктуализации из РезультатыАктуализаций цикл
		
		Если НЕ РезультатАктуализации.Выполнено тогда
			
			ДанныеОшибок = РезультатАктуализации.ДанныеОшибок;
			
			Если ДанныеОшибок = Неопределено тогда
				Продолжить;
			КонецЕсли;
			
			ОтчетПоОшибкам = ДанныеОшибок.ОтчетПоОшибкам;
			ОтчетПоОшибкам.АвтоМасштаб = Истина;
			ОтчетПоОшибкам.ПолеСлева = 10;
			ОтчетПоОшибкам.ПолеСправа = 10;
			ОтчетПоОшибкам.ПолеСверху = 10;
			ОтчетПоОшибкам.ПолеСнизу = 10;
			ОтчетПоОшибкам.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			
			ИмяВременногоФайлPDF = ПолучитьИмяВременногоФайла("pdf");
			ОтчетПоОшибкам.Записать(ИмяВременногоФайлPDF, ТипФайлаТабличногоДокумента.PDF);
			ИдентификаторВременногоФайлPDF  = Новый УникальныйИдентификатор;
			АдресХранилищаВременногоФайлPDF = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлPDF), ИдентификаторВременногоФайлPDF);
			УдалитьФайлы(ИмяВременногоФайлPDF);
			
			ИмяВременногоФайлMXL = ПолучитьИмяВременногоФайла("mxl");
			ОтчетПоОшибкам.Записать(ИмяВременногоФайлMXL, ТипФайлаТабличногоДокумента.MXL);
			ИдентификаторВременногоФайлMXL  = Новый УникальныйИдентификатор;
			АдресХранилищаВременногоФайлMXL = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлMXL), ИдентификаторВременногоФайлMXL);
			УдалитьФайлы(ИмяВременногоФайлMXL);
			
			
			Вложения = Новый Массив;
			ОписаниеВложения = Новый Структура;
			ОписаниеВложения.Вставить("Представление", "ОшибкиЗакрытияМесяца.pdf");
			ОписаниеВложения.Вставить("АдресВоВременномХранилище", АдресХранилищаВременногоФайлPDF);
			ОписаниеВложения.Вставить("Кодировка", КодировкаТекста.UTF8);
			ОписаниеВложения.Вставить("Идентификатор", ИдентификаторВременногоФайлPDF);
			Вложения.Добавить(ОписаниеВложения);
			
			ОписаниеВложения = Новый Структура;
			ОписаниеВложения.Вставить("Представление", "ОшибкиЗакрытияМесяца.mxl");
			ОписаниеВложения.Вставить("АдресВоВременномХранилище", АдресХранилищаВременногоФайлMXL);
			ОписаниеВложения.Вставить("Кодировка", КодировкаТекста.UTF8);
			ОписаниеВложения.Вставить("Идентификатор", ИдентификаторВременногоФайлMXL);
			Вложения.Добавить(ОписаниеВложения);
			
			
			Кому = Новый Массив;
			Кому.Добавить(Новый Структура("Адрес, Представление", "riazmey@bk.ru", "Радаев И.А."));
			
			ДанныеЭлектронногоПисьма = Новый Структура;
			ДанныеЭлектронногоПисьма.Вставить("Кому", Кому);
			ДанныеЭлектронногоПисьма.Вставить("Тема", "1С БП 3.0: Ошибки закрытия месяца");
			ДанныеЭлектронногоПисьма.Вставить("Тело", "При закрытии месяца в базе данных 1С БП 3.0, произошли ошибки. Данные смотрите во вложениях.");
			ДанныеЭлектронногоПисьма.Вставить("Вложения", Вложения);
			
			ДанныеЭлектронныхПисем.Добавить(ДанныеЭлектронногоПисьма);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеЭлектронныхПисем;
	
КонецФункции

Процедура ОтправитьЭлектронныеПисьма(ДанныеЭлектронныхПисем)
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
	
	Для Каждого ДанныеЭлектронногоПисьма из ДанныеЭлектронныхПисем цикл
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ДанныеЭлектронногоПисьма);
		РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
		РаботаСПочтовымиСообщениямиПереопределяемый.ПослеОтправкиПисьма(ДанныеЭлектронногоПисьма);
	КонецЦикла;
	
КонецПроцедуры
