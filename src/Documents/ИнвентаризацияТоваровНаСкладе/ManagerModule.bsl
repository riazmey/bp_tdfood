&Вместо("ВремяДокументаПоУмолчанию")
Функция Базар_ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 23, 20);
	
КонецФункции

&Вместо("ПодготовитьЗапросИнвентаризация")
Функция Базар_ПодготовитьЗапросИнвентаризация(ПараметрыЗаполнения)
	
	// Определим настройки аналитического учета.
	ВестиСкладскойУчетБУ = БухгалтерскийУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	ВестиСуммовойУчетПоСкладамБУ = ВестиСкладскойУчетБУ
		И БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
		
	МассивИсклСчетов = Новый Массив();
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ); // 41.12
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);                            // 42
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГТД);                                        // ГТД
	МассивИсклСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);          // МЦ
	МассивИсклСчетов = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивИсклСчетов);
	
	// Определяем условия отборов по счетам и аналитикам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментАнализаОстатков",  Новый Граница(ПараметрыЗаполнения.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Склад",		            СписокСкладовДляЗаполнения(ПараметрыЗаполнения));
	Запрос.УстановитьПараметр("МОЛ",	 			    ПараметрыЗаполнения.ОтветственноеЛицо);
	Запрос.УстановитьПараметр("Организация",	        ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("ИсклСчета",	 		    МассивИсклСчетов);
	ТолькоПерезаполнение = (ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества");
	Если ТолькоПерезаполнение Тогда
		Запрос.УстановитьПараметр("ДокументСсылка", ПараметрыЗаполнения.Ссылка);
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.ИспользуетсяОтложенноеПроведение Тогда
		Если ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества" Тогда
			ТекстУсловияСчетов = "ИСТИНА";
		Иначе
			ТекстУсловияСчетов = "НЕ Счет В (&ИсклСчета)";
		КонецЕсли;
	Иначе
		// Актуальность на дату документа возможна только для отдельных счетов. Для всех остальных счетов актуальными будут
		// только остатки, учитывающие проводки корректировки стоимости по состоянию на конец месяца.
		Если ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества" Тогда
			ТекстУсловияСчетов = "(&АктуальностьНаКонецМесяца
			|				И НЕ ИнвентаризацияТоваровНаСкладеТовары.СчетУчета В (&СчетаРассчитываемыеОперативно)
			|			ИЛИ НЕ &АктуальностьНаКонецМесяца
			|				И ИнвентаризацияТоваровНаСкладеТовары.СчетУчета В (&СчетаРассчитываемыеОперативно))";
		Иначе
			ТекстУсловияСчетов = "(&АктуальностьНаКонецМесяца
			|						И НЕ Счет В (&ИсклСчета, &СчетаРассчитываемыеОперативно)
			|					ИЛИ НЕ &АктуальностьНаКонецМесяца
			|						И Счет В (&СчетаРассчитываемыеОперативно)
			|						И НЕ Счет В (&ИсклСчета))";
		КонецЕсли;
		Запрос.УстановитьПараметр("СчетаРассчитываемыеОперативно", УчетТоваров.СчетаРассчитываемыеОперативно());
	КонецЕсли;
	ТекстУсловияКоличества = ?(ВестиСкладскойУчетБУ, "И Субконто2 В (&Склад)", "");
	ТекстУсловияЦены = ?(ВестиСуммовойУчетПоСкладамБУ, "И Субконто2 В (&Склад)", "");
	
	// Определяем наборы субконто.
	
	ПорядокСубконтоКоличество = Новый Массив();
	ПорядокСубконтоКоличество.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСкладскойУчетБУ Тогда
		ПорядокСубконтоКоличество.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	ПорядокСубконтоЦена = Новый Массив();
	ПорядокСубконтоЦена.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСуммовойУчетПоСкладамБУ Тогда
		ПорядокСубконтоЦена.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	ПорядокСубконтоМОЛ = Новый Массив();
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконтоМОЛ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Запрос.УстановитьПараметр("ПорядокСубконтоКоличество", ПорядокСубконтоКоличество);
	Запрос.УстановитьПараметр("ПорядокСубконтоЦена",       ПорядокСубконтоЦена);
	Запрос.УстановитьПараметр("ПорядокСубконтоМОЛ",        ПорядокСубконтоМОЛ);
	
	Если ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества" Тогда
		
		ТекстЗапросаИнвентаризация =
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК НомерСтроки,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
		|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчета КАК СчетУчета,
		|	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК Количество,
		|	ИнвентаризацияТоваровНаСкладеТовары.Цена КАК Цена,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице КАК ЦенаВРознице,
		|	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &ДокументСсылка
		|	И &ТекстУсловияСчетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиКоличество.Счет КАК Счет,
		|	ХозрасчетныйОстаткиКоличество.Субконто1 КАК Субконто1,
		|	СУММА(ХозрасчетныйОстаткиКоличество.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиКоличество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментАнализаОстатков,
		|			НЕ Счет В (&ИсклСчета),
		|			&ПорядокСубконтоКоличество,
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаТовары.Номенклатура
		|					ИЗ
		|						ТаблицаТовары КАК ТаблицаТовары)
		|				И &ТекстУсловияКоличества) КАК ХозрасчетныйОстаткиКоличество
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиКоличество.Субконто1,
		|	ХозрасчетныйОстаткиКоличество.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйЦена.Счет КАК Счет,
		|	ХозрасчетныйЦена.Субконто1 КАК Субконто1,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДляЦены,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДляЦены
		|ПОМЕСТИТЬ ХозрасчетныйЦена
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоМесяца,
		|			&МоментАнализаЦены,
		|			Период,
		|			ДвиженияИГраницыПериода,
		|			,
		|			&ПорядокСубконтоЦена,
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаТовары.Номенклатура
		|					ИЗ
		|						ТаблицаТовары КАК ТаблицаТовары)
		|				И &ТекстУсловияЦены) КАК ХозрасчетныйЦена
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйЦена.Субконто1,
		|	ХозрасчетныйЦена.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Счет";
		
		ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
			
		Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.Склад)
		   И ЗначениеЗаполнено(ПараметрыЗаполнения.ОтветственноеЛицо) Тогда
		   
		   // Для счёта 10.11 отложенное проведение не используется, поэтому сумма всегда на дату документа.
		   
		   ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация +
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет КАК Счет,
			|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
			|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
			|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток
			|ПОМЕСТИТЬ ХозрасчетныйМОЛ
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&МоментАнализаОстатков,
			|			НЕ Счет В (&ИсклСчета),
			|			&ПорядокСубконтоМОЛ,
			|			НЕ &АктуальностьНаКонецМесяца
			|				И Организация = &Организация
			|				И Субконто2 В (&МОЛ)) КАК ХозрасчетныйОстатки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Субконто1,
			|	Счет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0) = 0
			|			ТОГДА ТаблицаТовары.Цена
			|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйЦена.СуммаДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.СуммаОстаток, 0)
			|	КОНЕЦ КАК СуммаДляЦены,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0) = 0
			|			ТОГДА 1
			|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0)
			|	КОНЕЦ КАК КоличествоДляЦены,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ХозрасчетныйОстаткиКоличество.КоличествоОстаток, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0) > 0
			|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстаткиКоличество.КоличествоОстаток, 0) + ЕСТЬNULL(ХозрасчетныйМОЛ.КоличествоОстаток, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КоличествоУчет,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ТаблицаТовары.ЦенаВРознице КАК ЦенаВРознице,
			|	ТаблицаТовары.Сумма КАК Сумма
			|ИЗ
			|	ТаблицаТовары КАК ТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйМОЛ КАК ХозрасчетныйМОЛ
			|		ПО ТаблицаТовары.Номенклатура = ХозрасчетныйМОЛ.Субконто1
			|			И ТаблицаТовары.СчетУчета = ХозрасчетныйМОЛ.Счет
			|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиКоличество КАК ХозрасчетныйОстаткиКоличество
			|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйЦена КАК ХозрасчетныйЦена
			|			ПО ХозрасчетныйОстаткиКоличество.Субконто1 = ХозрасчетныйЦена.Субконто1
			|				И ХозрасчетныйОстаткиКоличество.Счет = ХозрасчетныйЦена.Счет
			|		ПО ТаблицаТовары.Номенклатура = ХозрасчетныйОстаткиКоличество.Субконто1
			|			И ТаблицаТовары.СчетУчета = ХозрасчетныйОстаткиКоличество.Счет"
			
		Иначе
			
			ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация +
			"ВЫБРАТЬ
			|	ТаблицаТовары.СчетУчета КАК СчетУчета,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ХозрасчетныйЦена.СуммаДляЦены, ТаблицаТовары.Цена) КАК СуммаДляЦены,
			|	ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 1) КАК КоличествоДляЦены,
			|	ЕСТЬNULL(ХозрасчетныйОстаткиКоличество.КоличествоОстаток, 0) КАК КоличествоУчет,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ТаблицаТовары.ЦенаВРознице КАК ЦенаВРознице,
			|	ТаблицаТовары.Сумма КАК Сумма
			|ИЗ
			|	ТаблицаТовары КАК ТаблицаТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиКоличество КАК ХозрасчетныйОстаткиКоличество
			|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйЦена КАК ХозрасчетныйЦена
			|			ПО ХозрасчетныйОстаткиКоличество.Субконто1 = ХозрасчетныйЦена.Субконто1
			|				И ХозрасчетныйОстаткиКоличество.Счет = ХозрасчетныйЦена.Счет
			|		ПО ТаблицаТовары.Номенклатура = ХозрасчетныйОстаткиКоличество.Субконто1
			|			И ТаблицаТовары.СчетУчета = ХозрасчетныйОстаткиКоличество.Счет";
		
		КонецЕсли;
		
		ТекстЗапросаИнвентаризация = ТекстЗапросаИнвентаризация + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		СхемаЗапроса = Новый СхемаЗапроса();
		
		СхемаЗапроса.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиКоличество.Счет КАК Счет,
		|	ХозрасчетныйОстаткиКоличество.Субконто1 КАК Субконто1,
		|	СУММА(ХозрасчетныйОстаткиКоличество.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ХозрасчетныйОстаткиКоличество
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментАнализаОстатков,
		|			&ТекстУсловияСчетов,
		|			&ПорядокСубконтоКоличество,
		|			Организация = &Организация
		|				И &ТекстУсловияКоличества) КАК ХозрасчетныйОстаткиКоличество
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиКоличество.Счет,
		|	ХозрасчетныйОстаткиКоличество.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйЦена.Счет КАК Счет,
		|	ХозрасчетныйЦена.Субконто1 КАК Субконто1,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.КоличествоОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДляЦены,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаКонечныйОстаток
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотКт
		|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
		|				ТОГДА ХозрасчетныйЦена.СуммаОборотДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДляЦены
		|ПОМЕСТИТЬ ХозрасчетныйЦена
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоМесяца,
		|			&МоментАнализаЦены,
		|			Период,
		|			ДвиженияИГраницыПериода,
		|			&ТекстУсловияСчетов,
		|			&ПорядокСубконтоЦена,
		|			Организация = &Организация
		|				И &ТекстУсловияЦены) КАК ХозрасчетныйЦена
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйЦена.Счет,
		|	ХозрасчетныйЦена.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиКоличество.Счет КАК СчетУчета,
		|	ХозрасчетныйОстаткиКоличество.Счет.Порядок КАК Порядок,
		|	ХозрасчетныйОстаткиКоличество.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ХозрасчетныйЦена.СуммаДляЦены, 0) КАК СуммаДляЦены,
		|	ЕСТЬNULL(ХозрасчетныйЦена.КоличествоДляЦены, 0) КАК КоличествоДляЦены,
		|	ХозрасчетныйОстаткиКоличество.КоличествоОстаток КАК КоличествоУчет
		|ИЗ
		|	ХозрасчетныйОстаткиКоличество КАК ХозрасчетныйОстаткиКоличество
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйЦена КАК ХозрасчетныйЦена
		|		ПО ХозрасчетныйОстаткиКоличество.Счет = ХозрасчетныйЦена.Счет
		|			И ХозрасчетныйОстаткиКоличество.Субконто1 = ХозрасчетныйЦена.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Счет.Порядок,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментАнализаОстатков,
		|			НЕ Счет В (&ИсклСчета),
		|			&ПорядокСубконтоМОЛ,
		|			НЕ &АктуальностьНаКонецМесяца
		|				И Организация = &Организация
		|				И Субконто2 В (&МОЛ)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Номенклатура"); // RIAZmey -- Хозрасчетный.ОстаткоКоличество > 0
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.Склад) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.ОтветственноеЛицо) Тогда
			СхемаЗапроса.ПакетЗапросов[2].Операторы.Удалить(1);
		КонецЕсли; 
		
		ТекстЗапросаИнвентаризация = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	ТекстЗапросаИнвентаризация = СтрЗаменить(ТекстЗапросаИнвентаризация, "&ТекстУсловияСчетов",       ТекстУсловияСчетов);
	ТекстЗапросаИнвентаризация = СтрЗаменить(ТекстЗапросаИнвентаризация, "И &ТекстУсловияКоличества", ТекстУсловияКоличества);
	ТекстЗапросаИнвентаризация = СтрЗаменить(ТекстЗапросаИнвентаризация, "И &ТекстУсловияЦены",       ТекстУсловияЦены);
	
	Запрос.Текст = ТекстЗапросаИнвентаризация;
	
	Возврат Запрос;
	
КонецФункции

&Вместо("РассчитатьЦеныНаМоментАктуальности")
Процедура Базар_РассчитатьЦеныНаМоментАктуальности(ТаблицаТовары, АктуальностьНаКонецМесяца, Запрос, ПараметрыЗаполнения)
	
	Если АктуальностьНаКонецМесяца Тогда // нужно рассчитать цену с учётом корректировки стоимости
		МоментАнализаЦены  = Новый Граница(КонецМесяца(ПараметрыЗаполнения.Дата), ВидГраницы.Включая);
		МоментНачалаМесяца = Новый Граница(НачалоМесяца(ПараметрыЗаполнения.Дата), ВидГраницы.Включая);
	ИначеЕсли ПараметрыЗаполнения.Дата = НачалоМесяца(ПараметрыЗаполнения.Дата) Тогда // используем только остатки
		МоментАнализаЦены  = Новый Граница(ПараметрыЗаполнения.Дата, ВидГраницы.Исключая);
		МоментНачалаМесяца = Новый Граница(ПараметрыЗаполнения.Дата - 1, ВидГраницы.Исключая);
	Иначе // нужно рассчитать цену на дату документа
		МоментАнализаЦены = ПараметрыЗаполнения.Дата;
		МоментНачалаМесяца = НачалоМесяца(ПараметрыЗаполнения.Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АктуальностьНаКонецМесяца", АктуальностьНаКонецМесяца);
	Запрос.УстановитьПараметр("НачалоМесяца",              МоментНачалаМесяца);
	Запрос.УстановитьПараметр("МоментАнализаЦены",         МоментАнализаЦены);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗаполнения.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	ТолькоПерезаполнение = (ПараметрыЗаполнения.НазваниеДействия = "ПерезаполнитьУчетныеКоличества");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТабличнойЧасти = ТаблицаТовары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура   = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет = Выборка.КоличествоУчет;
		СтрокаТабличнойЧасти.СчетУчета	    = Выборка.СчетУчета;
		
		Цена = ?(Выборка.КоличествоДляЦены = 0, 0, Выборка.СуммаДляЦены / Выборка.КоличествоДляЦены);
		
		СтрокаТабличнойЧасти.СуммаУчет = Цена * Выборка.КоличествоУчет;
		СтрокаТабличнойЧасти.Цена      = Цена;

		Если ТолькоПерезаполнение Тогда
			
			СтрокаТабличнойЧасти.Количество   = Выборка.Количество;
			СтрокаТабличнойЧасти.ЦенаВРознице = Выборка.ЦенаВРознице;
			
			СтрокаТабличнойЧасти.Сумма        = Цена * Выборка.Количество;
			
		Иначе
			
			//СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУчет; // RIAZmey --
			СтрокаТабличнойЧасти.Количество = 0; // RIAZmey ++
			СтрокаТабличнойЧасти.Сумма      = СтрокаТабличнойЧасти.СуммаУчет;
			Если ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
					ДанныеСклада.ТипЦенРозничнойТорговли, ПараметрыЗаполнения.Дата, ВалютаРегламентированногоУчета, 1, 1);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	ЗаполнитьЦеныПоЦенамНоменклатуры(ТаблицаТовары, ПараметрыЗаполнения.Дата); // RIAZmey ++
	
КонецПроцедуры

Процедура ЗаполнитьЦеныПоЦенамНоменклатуры(ТаблицаТовары, Дата) Экспорт  // RIAZmey ++
	
	СистемныеНастройки = ОбщегоНазначенияБазарСервер.СистемныеНастройкиБазар(Дата);
	
	МинимальныйПериодЦены = КонецДня(Дата) - (86400 * 30) + 1;
	
	Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") тогда
		МассивНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура")
	Иначе
		МассивНоменклатуры = ТаблицаТовары.Выгрузить().ВыгрузитьКолонку("Номенклатура")
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ЗакупочныйТипЦен", СистемныеНастройки.ТипЦенСебестоимость);
	Запрос.УстановитьПараметр("МинимальныйПериодЦены", МинимальныйПериодЦены);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			ТипЦен = &ЗакупочныйТипЦен
	|				И Номенклатура В (&МассивНоменклатуры)
	|				И Период >= &МинимальныйПериодЦены) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Цена > 0";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого СтрокаТовары из ТаблицаТовары цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТовары.Номенклатура);
		НайденыеСтроки = ТаблицаЗапроса.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЗапроса из НайденыеСтроки цикл
			СтрокаТовары.Цена = СтрокаЗапроса.Цена;
		КонецЦикла;
		
		СтрокаТовары.Сумма = СтрокаТовары.Цена * СтрокаТовары.Количество;
		СтрокаТовары.СуммаУчет = СтрокаТовары.Цена * СтрокаТовары.КоличествоУчет;
		
	КонецЦикла;
	
КонецПроцедуры