#Область Переменные

&НаКлиенте
Перем ПерваяАктивицияТаблиц;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.Организация) тогда
		Элементы.Организация.Видимость = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() тогда
		
		Если НачалоДня(Объект.Дата) <= НачалоДня(ТекущаяДата()) тогда
			Объект.Дата = ТекущаяДата() + 86400;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Дата) тогда
			
			Если НЕ ЕстьЗаказыДляТранспортнойЛогистики(Объект.Дата) тогда
				
				МаксКоличествоДнейПоиска = 20;
				ДатаСДаннымиЗаказов = Объект.Дата;
				
				Для СчетчикДат = 1 по МаксКоличествоДнейПоиска цикл
					
					ДатаСДаннымиЗаказов = ДатаСДаннымиЗаказов + 86400;
					Если ЕстьЗаказыДляТранспортнойЛогистики(ДатаСДаннымиЗаказов) тогда
						
						Объект.Дата = ДатаСДаннымиЗаказов;
						ЗаполнитьДокументНаСервере();
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ЗаполнитьДокументНаСервере();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.Рейсы.НайтиСтроки(Новый Структура("Пробег", 0)).Количество() > 0 тогда
			Для Каждого СтрокаМаршрута из Объект.Маршруты цикл
				НайденыеСтроки = Объект.Рейсы.НайтиСтроки(Новый Структура("Маршрут", СтрокаМаршрута.Маршрут));
				Если НайденыеСтроки.Количество() = 1 тогда
					НайденыеСтроки.Получить(0).Пробег = СтрокаМаршрута.Пробег;
				КонецЕсли;
			КонецЦикла;
			Модифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьЗаголовкиПолейФормы();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	UpdateWebMapПолеHTML = Истина;
	ПерваяАктивицияТаблиц = Истина;
	
	ФайловаяСистемаКлиент.СоздатьВременныйКаталог(Новый ОписаниеОповещения(
		"ОбработкаОповещенияСоздатьВременныйКаталогФормы"
		, ЭтаФорма));
	
	Если Объект.Маршруты.Количество() > 0 тогда
		ЗаполнитьВторостепенныеДанныеТаблицФормы();
		ИмяАктивированойТаблицы = "Маршруты";
		ПодключитьОбработчикОжидания("ОтложенноеПриАктивизацииСтрокиТабличнойЧасти", 0.1, Истина);
	КонецЕсли;
	
	СтараяДата = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено ИЛИ
		 Элементы.СоставыРейсов.ТекущиеДанные = Неопределено тогда
		ИмяАктивированойТаблицы = "Маршруты";
		ОтложенноеПриАктивизацииСтрокиТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьВторостепенныеДанныеТаблицФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПередЗаписьюНаСервере(Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) <> НачалоДня(СтараяДата) тогда
		
		ЗаполнитьДокументНаДатуСПроверкойМодифицированности(Объект.Дата);
		Объект.Дата = СтараяДата;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставМаршрутаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаWebКарта тогда
		Элементы.РейсыДляКарты.ОтборСтрок = Элементы.Рейсы.ОтборСтрок;
		Элементы.РейсыДляКарты.Обновить();
		WebMapUpdate();
	Иначе
		Если Элементы.Маршруты.ВыделенныеСтроки.Количество() > 0 Тогда
			Элементы.Маршруты.ВыделенныеСтроки.Очистить();
			Элементы.Маршруты.ВыделенныеСтроки.Добавить(Элементы.Маршруты.ТекущаяСтрока);
			UpdateWebMapПолеHTML = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	СоставыРейсовУдалить(Команды.Найти("СоставыРейсовУдалить"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыОбобщенные

&НаКлиенте
Процедура ПриАктивизацииСтрокиТабличнойЧасти(Элемент)
	
	ИмяАктивированойТаблицы = Элемент.Имя;
	ПодключитьОбработчикОжидания("ОтложенноеПриАктивизацииСтрокиТабличнойЧасти", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительАвтомобильПриИзменении(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя,"Маршруты","");
	Если ЗначениеЗаполнено(Элементы.Маршруты.ТекущиеДанные[ИмяРеквизита]) тогда
		Элементы.Маршруты.ТекущиеДанные.Перевозчик = ЗначениеРеквизитаОбъекта(Элементы.Маршруты.ТекущиеДанные[ИмяРеквизита], "Перевозчик");
		УстановитьСвязиПараметровВыбораДляВодителяИАвтомобиля();
	Иначе
		УстановитьПеревозчикаМаршрута(Элементы.Маршруты.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительАвтомобильОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя,"Маршруты","");
	НайденыеСтроки = НайтиВТаблицеМаршрутыВодителяИлиАвтомобиль(ИмяРеквизита, ВыбранноеЗначение, Элементы.Маршруты.ТекущаяСтрока);
	
	Если НайденыеСтроки.Количество() > 0 тогда
		ДанныеНайденогоМаршрута = ДанныеМаршрутаПоИдентификаторуСтрокиБезСсылок(НайденыеСтроки.Получить(0));
		
		ТекстПредупреждения = НСтр("ru = 'Выбранный Вами " + нрег(ИмяРеквизита) + " уже установлен на маршруте "+ДанныеНайденогоМаршрута.МаршрутПредставление + "'");
		ПоказатьПредупреждение(,ТекстПредупреждения, 30, ИмяРеквизита + " уже выбран");
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	
	ЗаполнитьДокументНаДатуСПроверкойМодифицированности();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьГруппуФормы(Команда)
	
	Если Команда.Имя = "СвернутьРазвернутьГруппаРейсы" тогда
		Элементы.Рейсы.Видимость = НЕ Элементы.Рейсы.Видимость;
		
	ИначеЕсли Команда.Имя = "СвернутьРазвернутьГруппаДокументы" тогда
		Элементы.Документы.Видимость = НЕ Элементы.Документы.Видимость;
		
	ИначеЕсли Команда.Имя = "СвернутьРазвернутьГруппаВодительАвтомобиль" тогда
		Элементы.МаршрутыАвтомобиль.Видимость = НЕ Элементы.МаршрутыАвтомобиль.Видимость;
		Элементы.МаршрутыВодитель.Видимость = НЕ Элементы.МаршрутыВодитель.Видимость;
		Элементы.МаршрутыПеревозчик.Видимость = НЕ Элементы.МаршрутыПеревозчик.Видимость;
	КонецЕсли;
	
	ОбновитьЗаголовкиПолейФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовПреместитьСтрокуВверхВниз(Команда)
	
	Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено ИЛИ
		 Элементы.СоставыРейсов.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СдвинутьНомерВРейсеТочкиМаршрута(
		СтрЗаменить(Команда.Имя, "СоставыРейсов", ""),
		Элементы.Маршруты.ТекущиеДанные.Самовывоз
	);
	
	УправлениеДоступностьюКнопокПеремещенияСоставаРейсов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовУдалить(Команда)
	
	Для Каждого ИдентификаторСтроки из Элементы.СоставыРейсов.ВыделенныеСтроки цикл
		ПеренестиТочкуМаршрута(
			ИдентификаторСтроки,
			ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка"),
		    1
		);
	КонецЦикла;
	
	Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено ИЛИ
		 Элементы.СоставыРейсов.ТекущиеДанные = Неопределено тогда
		ИмяАктивированойТаблицы = "Маршруты";
		ОтложенноеПриАктивизацииСтрокиТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовПеренести(Команда)
	
	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыПереноса = Новый Структура(
		"МаршрутИсточник,
		|РейсИсточник,
		|ВыделеныВсеСтрокиРейса,
		|ВыделенныеСтроки,
		|Маршруты,
		|Рейсы"
	);
	
	ВыделенныеСтроки = Новый Массив;
	Для Каждого ИдентификаторСтроки из Элементы.СоставыРейсов.ВыделенныеСтроки цикл
		ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
	КонецЦикла;
	
	МассивМаршрутов = Новый Массив;
	Для Каждого СтрокаМаршрута из Объект.Маршруты цикл
		ЭлементМассива = Новый Структура(
			"НомерСтроки,
			|Маршрут,
			|Водитель,
			|Автомобиль,
			|Тоннаж,
			|Наценка,
			|Пробег"
		);
		
		ЗаполнитьЗначенияСвойств(ЭлементМассива, СтрокаМаршрута);
		МассивМаршрутов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	МассивРейсы = Новый Массив;
	Для Каждого СтрокаРейса из Объект.Рейсы цикл
		ЭлементМассива = Новый Структура(
			"Маршрут,
			|Рейс,
			|Тоннаж,
			|Наценка,
			|Пробег"
		);
		
		ЗаполнитьЗначенияСвойств(ЭлементМассива, СтрокаРейса);
		МассивРейсы.Добавить(ЭлементМассива);
	КонецЦикла;
	
	ПараметрыПереноса.МаршрутИсточник  = Элементы.Маршруты.ТекущиеДанные.Маршрут;
	ПараметрыПереноса.ВыделенныеСтроки = ВыделенныеСтроки;
	ПараметрыПереноса.Маршруты         = МассивМаршрутов;
	ПараметрыПереноса.Рейсы            = МассивРейсы;
	
	Если Элементы.Рейсы.Видимость И Элементы.ГруппаРейсы.Видимость тогда
		ПараметрыПереноса.РейсИсточник = Элементы.Рейсы.ТекущиеДанные.Рейс;
	Иначе
		ПараметрыПереноса.РейсИсточник = 1;
	КонецЕсли;
	
	ВсегоСтрокВРейсе = КоличествоСтрокСоставовРейсаВМаршруте(
		ПараметрыПереноса.Маршруты,
		ПараметрыПереноса.Рейсы
	);
	
	ПараметрыПереноса.ВыделеныВсеСтрокиРейса = ВсегоСтрокВРейсе = ПараметрыПереноса.ВыделенныеСтроки.Количество();
	
	ОткрытьФорму(
		"Документ.ТранспортнаяЛогистика.Форма.ФормаПереносаВДругойМаршрутРейс",
		ПараметрыПереноса,
		ЭтаФорма,
		,
		,
		,
		Новый ОписаниеОповещения(
			"ОбработкаПереносаВДругойМаршрутРейс",
			ЭтаФорма
		),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокСоставовРейсаВМаршруте(Маршрут, Рейс)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Маршрут", Маршрут);
	СтруктураОтбора.Вставить("Рейс"   , Рейс);
	
	НайденыеСтроки = Объект.СоставыРейсов.НайтиСтроки(СтруктураОтбора);
	
	Возврат НайденыеСтроки.Количество();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПереносаВДругойМаршрутРейс(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Рейс = 0 тогда
		Результат.Рейс = 1;
	КонецЕсли;
	
	МаршрутИсточник = Результат.МаршрутИсточник;
	РейсИсточник    = Результат.РейсИсточник;
	
	Для Каждого ИдентификаторСтроки из Результат.ВыделенныеСтроки цикл
				
		ПеренестиТочкуМаршрута(
			ИдентификаторСтроки,
		    Результат.Маршрут,
		    Результат.Рейс,
			Ложь
		);
		
	КонецЦикла;
	
	ОбновитьНумерациюСоставаРейсов(
		Результат.МаршрутИсточник,
		Результат.РейсИсточник,
		Результат.СамовывозИсточник
	);
	
	Самовывоз = ЗначениеРеквизитаОбъекта(Результат.Маршрут, "Самовывоз");
	Если Самовывоз = Неопределено тогда
		Самовывоз = Ложь;
	КонецЕсли;
	
	ОбновитьНумерациюСоставаРейсов(
		Результат.Маршрут,
		Результат.Рейс,
		Самовывоз
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьМаршрутныеЛисты(Команда)
	
	Если Модифицированность тогда
		ПоказатьПредупреждение(,"Сначала запишите документ!");
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(,"Документ необходимо ПРОВЕСТИ!");
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СоздатьОбновитьМаршрутныеЛистыНаСервере();
	
	ПоказатьПредупреждение(,"Маршрутные листы обновлены!");
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовРасставитьПоРасстоянию(Команда)
	
	Если Элементы.Маршруты.ТекущаяСтрока = Неопределено ИЛИ
	     Элементы.Маршруты.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Рейсы.ТекущаяСтрока = Неопределено ИЛИ
	     Элементы.Рейсы.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Маршрут"  , Элементы.Маршруты.ТекущиеДанные.Маршрут);
	ДополнительныеПараметры.Вставить("Самовывоз", Элементы.Маршруты.ТекущиеДанные.Самовывоз);
	ДополнительныеПараметры.Вставить("Рейс"     , Элементы.Рейсы.ТекущиеДанные.Рейс);
	
	ТекстВопроса = НСтр("ru = 'Вы действительно хотите перестроить порядок маршрута в автоматическом режиме?'");
	Если НЕ ПустаяСтрока(ТекстВопроса) тогда
		
		Оповещение = Новый ОписаниеОповещения("ОтветНаВопросПерестроитьПорядокРейсаМаршрутаАвтоматически", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение,
		               ТекстВопроса,
		               РежимДиалогаВопрос.ДаНет,
		               30,
		               КодВозвратаДиалога.Нет,
		               "Перестроить порядок маршрута автоматически?",
		               КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьДокументНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область WebMap

&НаСервере
Function HTMLTemplatesWebMap()
	
	ReturnedStruct = New Structure;
	
	HTMLTextInit = Documents.ТранспортнаяЛогистика.GetTemplate("HTMLYandexMap_function_init").GetText();
	HTMLTextBody = Documents.ТранспортнаяЛогистика.GetTemplate("HTMLYandexMap_body").GetText();
	
	ReturnedStruct.Вставить("HTMLTextInit", HTMLTextInit);
	ReturnedStruct.Вставить("HTMLTextBody", HTMLTextBody);
	
	Return ReturnedStruct;
	
EndFunction

&НаСервере
Procedure InitWebMapStruct(WebMapStruct, IDRowRoute, IDRowCruise = Undefined)
	
	DataSelectedRoute = Объект.Маршруты.FindByID(IDRowRoute);
	DataSelectedCruise = Undefined;
	If Not IDRowCruise = Undefined Then
		DataSelectedCruise = Объект.Рейсы.FindByID(IDRowCruise);
	EndIf;
	Route = DataSelectedRoute.Маршрут;
	
	IF NOT WebMapStruct = Undefined Then
		
		If NOT WebMapStruct.NeedUpdate Then
			Return;
		EndIf;
		
		StructFind = New Structure("Маршрут", Route);
		SelectedConsignee = Объект.Организация;
		
		ArrayRoutes = New Array;
		ArrayPoints = New Array;
		
		// New route
		StructRoute = New Structure;
		
		TotalCruise = Объект.Рейсы.FindRows(StructFind).Count();
		Cruise = 1;
		While Cruise <= TotalCruise do
			
			If Not DataSelectedCruise = Undefined Then
				If Not DataSelectedCruise.Рейс = Cruise Then
					Cruise = Cruise + 1;
					Continue;
				EndIf;
			EndIf;
			
			CruisePoints = НайтиТочкиМаршрутаРейса(Route, Cruise);
			
			If CruisePoints.Count() = 0 then
				Break;
			EndIf;
			
			// Add SelectedConsignee
			OtherOptions = New Structure;
			OtherOptions.Insert("NumCruise"   , Format(Cruise, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			OtherOptions.Insert("NumInCruise" , Format(0, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			OtherOptions.Insert("Color"       , WebMapStruct.ColorPalette.Get("red"));
			OtherOptions.Insert("TypeIcon"    , WebMapStruct.IconsСollection.islandsstandart.Get("home"));
			OtherOptions.Insert("MainPoint"   , True);
			ArrayPoints.Add(WebMapServer.CreatePointStructFromPartner(SelectedConsignee, OtherOptions));
			
			For each SelectedShipper in CruisePoints do
				// Add SelectedShipper
				DataAddress = ДанныеАдресаДоставкиJSON(SelectedShipper.АдресJSON, Объект.Дата);
				
				OtherOptions = New Structure;
				OtherOptions.Insert("Address"     , SelectedShipper.АдресПредставление);
				OtherOptions.Insert("NumCruise"   , Format(Cruise, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
				OtherOptions.Insert("NumInCruise" , Format(SelectedShipper.НомерВРейсе, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
				ArrayPoints.Add(WebMapServer.CreatePointStruct(String(SelectedShipper.ТочкаМаршрута),
				                                               DataAddress.АдресДоставкиСтруктура.Latitude,
				                                               DataAddress.АдресДоставкиСтруктура.Longitude,
				                                               OtherOptions));
			EndDo;
			
			// Add SelectedConsignee
			OtherOptions = New Structure;
			OtherOptions.Insert("NumCruise"   , Format(Cruise, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			OtherOptions.Insert("NumInCruise" , Format(CruisePoints.Count() + 1, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			OtherOptions.Insert("Color"       , WebMapStruct.ColorPalette.Get("red"));
			OtherOptions.Insert("TypeIcon"    , WebMapStruct.IconsСollection.islandsstandart.Get("home"));
			OtherOptions.Insert("MainPoint"   , True);
			ArrayPoints.Add(WebMapServer.CreatePointStructFromPartner(SelectedConsignee, OtherOptions));
			
			Cruise = Cruise + 1;
			
		EndDo;
		
		StructRoute.Insert("ArrayPoints", ArrayPoints);
		StructRoute.Insert("Name"       , DataSelectedRoute.МаршрутПредставление);
		If ValueIsFilled(DataSelectedRoute.Водитель) then
			StructRoute.Insert("Driver" , String(DataSelectedRoute.Водитель));
		EndIf;
		If ValueIsFilled(DataSelectedRoute.Автомобиль) then
			StructRoute.Insert("Car"    , String(DataSelectedRoute.Автомобиль));
		EndIf;
		
		ArrayRoutes.Add(StructRoute);
		
		WebMapStruct.Insert("ArrayRoutes", ArrayRoutes);
		WebMapStruct.NeedUpdate = False;
		
		If DataSelectedCruise = Undefined Then
			DataSelectedRoute.WebMapStruct = WebMapStruct;
		else
			DataSelectedCruise.WebMapStruct = WebMapStruct;
		EndIf;
		
	EndIf;
	
EndProcedure

&НаКлиенте
Procedure WebMapUpdate()
	
	If Items.Маршруты.SelectedRows.Count() > 1 Then
		IF Items.СоставМаршрутаСтраницы.CurrentPage.Name <> "СтраницаWebКарта" Then
			Items.СоставМаршрутаСтраницы.CurrentPage = Items.СтраницаWebКарта;
		EndIf;
		
		WebMapStruct = InitWebMap();
		ArrayRoutes = New Array;
		
		SelectedRows = New Array;
		For Each IDRow in Items.Маршруты.SelectedRows do
			SelectedRows.Add(IDRow);
		EndDo;
		
		Index = 0;
		For Each IDRow in SelectedRows do
			
			WebMapStructRoute = InitWebMap(Undefined, IDRow, 1);
			DataSelectedRouteWithoutLink = ДанныеМаршрутаПоИдентификаторуСтрокиБезСсылок(IDRow);
			
			If DataSelectedRouteWithoutLink.Самовывоз Then
				Items.Маршруты.SelectedRows.Delete(Index);
				Continue;
			EndIf;
			
			InitWebMapStruct(WebMapStructRoute, IDRow);
			WebMapClient.PrepareHTMLTextRoutes(WebMapStructRoute);
			
			For each RouteInStuct in WebMapStructRoute.ArrayRoutes do
				ArrayRoutes.Add(RouteInStuct);
			EndDo;
			
			Index = Index + 1;
			
		EndDo;
		
		WebMapStruct.Insert("ArrayRoutes", ArrayRoutes);
		WebMapClient.PrepareHTMLTextRoutes(WebMapStruct, True);
		
	Else
		IF Items.СоставМаршрутаСтраницы.CurrentPage.Name <> "СтраницаWebКарта" Then
			Return;
		EndIf;
		
		DataSelectedRoute  = Items.Маршруты.CurrentData;
		DataSelectedCruise = Items.РейсыДляКарты.CurrentData;
		CruisesTotal       = КоличествоСтрокВТаблице(ЭтаФорма, "Рейсы", "РейсыДляКарты");
		
		If Items.Маршруты.CurrentData = Undefined Then
			WebMapПолеHTML = "";
			Return;
		EndIf;
		
		If Items.РейсыДляКарты.CurrentData = Undefined Then
			WebMapStruct = DataSelectedRoute.WebMapStruct;
		Else
			If РежимОтображенияWEBКарты = "ПоРейсам" Then
				WebMapStruct = DataSelectedCruise.WebMapStruct;
			else
				WebMapStruct = DataSelectedRoute.WebMapStruct;
			EndIf;
		EndIf;
		
		If DataSelectedRoute = Undefined Then
			WebMapClient.HTMLMessage(WebMapПолеHTML,
			                   "Маршрут не выбран!<br>Отображение карты невозможно.",
			                   "#2F4F4F");
			Return;
		EndIf;
		
		If DataSelectedRoute.Маршрут = PredefinedValue("Справочник.Маршруты.ПустаяСсылка") Then
			WebMapClient.HTMLMessage(WebMapПолеHTML,
			                   "Карта для не распределенных документов не составляется!<br>Отображение карты невозможно.",
			                   "#2F4F4F");
			WebMapStruct = Undefined;
			Return;
		EndIf;
		
		IF DataSelectedRoute.Самовывоз Then
			WebMapClient.HTMLMessage(WebMapПолеHTML,
			                   "Выбранный маршрут - самовывоз!<br>Отображение карты невозможно.",
			                   "#2F4F4F");
			WebMapStruct = Undefined;
			Return;
		Else
			StructFind = New Structure("Маршрут", DataSelectedRoute.Маршрут);
			RoutePoints = Объект.СоставыРейсов.НайтиСтроки(StructFind);
			
			IF RoutePoints.Count() = 0 Then
				WebMapClient.HTMLMessage(WebMapПолеHTML,
				                   "Состав маршрута пустой!<br>Отображение карты невозможно.",
				                   "#2F4F4F");
				WebMapStruct = Undefined;
				Return;
			EndIf;
		EndIf;
		
		If Not UpdateWebMapПолеHTML Then
			Return;
		EndIf;
		
		If Not DataSelectedCruise = Undefined Then
			IDRowCruise = Items.РейсыДляКарты.CurrentRow;
		Else
			IDRowCruise = Undefined;
		EndIf;
		
		WebMapStruct = InitWebMap(WebMapStruct, Items.Маршруты.CurrentRow, IDRowCruise);
		InitWebMapStruct(WebMapStruct, Items.Маршруты.CurrentRow,IDRowCruise);
		WebMapClient.PrepareHTMLTextRoutes(WebMapStruct);
		
	EndIf;
	
	If WebMapStruct.Property("HTMLText") Then
		WebMapПолеHTML = WebMapStruct.HTMLText;
	else
		WebMapПолеHTML = "";
	EndIf;
	
	UpdateWebMapПолеHTML = False;
	
EndProcedure

&НаКлиенте
Function InitWebMap(WebMapStruct = Undefined, IDRowRoute = Undefined, IDRowCruise = Undefined)
	
	If WebMapStruct = Undefined Then
		If IDRowRoute = Undefined Then
			WebMapStruct = Undefined;
			CaptionHTML = "WEB карта";
		else
			DataSelectedRouteWithoutLink = ДанныеМаршрутаПоИдентификаторуСтрокиБезСсылок(IDRowRoute, IDRowCruise);
			WebMapStruct = DataSelectedRouteWithoutLink.WebMapStruct;
			CaptionHTML = "Маршрут: " + DataSelectedRouteWithoutLink.МаршрутПредставление;
		EndIf;
	Else
		If IDRowRoute = Undefined Then
			WebMapStruct = Undefined;
			CaptionHTML = "WEB карта";
		else
			DataSelectedRouteWithoutLink = ДанныеМаршрутаПоИдентификаторуСтрокиБезСсылок(IDRowRoute, IDRowCruise);
			CaptionHTML = "Маршрут: " + DataSelectedRouteWithoutLink.МаршрутПредставление;
		EndIf;
	EndIf;
	
	If WebMapStruct = Undefined Then
		
		WebMapStruct = WebMapClient.CreateStruct(CaptionHTML, "e041936b-a266-4a20-8e94-d0d7ffef7ec4",,,, КаталогВременныхФайловДокумента);
		
		WebMapStruct.Insert("HTMLTextMap" , WebMapServer.CommonTemplate());
		WebMapStruct.Insert("HTMLTextInit", HTMLTemplatesWebMap().HTMLTextInit);
		WebMapStruct.Insert("HTMLTextBody", HTMLTemplatesWebMap().HTMLTextBody);
		WebMapStruct.Insert("NeedUpdate"  , True);
		
	EndIf;
	
	Return WebMapStruct;
	
EndFunction

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		СписокОшибок = Неопределено;
		
		ОбязательныеПоляМаршруты = Новый Массив;
		ОбязательныеПоляМаршруты.Добавить("Маршрут");
		ОбязательныеПоляМаршруты.Добавить("Водитель");
		ОбязательныеПоляМаршруты.Добавить("Автомобиль");
		ОбязательныеПоляМаршруты.Добавить("Тоннаж");
		ОбязательныеПоляМаршруты.Добавить("Пробег");
		
		ОбязательныеПоляРейсы = Новый Массив;
		ОбязательныеПоляРейсы.Добавить("Маршрут");
		ОбязательныеПоляРейсы.Добавить("Рейс");
		ОбязательныеПоляРейсы.Добавить("Тоннаж");
		ОбязательныеПоляРейсы.Добавить("Пробег");
		
		ОбязательныеПоляСоставыРейсов = Новый Массив;
		ОбязательныеПоляСоставыРейсов.Добавить("Маршрут");
		ОбязательныеПоляСоставыРейсов.Добавить("Рейс");
		ОбязательныеПоляСоставыРейсов.Добавить("НомерВРейсе");
		ОбязательныеПоляСоставыРейсов.Добавить("ТочкаМаршрута");
		ОбязательныеПоляСоставыРейсов.Добавить("АдресJSON");
		ОбязательныеПоляСоставыРейсов.Добавить("АдресПредставление");
		ОбязательныеПоляСоставыРейсов.Добавить("ВремяНачала");
		ОбязательныеПоляСоставыРейсов.Добавить("ВремяОкончания");
		ОбязательныеПоляСоставыРейсов.Добавить("GUID");
		
		ОбязательныеПоляДокументыМаршрута = Новый Массив;
		ОбязательныеПоляДокументыМаршрута.Добавить("GUID");
		ОбязательныеПоляДокументыМаршрута.Добавить("Документ");
		
		СтруктураПроверки = Новый Структура(
			"Маршруты,
			|Рейсы,
			|СоставыРейсов,
			|ДокументыМаршрута",
			Новый Структура(
				"Представление,
				|ОбязательныеПоля",
				"Маршруты",
				ОбязательныеПоляМаршруты
			),
			Новый Структура(
				"Представление,
				|ОбязательныеПоля",
				"Рейсы",
				ОбязательныеПоляРейсы
			),
			Новый Структура(
				"Представление,
				|ОбязательныеПоля",
				"Составы рейсов",
				ОбязательныеПоляСоставыРейсов
			),
			Новый Структура(
				"Представление,
				|ОбязательныеПоля",
				"Документы маршрута",
				ОбязательныеПоляДокументыМаршрута
			)
		);
		
		Для Каждого КлючИЗначение из СтруктураПроверки цикл
			
			ТабличнаяЧастьПредставление = КлючИЗначение.Значение.Представление;
			ОбязательныеПоля            = КлючИЗначение.Значение.ОбязательныеПоля;
			ТабличнаяЧасть              = Объект[КлючИЗначение.Ключ];
			
			Для Каждого СтрокаТЧ из ТабличнаяЧасть цикл
				
				Если КлючИЗначение.Ключ = "Маршруты" ИЛИ
					 КлючИЗначение.Ключ = "Рейсы" ИЛИ
					 КлючИЗначение.Ключ = "СоставыРейсов" тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Маршрут) тогда
						Если СтрокаТЧ.Маршрут.Самовывоз тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЕстьОшибкиВСтроке = Ложь;
				
				ТекстСообщения =
					"В таблице """ + 
					ТабличнаяЧастьПредставление +
					""", строке №" +
					СтрокаТЧ.НомерСтроки +
					" имеются незаполненные поля: "
				;
				
				Для Каждого ОбязательноеПоле из ОбязательныеПоля цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ОбязательноеПоле]) тогда
						
						Если ЕстьОшибкиВСтроке тогда
							ТекстСообщения = ТекстСообщения + ", " + ОбязательноеПоле;
						Иначе
							ТекстСообщения = ТекстСообщения + ОбязательноеПоле;
						КонецЕсли;
						
						ЕстьОшибкиВСтроке = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьОшибкиВСтроке тогда
					
					ТекстСообщения = НСтр("ru = '"+ТекстСообщения+"'");
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						СписокОшибок,
					    "Объект." + КлючИЗначение.Ключ + "[%1]",
					    ТекстСообщения,
					    Неопределено,
					    СтрокаТЧ.НомерСтроки - 1
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	МаршрутНеВыбранПустойИлиСамовывоз = Ложь;
	МаршрутПустой = Ложь;
	
	Если Элементы.Маршруты.ТекущаяСтрока = Неопределено тогда
		МаршрутНеВыбранПустойИлиСамовывоз = Истина;
	Иначе
		Если Элементы.Маршруты.ТекущиеДанные.Маршрут = ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка") тогда
			МаршрутНеВыбранПустойИлиСамовывоз = Истина;
			МаршрутПустой = Истина;
		Иначе
			Если Элементы.Маршруты.ТекущиеДанные.Самовывоз тогда
				МаршрутНеВыбранПустойИлиСамовывоз = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.КомпактноеРазмещениеНаФорме тогда
		Форма.Масштаб = 85;
		Элементы.Маршруты.Ширина = 40;
	Иначе
		Форма.Масштаб = 100;
		Элементы.Маршруты.Ширина = 34;
	КонецЕсли;
	
	КоличествоРейсов = КоличествоСтрокВТаблице(Форма, "Рейсы", "Рейсы");
	Если Элементы.СоставМаршрутаСтраницы.ТекущаяСтраница = Элементы.СтраницаWebКарта тогда
		Элементы.РейсыДляКарты.ВысотаВСтрокахТаблицы = КоличествоРейсов;
		Если КоличествоРейсов = 1 тогда
			Элементы.РежимОтображенияWEBКарты.Видимость = Ложь;
			Если ПустаяСтрока(Форма.РежимОтображенияWEBКарты) тогда
				Форма.РежимОтображенияWEBКарты = "ПоМаршруту";
			КонецЕсли;
		Иначе
			Элементы.РежимОтображенияWEBКарты.Видимость = Истина;
			Если ПустаяСтрока(Форма.РежимОтображенияWEBКарты) тогда
				Форма.РежимОтображенияWEBКарты = "ПоРейсам";
			КонецЕсли;
		КонецЕсли;
		Если Форма.РежимОтображенияWEBКарты = "ПоРейсам" И КоличествоРейсов > 1 тогда
			Элементы.РейсыДляКарты.Видимость = Истина;
		Иначе
			Элементы.РейсыДляКарты.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Элементы.СоставМаршрутаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанныеМаршрута тогда
		Если НЕ МаршрутНеВыбранПустойИлиСамовывоз тогда
			Элементы.Рейсы.ВысотаВСтрокахТаблицы = КоличествоРейсов;
		КонецЕсли;
		Элементы.ГруппаРейсы.Видимость                  = НЕ МаршрутНеВыбранПустойИлиСамовывоз;
		Элементы.ГруппаВодительАвтомобиль.Видимость     = НЕ МаршрутНеВыбранПустойИлиСамовывоз;
		Элементы.СоставыРейсовНомерВРейсе.Видимость     = НЕ МаршрутНеВыбранПустойИлиСамовывоз;
		Элементы.СоставыРейсовГруппаСмещения.Видимость  = НЕ МаршрутНеВыбранПустойИлиСамовывоз;
		Элементы.СоставыРейсовУдалить.Видимость         = НЕ МаршрутПустой;
		Элементы.СоставыРейсовГруппаСмещения1.Видимость = НЕ МаршрутНеВыбранПустойИлиСамовывоз;
		Элементы.СоставыРейсовУдалить1.Видимость        = НЕ МаршрутПустой;
	КонецЕсли;
	
	Элементы.МаршрутыПробег.ТолькоПросмотр = МаршрутНеВыбранПустойИлиСамовывоз ИЛИ КоличествоРейсов > 1;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаказыДляТранспортнойЛогистики(Дата)
	
	Возврат Документы.ТранспортнаяЛогистика.ЕстьЗаказыДляТранспортнойЛогистики(Дата);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаСервере
Функция ДанныеАдресаДоставкиJSON(АдресJSON, Дата)
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.ДанныеАдресаДоставкиJSON(АдресJSON, Дата);
	
КонецФункции

&НаСервере
Функция ДанныеМаршрутаПоИдентификаторуСтрокиБезСсылок(ИдентификаторСтрокиМаршрута, ИдентификаторСтрокиРейса = Неопределено)
	
	СтруктураДанных = Новый Структура(
		"Маршрут,
	    |МаршрутПредставление,
	    |Самовывоз,
	    |Водитель,
	    |Автомобиль,
	    |Перевозчик,
	    |Тоннаж,
	    |Наценка,
	    |Пробег,
	    |WebMapStruct",
		Справочники.Маршруты.ПустаяСсылка(),
		"",
		Ложь,
		Справочники.Водители.ПустаяСсылка(),
		Справочники.Автомобили.ПустаяСсылка(),
		Справочники.Контрагенты.ПустаяСсылка(),
		0,
		0,
		0,
		Неопределено
	);
	
	Если НЕ ИдентификаторСтрокиМаршрута = Неопределено тогда
		СтрокаМаршруты = Объект.Маршруты.НайтиПоИдентификатору(ИдентификаторСтрокиМаршрута);
		Если НЕ СтрокаМаршруты = Неопределено тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаМаршруты);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИдентификаторСтрокиРейса = Неопределено тогда
		СтрокаРейса = Объект.Рейсы.НайтиПоИдентификатору(ИдентификаторСтрокиРейса);
		СтруктураДанных.WebMapStruct = СтрокаРейса.WebMapStruct;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция НайтиТочкиМаршрутаРейса(Знач Маршрут = Неопределено, Рейс = Неопределено)
	
	Если Маршрут = Неопределено тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если Рейс = Неопределено тогда
		СтруктураПоиска = Новый Структура(
			"Маршрут",
			Маршрут
		);
	Иначе
		СтруктураПоиска = Новый Структура(
			"Маршрут,
			|Рейс",
			Маршрут,
			Рейс
		);
	КонецЕсли;
	
	Возврат Объект.СоставыРейсов.НайтиСтроки(СтруктураПоиска);
	
КонецФункции

&НаСервере
Функция НайтиМаршрут(Маршрут)
	
	СтруктураПоиска = Новый Структура("Маршрут", Маршрут);
	
	Возврат Объект.Маршруты.НайтиСтроки(СтруктураПоиска);
	
КонецФункции

&НаСервере
Функция НайтиРейсМаршрута(Маршрут, Рейс = Неопределено)
	
	Если Рейс = Неопределено тогда
		СтруктураПоиска = Новый Структура("Маршрут", Маршрут);
	Иначе
		СтруктураПоиска = Новый Структура("Маршрут, Рейс", Маршрут, Рейс);
	КонецЕсли;
	
	Возврат Объект.Рейсы.НайтиСтроки(СтруктураПоиска);
	
КонецФункции

&НаСервере
Функция НайтиВТаблицеМаршрутыВодителяИлиАвтомобиль(ИмяРеквизита, Значение, ИсключаемыйИдентификаторСтроки = Неопределено)
	
	Возврат Документы.ТранспортнаяЛогистика.НайтиВТаблицеМаршрутыВодителяИлиАвтомобиль(Объект, ИмяРеквизита, Значение, ИсключаемыйИдентификаторСтроки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументНаСервере()
	
	ДанныеФормы = РеквизитФормыВЗначение("Объект");
	
	Документы.ТранспортнаяЛогистика.ЗаполнитьДокумент(ДанныеФормы);
	
	ЗначениеВДанныеФормы(ДанныеФормы, Объект);
	
	Для Каждого СтрокаРейс из Объект.Рейсы цикл
		СтрокаРейс.РейсПредставление = "Рейс №" + Строка(СтрокаРейс.Рейс);
	КонецЦикла;
	
	Для Каждого СтрокаМаршрута из Объект.Маршруты цикл
		Если ЗначениеЗаполнено(СтрокаМаршрута.Маршрут) тогда
			СтрокаМаршрута.МаршрутПредставление = Строка(СтрокаМаршрута.Маршрут);
			СтрокаМаршрута.Самовывоз = СтрокаМаршрута.Маршрут.Самовывоз;
			Если ЗначениеЗаполнено(СтрокаМаршрута.Водитель) тогда
				СтрокаМаршрута.Перевозчик = СтрокаМаршрута.Водитель.Перевозчик;
			Иначе
				СтрокаМаршрута.Автомобиль = СтрокаМаршрута.Автомобиль.Перевозчик;
			КонецЕсли;
		Иначе
			СтрокаМаршрута.МаршрутПредставление = "НЕ РАСПРЕДЕЛЕНО";
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНумерациюМаршрутов();
	
	Для Каждого СтрокаРейс из Объект.Рейсы цикл
		
		СтруктураПоиска = Новый Структура("Маршрут", СтрокаРейс.Маршрут);
		НайденыеМаршруты = Объект.Маршруты.НайтиСтроки(СтруктураПоиска);
		НайденыйМаршрут = НайденыеМаршруты.Получить(0);
		
		ОбновитьНумерациюСоставаРейсов(
			СтрокаРейс.Маршрут,
			СтрокаРейс.Рейс,
			НайденыйМаршрут.Самовывоз
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерестроитьПорядокРейсаМаршрутаАвтоматически(Маршрут, Рейс, Самовывоз)
	
	ТочкиРейса = НайтиТочкиМаршрутаРейса(Маршрут, Рейс);
	
	Если ТочкиРейса.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТочекРейсаМаршрута = Новый ТаблицаЗначений;
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("Маршрут");
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("Рейс");
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("НомерВРейсе");
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("ТочкаМаршрута");
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("АдресПредставление");
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("ВремяНачала");
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("ВремяОкончания");
	ТаблицаТочекРейсаМаршрута.Колонки.Добавить("Расстояние");
	
	ПараметрыАдресаНачальные = УправлениеКонтактнойИнформациейСлужебный.ДанныеАдресаДоставкиПоУмолчанию(Объект.Организация);
	
	Для Каждого ДанныеТочкиРейса из ТочкиРейса цикл
		
		ПараметрыАдреса = УправлениеКонтактнойИнформациейСлужебный.ДанныеАдресаДоставкиПоУмолчанию(ДанныеТочкиРейса.ТочкаМаршрута);
		Расстояние = sqrt(pow(ПараметрыАдреса.Широта - ПараметрыАдресаНачальные.Широта, 2) + pow(ПараметрыАдреса.Долгота - ПараметрыАдресаНачальные.Долгота, 2));
		
		НоваяСтрока = ТаблицаТочекРейсаМаршрута.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТочкиРейса);
		НоваяСтрока.Расстояние = Расстояние;
		
	КонецЦикла;
	
	ТаблицаТочекРейсаМаршрута.Сортировать(
		"Маршрут,
		|Рейс,
		|Расстояние ВОЗР,
		|ТочкаМаршрута,
		|АдресПредставление,
		|ВремяНачала,
		|ВремяОкончания"
	);
	
	НомерВРейсе = 0;
	Для Каждого ДанныеТочкиРейса из ТаблицаТочекРейсаМаршрута цикл
		НомерВРейсе = НомерВРейсе + 1;
		ДанныеТочкиРейса.НомерВРейсе = НомерВРейсе;
	КонецЦикла;
	
	Для Каждого ДанныеТочкиРейса из ТочкиРейса цикл
		
		СтруктураПоиска = Новый Структура(
			"Маршрут,
			|Рейс,
			|ТочкаМаршрута,
			|АдресПредставление,
			|ВремяНачала,
			|ВремяОкончания"
		);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеТочкиРейса);
		НайденыеСтроки = ТаблицаТочекРейсаМаршрута.НайтиСтроки(СтруктураПоиска);
		
		Если НайденыеСтроки.Количество() = 1 тогда
			НайденаяСтрока = НайденыеСтроки.Получить(0);
			ДанныеТочкиРейса.НомерВРейсе = НайденаяСтрока.НомерВРейсе;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьНумерациюСоставаРейсов(Маршрут, Рейс, Самовывоз)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюМаршрутов()
	
	Если Объект.Маршруты.Количество() <= 1 тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаМаршрут из Объект.Маршруты цикл
		СтрокаМаршрут.НомерМаршрута = СтрокаМаршрут.НомерСтроки;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Маршрут", ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка"));
	
	НайденыеМаршруты = Объект.Маршруты.НайтиСтроки(СтруктураПоиска);
	Если НайденыеМаршруты.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	МаршрутНеРаспределенные = НайденыеМаршруты.Получить(0);
	МаршрутНеРаспределенные.НомерМаршрута = -99;
	
	Объект.Маршруты.Сортировать(
		"НомерМаршрута,
		|МаршрутПредставление"
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюСоставаРейсов(Маршрут, Рейс, Самовывоз)
	
	Если НЕ ТипЗнч(Самовывоз) = Тип("Булево") тогда
		Самовывоз = Маршрут.Самовывоз;
	КонецЕсли;
	
	Объект.СоставыРейсов.Сортировать(
		"Маршрут,
		|Рейс,
		|НомерВРейсе,
		|ТочкаМаршрута,
		|АдресПредставление,
		|ВремяНачала,
		|ВремяОкончания"
	);
	
	Если НЕ Самовывоз тогда
		
		НайденыеТочкиМаршрутаРейса = НайтиТочкиМаршрутаРейса(Маршрут, Рейс);
		
		Нумератор = 1;
		Для Каждого ТочкаМаршрута из НайденыеТочкиМаршрутаРейса цикл
			ТочкаМаршрута.НомерВРейсе = Нумератор;
			Нумератор = Нумератор + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Маршрут", Маршрут);
	СтрокиМаршрута = Объект.Маршруты.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаМаршрута из СтрокиМаршрута цикл
		Если ТипЗнч(СтрокаМаршрута.WebMapStruct) = Тип("Структура") тогда
			СтрокаМаршрута.WebMapStruct.NeedUpdate = True;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюРейсов(Маршрут)
	
	Объект.Рейсы.Сортировать(
		"Маршрут,
		|Рейс"
	);
	
	НайденыеРейсы = НайтиРейсМаршрута(Маршрут);
	
	Нумератор = 1;
	Для Каждого СтрокаРейса из НайденыеРейсы цикл
		
		Если СтрокаРейса.Рейс <> Нумератор тогда
			
			НайденыеТочкиМаршрутаРейса = НайтиТочкиМаршрутаРейса(Маршрут, СтрокаРейса.Рейс);
			Для Каждого ТочкаМаршрута из НайденыеТочкиМаршрутаРейса цикл
				ТочкаМаршрута.Рейс = Нумератор;
			КонецЦикла;
			
			СтрокаРейса.Рейс = Нумератор;
			СтрокаРейса.РейсПредставление = "Рейс №" + Строка(Нумератор);
			
		КонецЕсли;
			
		Нумератор = Нумератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенноеПриАктивизацииСтрокиТабличнойЧасти()
	
	ВызовУправленияФормой = Ложь;
	
	Если ПерваяАктивицияТаблиц тогда
		ИмяАктивированойТаблицы = "Маршруты";
		ВыбранныйМаршрут = ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка");
		Самовывоз = Истина;
		ВыбранныйРейс = 1;
		ПерваяАктивицияТаблиц = Ложь;
		ВызовУправленияФормой = Истина;
	Иначе
		ВыбранныйМаршрут = Неопределено;
		Самовывоз = Истина;
		Если Элементы.Маршруты.ТекущаяСтрока <> Неопределено тогда
			ВыбранныйМаршрут = Элементы.Маршруты.ТекущиеДанные.Маршрут;
			Самовывоз = Элементы.Маршруты.ТекущиеДанные.Самовывоз;
		Иначе
			СтрокаМаршрута = Неопределено;
			Если НомерПоследнейАктивнойСтрокиМаршрута > 0 тогда
				Для Каждого СтрокаМаршрута из Объект.Маршруты цикл
					Если СтрокаМаршрута.НомерСтроки = НомерПоследнейАктивнойСтрокиМаршрута Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СтрокаМаршрута = Объект.Маршруты.Получить(0);
			КонецЕсли;
			Если СтрокаМаршрута = Неопределено тогда
				Возврат;
			КонецЕсли;
			Элементы.Маршруты.ТекущаяСтрока = СтрокаМаршрута.ПолучитьИдентификатор();
			ВыбранныйМаршрут = СтрокаМаршрута.Маршрут;
			Самовывоз = СтрокаМаршрута.Самовывоз;
		КонецЕсли;
		
		ВыбранныйРейс = Неопределено;
		Если Элементы.Рейсы.Видимость И Элементы.ГруппаРейсы.Видимость тогда
			Если Элементы.Рейсы.ТекущиеДанные <> Неопределено тогда
				ВыбранныйРейс = Элементы.Рейсы.ТекущиеДанные.Рейс;
			Иначе
				ВыбранныйРейс = 1;
			КонецЕсли;
		Иначе
			ВыбранныйРейс = 1;
		КонецЕсли;
	КонецЕсли;
	
	ВыбраннаяТочкаМаршрута = Неопределено;
	Если Элементы.СоставыРейсов.ТекущиеДанные <> Неопределено тогда
		ВыбранныйGUIDТочкиМаршрута = Элементы.СоставыРейсов.ТекущиеДанные.GUID;
	КонецЕсли;
	
	Если ИмяАктивированойТаблицы = "Маршруты" тогда
		Если НЕ ВыбранныйМаршрут = Неопределено тогда
			
			Если ВыбранныйМаршрут = ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка") ИЛИ Самовывоз тогда
				Если Элементы.Маршруты.ТекущаяСтрока <> Неопределено тогда
					ВыбранныйМаршрут = Элементы.Маршруты.ТекущиеДанные.Маршрут;
					Самовывоз = Элементы.Маршруты.ТекущиеДанные.Самовывоз;
				КонецЕсли;
				
				Элементы.Рейсы.ОтборСтрок = Новый ФиксированнаяСтруктура("Маршрут", ВыбранныйМаршрут);
				Отборы = Новый ФиксированнаяСтруктура("Маршрут, Рейс", ВыбранныйМаршрут, ВыбранныйРейс);
				
				Элементы.СоставыРейсов.ОтборСтрок = Отборы;
				Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено ИЛИ
					 Элементы.СоставыРейсов.ТекущиеДанные = Неопределено тогда
		 			Для Каждого Строка из Объект.СоставыРейсов цикл
						Если Строка.Маршрут = ВыбранныйМаршрут И Строка.Рейс = ВыбранныйРейс тогда
							Элементы.СоставыРейсов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
							ВыбранныйGUIDТочкиМаршрута = Строка.GUID;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				Отборы = Новый ФиксированнаяСтруктура("Маршрут", ВыбранныйМаршрут);
				
				Элементы.Рейсы.ОтборСтрок = Отборы;
				Для Каждого Строка из Объект.Рейсы цикл
					Если Строка.Маршрут = ВыбранныйМаршрут тогда
						Элементы.Рейсы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
						ВыбранныйРейс = Строка.Рейс;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Отборы = Новый ФиксированнаяСтруктура("Маршрут, Рейс", ВыбранныйМаршрут, ВыбранныйРейс);
				
				Элементы.СоставыРейсов.ОтборСтрок = Отборы;
				Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено ИЛИ
					 Элементы.СоставыРейсов.ТекущиеДанные = Неопределено тогда
		 			Для Каждого Строка из Объект.СоставыРейсов цикл
						Если Строка.Маршрут = ВыбранныйМаршрут И Строка.Рейс = ВыбранныйРейс тогда
							Элементы.СоставыРейсов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
							ВыбранныйGUIDТочкиМаршрута = Строка.GUID;
							Прервать;
						КонецЕсли;
					КонецЦикла
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыбранныйGUIDТочкиМаршрута) тогда
				Элементы.Документы.ОтборСтрок = Новый ФиксированнаяСтруктура("GUID", ВыбранныйGUIDТочкиМаршрута);
			Иначе
				Элементы.Документы.ОтборСтрок = Новый ФиксированнаяСтруктура("GUID", "ERROR");
			КонецЕсли;
			
		Иначе
			Элементы.Рейсы.ОтборСтрок = Новый ФиксированнаяСтруктура("Тоннаж", -1);
		КонецЕсли;
		
		ВызовУправленияФормой = Истина;
		Элементы.РейсыДляКарты.ОтборСтрок = Элементы.Рейсы.ОтборСтрок;
		Элементы.РейсыДляКарты.Обновить();
		УправлениеФормой(ЭтаФорма);
		WebMapПолеHTML = "";
		UpdateWebMapПолеHTML = Истина;
		УстановитьСвязиПараметровВыбораДляВодителяИАвтомобиля();
		WebMapUpdate();
		
	ИначеЕсли ИмяАктивированойТаблицы = "Рейсы" тогда
		Если ВыбранныйМаршрут <> Неопределено И Элементы.Рейсы.ТекущаяСтрока <> Неопределено тогда
			Отборы = Новый ФиксированнаяСтруктура("Маршрут, Рейс", ВыбранныйМаршрут, ВыбранныйРейс);
			
			Элементы.СоставыРейсов.ОтборСтрок = Отборы;
			Элементы.СоставыРейсов.Доступность = Истина;
			Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено ИЛИ
				 Элементы.СоставыРейсов.ТекущиеДанные = Неопределено тогда
				Для Каждого Строка из Объект.СоставыРейсов цикл
					Если Строка.Маршрут = ВыбранныйМаршрут И Строка.Рейс = ВыбранныйРейс тогда
						Элементы.СоставыРейсов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		Иначе
			Элементы.СоставыРейсов.ОтборСтрок = Новый ФиксированнаяСтруктура("Маршрут, Рейс", ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка"), -99);
		КонецЕсли;
		
	ИначеЕсли ИмяАктивированойТаблицы = "РейсыДляКарты" тогда
		Элементы.РейсыДляКарты.Обновить();
		WebMapПолеHTML = "";
		UpdateWebMapПолеHTML = Истина;
		WebMapUpdate();
		
	ИначеЕсли ИмяАктивированойТаблицы = "СоставыРейсов" тогда
		
		Если ЗначениеЗаполнено(ВыбранныйGUIDТочкиМаршрута) тогда
			Элементы.Документы.ОтборСтрок = Новый ФиксированнаяСтруктура("GUID", ВыбранныйGUIDТочкиМаршрута);
		Иначе
			Элементы.Документы.ОтборСтрок = Новый ФиксированнаяСтруктура("GUID", "ERROR");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Маршруты.ТекущиеДанные <> Неопределено тогда
		НомерПоследнейАктивнойСтрокиМаршрута = Элементы.Маршруты.ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	Если НЕ ВызовУправленияФормой тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	УправлениеДоступностьюКнопокПеремещенияСоставаРейсов();
	ОбновитьЗаголовкиПолейФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиПолейФормы()
	
	Если Элементы.Рейсы.Видимость тогда
		Элементы.РейсыСвернутьРазвернуть.Заголовок = "Рейсы маршрута (закрыть):";
	Иначе
		Элементы.РейсыСвернутьРазвернуть.Заголовок = "Рейсы маршрута (открыть):";
	КонецЕсли;
	
	Если Элементы.Документы.Видимость тогда
		Элементы.ДокументыСвернутьРазвернуть.Заголовок = "Документы грузополучателя (закрыть):";
	Иначе
		Элементы.ДокументыСвернутьРазвернуть.Заголовок = "Документы грузополучателя (открыть):";
	КонецЕсли;
	
	Если Элементы.МаршрутыАвтомобиль.Видимость И Элементы.МаршрутыВодитель.Видимость тогда
		Элементы.ВодительАвтомобильСвернутьРазвернуть.Заголовок = "Водитель/автомобиль (закрыть):";
	Иначе
		Элементы.ВодительАвтомобильСвернутьРазвернуть.Заголовок = "Водитель/автомобиль (открыть):";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторостепенныеДанныеТаблицФормы()
	
	Для Каждого СтрокаМаршрута из Объект.Маршруты цикл
		
		Если ЗначениеЗаполнено(СтрокаМаршрута.Маршрут) тогда
			СтрокаМаршрута.МаршрутПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМаршрута.Маршрут, "Наименование");
			СтрокаМаршрута.Самовывоз = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМаршрута.Маршрут, "Самовывоз");
		Иначе
			СтрокаМаршрута.МаршрутПредставление = "НЕ РАСПРЕДЕЛЕНО";
			СтрокаМаршрута.Самовывоз = Истина;
		КонецЕсли;
		
		СтрокаМаршрута.НомерМаршрута = СтрокаМаршрута.НомерСтроки;
		УстановитьПеревозчикаМаршрута(СтрокаМаршрута.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Для Каждого СтрокаРейс из Объект.Рейсы цикл
		СтрокаРейс.РейсПредставление = "Рейс №" + Строка(СтрокаРейс.Рейс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПеревозчикаМаршрута(ИдентификаторСтроки, Маршрут = Неопределено)
	
	СтрокаМаршрута = Объект.Маршруты.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Маршрут = Неопределено тогда
		Маршрут = СтрокаМаршрута.Маршрут;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаМаршрута.Водитель) И НЕ ЗначениеЗаполнено(СтрокаМаршрута.Автомобиль) тогда
		СтрокаМаршрута.Перевозчик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе
		Если ЗначениеЗаполнено(СтрокаМаршрута.Водитель) тогда
			СтрокаМаршрута.Перевозчик = ЗначениеРеквизитаОбъекта(СтрокаМаршрута.Водитель, "Перевозчик");
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаМаршрута.Автомобиль) тогда
			СтрокаМаршрута.Перевозчик = ЗначениеРеквизитаОбъекта(СтрокаМаршрута.Автомобиль, "Перевозчик");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвязиПараметровВыбораДляВодителяИАвтомобиля();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляВодителяИАвтомобиля()
	
	Если Элементы.Маршруты.ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ДанныеМаршрута = ДанныеМаршрутаПоИдентификаторуСтрокиБезСсылок(Элементы.Маршруты.ТекущаяСтрока);
	
	Если НЕ ДанныеМаршрута = Неопределено тогда
		Если ДанныеМаршрута.Самовывоз тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеМаршрута.Перевозчик) тогда
			НовыеСвязи = Новый ФиксированныйМассив(Новый Массив);
		Иначе
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора("Отбор.Перевозчик", "Элементы.Маршруты.ТекущиеДанные.Перевозчик"));
			НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		КонецЕсли;
	Иначе
		НовыеСвязи = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Элементы.МаршрутыВодитель.СвязиПараметровВыбора = НовыеСвязи;
	Элементы.МаршрутыАвтомобиль.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаСервере
Процедура СдвинутьНомерВРейсеТочкиМаршрута(Направление, Самовывоз)
	
	Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Самовывоз) = Тип("Булево") тогда
		Самовывоз = Ложь;
	КонецЕсли;
	
	ДанныеПеремещаемойТочкиМаршрута = Объект.СоставыРейсов.НайтиПоИдентификатору(Элементы.СоставыРейсов.ТекущаяСтрока);
	НомерВРейсе = ДанныеПеремещаемойТочкиМаршрута.НомерВРейсе;
	Если Элементы.Рейсы.Видимость И Элементы.ГруппаРейсы.Видимость тогда
		НомерРейса = ДанныеПеремещаемойТочкиМаршрута.Рейс;
	Иначе
		НомерРейса = 1;
	КонецЕсли;
	
	Если Направление = "Вверх" тогда
		Если НомерВРейсе <= 1 тогда
			НомерВРейсе = 10000;
		Иначе
			НомерВРейсе = НомерВРейсе - 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Направление = "Вниз" тогда
		НайденыеТочкиМаршрутаРейса = НайтиТочкиМаршрутаРейса(ДанныеПеремещаемойТочкиМаршрута.Маршрут, НомерРейса);
		Если НомерВРейсе >= НайденыеТочкиМаршрутаРейса.Количество() тогда
			НомерВРейсе = -1;
		Иначе
			НомерВРейсе = НомерВРейсе + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерВРейсе > 0 И НомерВРейсе < 10000 тогда
		
		СтруктураПоиска = Новый Структура("Маршрут,Рейс,НомерВРейсе",
		                                 ДанныеПеремещаемойТочкиМаршрута.Маршрут,
		                                 НомерРейса,
		                                 НомерВРейсе);
		
		НайденыеТочкиМаршрутаРейса = Объект.СоставыРейсов.НайтиСтроки(СтруктураПоиска);
		ДанныеЗамещаемойТочкиМаршрута = НайденыеТочкиМаршрутаРейса.Получить(0);
		ЗамещаемыйНомерВРейсе = НомерВРейсе;
		Если Направление = "Вверх" тогда
			ЗамещаемыйНомерВРейсе = ЗамещаемыйНомерВРейсе + 1;
		КонецЕсли;
		
		Если Направление = "Вниз" тогда
			ЗамещаемыйНомерВРейсе = ЗамещаемыйНомерВРейсе - 1;
		КонецЕсли;
		
		ДанныеЗамещаемойТочкиМаршрута.НомерВРейсе = ЗамещаемыйНомерВРейсе;
		
	КонецЕсли;
	
	UpdateWebMapПолеHTML = Истина;
	
	СтруктураПоиска = Новый Структура(
		"Маршрут,
		|Рейс",
		ДанныеПеремещаемойТочкиМаршрута.Маршрут,
		ДанныеПеремещаемойТочкиМаршрута.Рейс
	);
	
	СтрокаРейса = Объект.Рейсы.НайтиСтроки(СтруктураПоиска).Получить(0);
	СтрокаРейса.Пробег = 0;
	
	ПриИзмененииПробегаРейсаНаСервере("Рейсы");
	
	ДанныеПеремещаемойТочкиМаршрута.НомерВРейсе = НомерВРейсе;
	ОбновитьНумерациюСоставаРейсов(
		ДанныеПеремещаемойТочкиМаршрута.Маршрут,
		НомерРейса,
		Самовывоз
	);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиТочкуМаршрута(ИдентификаторСтроки, МаршрутНазначение, РейсНазаначение, ОбновлятьНумерациюСоставаРейсов = Истина)
	
	Если ИдентификаторСтроки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ПереносимаяСтрока = Объект.СоставыРейсов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Запомним данные маршрута и рейса источника,
	// до изменения в переносимой строке
	СтрокаМаршрутИсточник = НайтиМаршрут(ПереносимаяСтрока.Маршрут).Получить(0);
	МаршрутИсточник = СтрокаМаршрутИсточник.Маршрут;
	РейсИсточник = ПереносимаяСтрока.Рейс;
	
	// Перенесём строку в маршрут и рейс назначения,
	// это нужно сделать заранее, т.к. в дальнейшем
	// эта строка уже не должна выступать в старом маршруте
	// чтобы можно было определить пустой рейс и маршрут
	ПереносимаяСтрока.Маршрут = МаршрутНазначение;
	ПереносимаяСтрока.Рейс = РейсНазаначение;	
	
	// Обаботаем данные маршрута/рейса-источника
	НайденыеТочкиМаршрутаРейса = НайтиТочкиМаршрутаРейса(МаршрутИсточник, РейсИсточник);
	Если НайденыеТочкиМаршрутаРейса.Количество() = 0 тогда
		СтрокаРейсИсточник = НайтиРейсМаршрута(МаршрутИсточник, РейсИсточник).Получить(0);
		Объект.Рейсы.Удалить(СтрокаРейсИсточник);
		ОбновитьНумерациюРейсов(МаршрутИсточник);
	Иначе
		СтрокаРейсИсточник = НайтиРейсМаршрута(МаршрутИсточник, РейсИсточник).Получить(0);
		СтрокаРейсИсточник.Тоннаж = СтрокаРейсИсточник.Тоннаж - ПереносимаяСтрока.Тоннаж;
		СтрокаРейсИсточник.Наценка = СтрокаРейсИсточник.Наценка - ПереносимаяСтрока.Наценка;
	КонецЕсли;
	
	НайденыеТочкиМаршрута = НайтиТочкиМаршрутаРейса(МаршрутИсточник);
	Если НайденыеТочкиМаршрута.Количество() = 0 тогда
		Объект.Маршруты.Удалить(СтрокаМаршрутИсточник);
		ПерваяАктивицияТаблиц = Истина;
	Иначе
		СтрокаМаршрутИсточник.Тоннаж = СтрокаМаршрутИсточник.Тоннаж - ПереносимаяСтрока.Тоннаж;
		СтрокаМаршрутИсточник.Наценка = СтрокаМаршрутИсточник.Наценка - ПереносимаяСтрока.Наценка;
		СтрокаМаршрутИсточник.Пробег = 0;
		СтрокаРейсИсточник.Пробег = 0;
	КонецЕсли;
	
	Если ОбновлятьНумерациюСоставаРейсов тогда
		ОбновитьНумерациюСоставаРейсов(МаршрутИсточник, РейсИсточник, СтрокаМаршрутИсточник.Самовывоз);
	КонецЕсли;
	
	
	// Обаботаем данные маршрута/рейса-назначения
	НайденыеРейсы = НайтиРейсМаршрута(МаршрутНазначение, РейсНазаначение);
	Если НайденыеРейсы.Количество() = 0 тогда
		СтрокаРейсНазначение = Объект.Рейсы.Добавить();
		СтрокаРейсНазначение.Маршрут = МаршрутНазначение;
		СтрокаРейсНазначение.Рейс = РейсНазаначение;
		СтрокаРейсНазначение.РейсПредставление = "Рейс №" + Строка(РейсНазаначение);
		ОбновитьНумерациюРейсов(МаршрутНазначение);
	Иначе
		СтрокаРейсНазначение = НайденыеРейсы.Получить(0);
	КонецЕсли;
	
	СтрокаРейсНазначение.Тоннаж = СтрокаРейсНазначение.Тоннаж + ПереносимаяСтрока.Тоннаж;
	СтрокаРейсНазначение.Наценка = СтрокаРейсНазначение.Наценка + ПереносимаяСтрока.Наценка;
	
	НайденыеМаршруты = НайтиМаршрут(МаршрутНазначение);
	Если НайденыеМаршруты.Количество() = 0 тогда
		СтрокаМаршрутНазначение = Объект.Маршруты.Добавить();
		СтрокаМаршрутНазначение.Маршрут   = МаршрутНазначение;
		СтрокаМаршрутНазначение.Самовывоз = ЗначениеРеквизитаОбъекта(МаршрутНазначение, "Самовывоз");
		
		Если ЗначениеЗаполнено(МаршрутНазначение) тогда
			СтрокаМаршрутНазначение.МаршрутПредставление = ЗначениеРеквизитаОбъекта(МаршрутНазначение, "Наименование");
			
			ВодительПоУмолчанию = ЗначениеРеквизитаОбъекта(МаршрутНазначение, "Водитель");
			НайденыеИдентификаторыСтрок = НайтиВТаблицеМаршрутыВодителяИлиАвтомобиль("Водитель", ВодительПоУмолчанию, СтрокаМаршрутНазначение.ПолучитьИдентификатор());
			Если НайденыеИдентификаторыСтрок.Количество() = 0 тогда
				СтрокаМаршрутНазначение.Водитель = ВодительПоУмолчанию;
			КонецЕсли;
			
			АвтомобильПоУмолчанию = ЗначениеРеквизитаОбъекта(МаршрутНазначение, "Автомобиль");
			НайденыеИдентификаторыСтрок = НайтиВТаблицеМаршрутыВодителяИлиАвтомобиль("Автомобиль", АвтомобильПоУмолчанию, СтрокаМаршрутНазначение.ПолучитьИдентификатор());
			Если НайденыеИдентификаторыСтрок.Количество() = 0 тогда
				СтрокаМаршрутНазначение.Автомобиль = АвтомобильПоУмолчанию;
			КонецЕсли;
			
			УстановитьПеревозчикаМаршрута(СтрокаМаршрутНазначение.ПолучитьИдентификатор(), МаршрутНазначение);
		Иначе
			СтрокаМаршрутНазначение.МаршрутПредставление = "НЕ РАСПРЕДЕЛЕНО";
		КонецЕсли;
		
		ОбновитьНумерациюМаршрутов();
		
	Иначе
		СтрокаМаршрутНазначение = НайденыеМаршруты.Получить(0);
	КонецЕсли;
	
	Если ОбновлятьНумерациюСоставаРейсов тогда
		ОбновитьНумерациюСоставаРейсов(МаршрутНазначение, РейсНазаначение, СтрокаМаршрутНазначение.Самовывоз);
	КонецЕсли;
	
	СтрокаМаршрутНазначение.Тоннаж = СтрокаМаршрутНазначение.Тоннаж + ПереносимаяСтрока.Тоннаж;
	СтрокаМаршрутНазначение.Наценка = СтрокаМаршрутНазначение.Наценка + ПереносимаяСтрока.Наценка;
	СтрокаМаршрутНазначение.Пробег = 0;
	СтрокаРейсНазначение.Пробег = 0;
	
	
	UpdateWebMapПолеHTML = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьМаршрутныеЛистыНаСервере()
	
	Документы.ТранспортнаяЛогистика.СоздатьОбновитьДокументыНаОгтрузку(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияСоздатьВременныйКаталогФормы(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	КаталогВременныхФайловДокумента = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаВременныхФайлов);
	WebMapUpdate();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКнопокПеремещенияСоставаРейсов()
	
	Если Элементы.СоставыРейсов.ТекущаяСтрока = Неопределено ИЛИ
		Элементы.СоставыРейсов.ТекущиеДанные  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеМаршрута = ДанныеМаршрутаПоИдентификаторуСтрокиБезСсылок(Элементы.Маршруты.ТекущаяСтрока);
	
	Если НЕ ДанныеМаршрута.Самовывоз тогда
		
		Если Элементы.Рейсы.Видимость И Элементы.ГруппаРейсы.Видимость тогда
			СтруктураПоиска = Новый Структура("Маршрут, Рейс",
			                                  Элементы.СоставыРейсов.ТекущиеДанные.Маршрут,
			                                  Элементы.СоставыРейсов.ТекущиеДанные.Рейс);
		Иначе
			СтруктураПоиска = Новый Структура("Маршрут, Рейс", Элементы.СоставыРейсов.ТекущиеДанные.Маршрут, 1);
		КонецЕсли;
		
		НайденыеСтроки = Объект.СоставыРейсов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденыеСтроки.Количество() <= 1 тогда
			Элементы.СоставыРейсовВверх.Доступность = Ложь;
			Элементы.СоставыРейсовВверх1.Доступность = Ложь;
			Элементы.СоставыРейсовВниз.Доступность = Ложь;
			Элементы.СоставыРейсовВниз1.Доступность = Ложь;
		Иначе
			Элементы.СоставыРейсовВверх.Доступность = Истина;
			Элементы.СоставыРейсовВверх1.Доступность = Истина;
			Элементы.СоставыРейсовВниз.Доступность = Истина;
			Элементы.СоставыРейсовВниз1.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.СоставыРейсовВверх.Доступность = Ложь;
		Элементы.СоставыРейсовВверх1.Доступность = Ложь;
		Элементы.СоставыРейсовВниз.Доступность = Ложь;
		Элементы.СоставыРейсовВниз1.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументНаДатуСПроверкойМодифицированности(УстанавливаемаяДата = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если УстанавливаемаяДата = Неопределено тогда
		УстанавливаемаяДатаФормат = Формат(Объект.Дата, "ДЛФ=DD");
	Иначе
		УстанавливаемаяДатаФормат = Формат(УстанавливаемаяДата, "ДЛФ=DD");
		ДополнительныеПараметры.Вставить("Дата", УстанавливаемаяДата);
	КонецЕсли;
	
	ТекстВопроса = "";
	Если Параметры.Ключ.Пустая() тогда
		Если Модифицированность тогда
			Если УстанавливаемаяДата = Неопределено тогда
				ТекстВопроса = НСтр("ru = 'В (не сохраненный ) документ были внесены изменения. Если вы продолжите, то внесенные изменения не сохраняться!
				                          |Вы дествительно хотите перезаполнить документ?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'При заполнении (не сохраненного) документа на дату " + УстанавливаемаяДатаФормат + ", изменения не сохраняться!
				                          |Вы дествительно хотите заполнить документ на дату " + УстанавливаемаяДатаФормат + "?'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если УстанавливаемаяДата = Неопределено тогда
			Если Модифицированность тогда
				ТекстВопроса = НСтр("ru = 'После последнего сохранения документа были внесены изменения. Если вы продолжите, то внесенные изменения не сохраняться!
				                          |Вы дествительно хотите обновить данные документа?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Обновить данные документа на дату " + УстанавливаемаяДатаФормат + "?'");
			КонецЕсли;
		Иначе
			ТекстВопроса = НСтр("ru = 'При перезаполнении документа на дату " + УстанавливаемаяДатаФормат + ", внесенные данные не сохраняться!
			                          |Вы дествительно хотите заполнить документ на дату " + УстанавливаемаяДатаФормат + "?'");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстВопроса) тогда
		
		Оповещение = Новый ОписаниеОповещения("ОтветНаВопросПриЗаполненииДокумента", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение,
		               ТекстВопроса,
		               РежимДиалогаВопрос.ДаНет,
		               30,
		               КодВозвратаДиалога.Нет,
		               "Перезаполнить документ?",
		               КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьДокументНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПриЗаполненииДокумента(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры.Свойство("Дата") тогда
			Объект.Дата = ДополнительныеПараметры.Дата;
			СтараяДата = Объект.Дата;
		КонецЕсли;
		
		ЗаполнитьДокументНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПерестроитьПорядокРейсаМаршрутаАвтоматически(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ДополнительныеПараметры.Свойство("Маршрут") ИЛИ
			 НЕ ДополнительныеПараметры.Свойство("Рейс") ИЛИ
			 НЕ ДополнительныеПараметры.Свойство("Самовывоз") тогда
			Возврат;
		КонецЕсли;
		
		ПерестроитьПорядокРейсаМаршрутаАвтоматически(
			ДополнительныеПараметры.Маршрут,
			ДополнительныеПараметры.Рейс,
			ДополнительныеПараметры.Самовывоз
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Маршруты.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляПередачи = Новый Структура;
	ПараметрыДляПередачи.Вставить("Ключ", Элементы.Документы.ТекущиеДанные.Документ);
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", ПараметрыДляПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставыРейсовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СоставыРейсов.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СоставыРейсов.ТекущийЭлемент.Имя = "СоставыРейсовТочкаМаршрута" тогда
		ПараметрыДляПередачи = Новый Структура;
		ПараметрыДляПередачи.Вставить("Ключ", Элементы.СоставыРейсов.ТекущиеДанные.ТочкаМаршрута);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыДляПередачи);
	Иначе
		МассивДокументов = ДокументыТочкиМаршрута(Элементы.СоставыРейсов.ТекущиеДанные.GUID);
		
		ПараметрыДляПередачи = Новый Структура;
		ПараметрыДляПередачи.Вставить("МассивДокументов", МассивДокументов);
		ПараметрыДляПередачи.Вставить("КомпактноеРазмещениеНаФорме", КомпактноеРазмещениеНаФорме);
		ПараметрыДляПередачи.Вставить("ТочкаМаршрута", Элементы.СоставыРейсов.ТекущиеДанные.ТочкаМаршрута);
		
		ОткрытьФорму(
			"Документ.ТранспортнаяЛогистика.Форма.ФормаТовара",
			ПараметрыДляПередачи
		);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДокументыТочкиМаршрута(ВыбранныйGUIDТочкиМаршрута)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыМаршрута", Объект.ДокументыМаршрута.Выгрузить(,"GUID, Документ"));
	Запрос.УстановитьПараметр("GUID", ВыбранныйGUIDТочкиМаршрута);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДокументыМаршрута.Документ КАК Документ.СчетНаОплатуПокупателю) КАК Документ
	|ПОМЕСТИТЬ ДокументыМаршрута
	|ИЗ
	|	&ДокументыМаршрута КАК ДокументыМаршрута
	|ГДЕ
	|	ДокументыМаршрута.GUID = &GUID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыМаршрута.Документ КАК Документ
	|ИЗ
	|	ДокументыМаршрута КАК ДокументыМаршрута
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыМаршрута.Документ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
КонецФункции

&НаКлиенте
Процедура КомпактноеРазмещениеНаФорме(Команда)
	
	КомпактноеРазмещениеНаФорме = НЕ КомпактноеРазмещениеНаФорме;
	Элементы.КомпактноеРазмещениеНаФорме.Пометка = КомпактноеРазмещениеНаФорме;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Маршруты.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Маршруты.ТекущийЭлемент.Имя = "МаршрутыПробег" тогда
		ПараметрыДляПередачи = Новый Структура;
		ПараметрыДляПередачи.Вставить("Ключ", Элементы.Маршруты.ТекущиеДанные.Маршрут);
		ОткрытьФорму("Справочник.Маршруты.Форма.ФормаЭлемента", ПараметрыДляПередачи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияWEBКартыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	WebMapПолеHTML = "";
	UpdateWebMapПолеHTML = Истина;
	ПодключитьОбработчикОжидания("WebMapUpdate", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоСтрокВТаблице(Форма, ИмяТаблицы, ИмяЭлементаФормы)
	
	СтруктураОтбора = Новый Структура;
	
	Если Форма.Элементы[ИмяЭлементаФормы].ОтборСтрок = Неопределено тогда
		Возврат 0;
	КонецЕсли;
	
	Для Каждого КлючИЗначение из Форма.Элементы[ИмяЭлементаФормы].ОтборСтрок цикл
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Форма.Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора).Количество();
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПробегаРейса(Элемент)
	
	Если НЕ СтрНайти(Элемент.Имя, "РейсыДляКарты") = 0 тогда
		ПриИзмененииПробегаРейсаНаСервере("РейсыДляКарты");
	Иначе
		ПриИзмененииПробегаРейсаНаСервере("Рейсы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПробегаРейсаНаСервере(ИмяЭлемента)
	
	ИдентификаторСтроки = Элементы[ИмяЭлемента].ТекущаяСтрока;
	СтрокаРейса         = Объект.Рейсы.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокиТаблицыРейсы  = Объект.Рейсы.НайтиСтроки(Новый Структура("Маршрут", СтрокаРейса.Маршрут));
	
	ИтоговыйПробег = 0;
	Для Каждого СтрокаРейса из СтрокиТаблицыРейсы цикл
		ИтоговыйПробег = ИтоговыйПробег + СтрокаРейса.Пробег;
	КонецЦикла;
	
	СтрокиТаблицыМаршруты = Объект.Маршруты.НайтиСтроки(Новый Структура("Маршрут", СтрокаРейса.Маршрут));
	СтрокиТаблицыМаршруты.Получить(0).Пробег = ИтоговыйПробег;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыПробегПриИзменении(Элемент)
	
	МаршрутыПробегПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура МаршрутыПробегПриИзмененииНаСервере()
	
	ИдентификаторСтроки = Элементы.Маршруты.ТекущаяСтрока;
	СтрокаМаршрута      = Объект.Маршруты.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокиТаблицыРейсы  = Объект.Рейсы.НайтиСтроки(Новый Структура("Маршрут", СтрокаМаршрута.Маршрут));
	
	Для Каждого СтрокаРейса из СтрокиТаблицыРейсы цикл
		СтрокаРейса.Пробег = СтрокаМаршрута.Пробег;
	КонецЦикла;
	
КонецПроцедуры


