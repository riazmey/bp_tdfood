
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Объект.Проведен тогда
		Сообщить("Документ " + Объект.Ссылка + " не проведен! Автоматическая печать документов невозможна!");
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	СформироватьДеревоПечатныхФорм();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоПечатныхФорм()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Маршрут", Объект.Маршрут);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТранспортнаяЛогистикаДоставкаОбороты.Рейс КАК Рейс,
	|	ТранспортнаяЛогистикаДоставкаОбороты.НомерВРейсе КАК НомерВРейсе,
	|	ТранспортнаяЛогистикаДоставкаОбороты.ТочкаМаршрута КАК Грузополучатель,
	|	ТранспортнаяЛогистикаДоставкаОбороты.ДокументДвижения КАК Документ,
	|	ТранспортнаяЛогистикаДоставкаОбороты.ДокументДвижения.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.ТранспортнаяЛогистикаДоставка.Обороты(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), , Маршрут = &Маршрут) КАК ТранспортнаяЛогистикаДоставкаОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рейс,
	|	НомерВРейсе,
	|	Грузополучатель,
	|	Документ";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоПечатныхФорм");
	
	// Создаем печатные формы документа "Маршрутный лист"
	СтрокаМаршрута = ДеревоЗначений.Строки.Добавить();
	СтрокаМаршрута.Группировка = Объект.Ссылка;
	
	НастройкиПечати = НастройкиПечатиОбъекта(Неопределено, Объект.Ссылка);
	Если НЕ НастройкиПечати.Владелец = Неопределено тогда
		СоздатьПечатныеФормыСтрокиДерева(Объект.Ссылка, НастройкиПечати, СтрокаМаршрута);
	КонецЕсли;
	
	// Создаем печатные формы документа "Движение многооборотной тары"
	ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Передача;
	ДвиженияМногооборотнойТары = МногооборотнаяТараСервер.НайтиДвиженияМногооборотнойТарыНаОсновании(Объект.Ссылка, ВидОперации);
	Если НЕ ДвиженияМногооборотнойТары = Неопределено тогда
		ДокументСсылка = ДвиженияМногооборотнойТары.Получить(0);
		НастройкиПечати = НастройкиПечатиОбъекта(Неопределено, ДокументСсылка);
		Если НЕ НастройкиПечати.Владелец = Неопределено тогда
			СоздатьПечатныеФормыСтрокиДерева(ДокументСсылка, НастройкиПечати, СтрокаМаршрута);
		КонецЕсли;
	КонецЕсли;
	
	ПрошлыйГрузополучатель = Неопределено;
	Пока ВыборкаДокументов.Следующий() цикл
		
		Если ПрошлыйГрузополучатель <> ВыборкаДокументов.Грузополучатель тогда
			СтрокаГрузополучатель = СтрокаМаршрута.Строки.Добавить();
			СтрокаГрузополучатель.Группировка = ВыборкаДокументов.Грузополучатель;
		КонецЕсли;
		
		НастройкиПечати = НастройкиПечатиОбъекта(ВыборкаДокументов.ДоговорКонтрагента, ВыборкаДокументов.Документ);
		Если НЕ НастройкиПечати.Владелец = Неопределено тогда
			
			СтрокаДокумент = СтрокаГрузополучатель.Строки.Добавить();
			СтрокаДокумент.Группировка = ВыборкаДокументов.Документ;
			
			СоздатьПечатныеФормыСтрокиДерева(ВыборкаДокументов.Документ, НастройкиПечати, СтрокаДокумент);
			
		КонецЕсли;
		
		ПрошлыйГрузополучатель = ВыборкаДокументов.Грузополучатель;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений,"ДеревоПечатныхФорм");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПечатиОбъекта(Владелец, Ссылка)
	
	ОбъектМетаданных = НастройкиАвтоматическойПечатиСервер.НайтиОбъектМетаданныхПоСсылке(Ссылка);
	
	СписокОбъектовМетаданных = НастройкиАвтоматическойПечатиСервер.СписокОбъектовМетаданных(Ложь);
	
	Если СписокОбъектовМетаданных.НайтиПоЗначению(ОбъектМетаданных) = Неопределено тогда // Это только базовые настройки печати
		НастрокиПечати = НастройкиАвтоматическойПечатиСервер.НастройкиАвтоматическойПечатиОбъектаМетаданных(ПредопределенноеЗначение("Справочник.НастройкиАвтоматическойПечатиБазовые.ПустаяСсылка"),
		                                                                                                    ОбъектМетаданных);
	Иначе
		НастрокиПечати = НастройкиАвтоматическойПечатиСервер.НастройкиАвтоматическойПечатиОбъектаМетаданных(Владелец,
		                                                                                                    ОбъектМетаданных);
	КонецЕсли;
	
	Возврат НастрокиПечати;
	
КонецФункции

&НаСервере
Процедура СоздатьПечатныеФормыСтрокиДерева(Ссылка, НастройкиПечати, СтрокаДерева)
	
	Для Каждого КомандаПечати из НастройкиПечати.КомандыПечати цикл
		
		СтрокаКомандаПечати = СтрокаДерева.Строки.Добавить();
		СтрокаКомандаПечати.Документ      = Ссылка;
		СтрокаКомандаПечати.Группировка   = КомандаПечати.Представление;
		СтрокаКомандаПечати.Копий         = КомандаПечати.КоличествоКопий;
		СтрокаКомандаПечати.КомандаПечати = КомандаПечати;
		
		ВременныйТабДокумент = Неопределено;
		Если КомандаПечати.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" тогда
			ВременныйТабДокумент = ПолучитьВнешнююПечатнуюФормуНаСервере(КомандаПечати.МенеджерПечати,
			                                                             КомандаПечати.Имя,
			                                                             Ссылка);
		Иначе
			ВременныйТабДокумент = ПолучитьТиповойТабличныйДокументНаСервере(КомандаПечати.МенеджерПечати,
			                                                                 КомандаПечати.Имя,
			                                                                 Ссылка);
		КонецЕсли;
		
		Если НЕ ВременныйТабДокумент = Неопределено тогда
			Если ВременныйТабДокумент.ВысотаТаблицы < 1 тогда
				ВременныйТабДокумент = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаКомандаПечати.ТабличныйДокумент = ВременныйТабДокумент;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФайловаяСистемаКлиент.СоздатьВременныйКаталог(Новый ОписаниеОповещения(
		"ОбработкаОповещенияСоздатьВременныйКаталогФормыИСформироватьPDFФайлы"
		, ЭтаФорма));
		
	ПолучитьСписокПринтеровСистемы();
	Принтер = ПолучитьПринтерПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТиповойТабличныйДокументНаСервере(ИмяМенеджераПечати, ИмяПечатнойФормы, СсылкаНаОбъект)
	
	ПараметрыПечати = Новый Структура;
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ДанныеПечатнойФормы = УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати,
	                                                                  ИмяПечатнойФормы,
	                                                                  МассивОбъектов,
	                                                                  ПараметрыПечати);
	
	Возврат ДанныеПечатнойФормы.КоллекцияПечатныхФорм[0].ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПолучитьВнешнююПечатнуюФормуНаСервере(ИмяМенеджераПечати,ИдентификаторКоманды,СсылкаНаОбъект)
	
	ПараметрыПечати = Новый Структура;
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	КоллекцияПечатныхФорм = Неопределено;
	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("ИдентификаторКоманды",ИдентификаторКоманды);
	ПараметрыИсточника.Вставить("ОбъектыНазначения",МассивОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДополнительныеОтчетыИОбработкиКоманды.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	               |ГДЕ
	               |	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор = &ИдентификаторКоманды";
	
	Запрос.УстановитьПараметр("ИдентификаторКоманды",ИдентификаторКоманды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		УправлениеПечатью.ПечатьПоВнешнемуИсточнику(Выборка.Ссылка,
		                                            ПараметрыИсточника,
		                                            КоллекцияПечатныхФорм,
		                                            МассивОбъектов,
		                                            ПараметрыПечати);
		
		Если Не КоллекцияПечатныхФорм.Количество() = 0 тогда
			Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДеревоПечатныхФормПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоПечатныхФорм.ТекущиеДанные = Неопределено тогда
		ТабДокумент = Новый ТабличныйДокумент;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьИзображениеПечФормы",0.2,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзображениеПечФормы() Экспорт
	
	ТабДокумент = Элементы.ДеревоПечатныхФорм.ТекущиеДанные.ТабличныйДокумент;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПринтеровСистемы()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СписокПринтеров     = Новый СписокЗначений;
	
	Попытка
		Если Найти(НРег(СистемнаяИнформация.ТипПлатформы), "linux") <> 0 тогда
			LinuxScriptsClient.ExecuteTemplateLinuxScript("list_printers");
			ТекстПринтеров = Новый ЧтениеТекста("/tmp/list-printers.txt", КодировкаТекста.UTF8);
			
			СписокПринтеров.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПринтеров.Прочитать(), " "));
		Иначе
			WScript_Network = Новый COMОбъект("WScript.Network");
			ArrayPrinters   =  WScript_Network.EnumPrinterConnections();
			
			i = 0;
			Пока i < ArrayPrinters.Count()-1 Цикл
				СписокПринтеров.Добавить(ArrayPrinters.Item(i+1));
				i = i + 2;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		СписокПринтеров.Очистить();
	КонецПопытки;
	
	Элементы.Принтер.СписокВыбора.ЗагрузитьЗначения(СписокПринтеров.ВыгрузитьЗначения());
	
КонецФункции

&НаКлиенте
Функция ПолучитьПринтерПоУмолчанию()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Попытка
		
		Если Найти(НРег(СистемнаяИнформация.ТипПлатформы), "linux") <> 0 тогда
			LinuxScriptsClient.ExecuteTemplateLinuxScript("get_default_printer");
			ТекстПринтеров = Новый ЧтениеТекста("/tmp/printer-default.txt", КодировкаТекста.UTF8);
			Возврат СокрЛП(ТекстПринтеров.Прочитать());
			
		Иначе
			Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
			Скрипт.Language = "vbscript";
			Скрипт.AddCode("
		         |Function GetDefaultPrinter()
		         |GetDefaultPrinter=vbNullString
		         |Set objWMIService=GetObject(""winmgmts:"" _
		         |& ""{impersonationLevel=impersonate}!\\.\root\cimv2"")
		         |Set colInstalledPrinters=objWMIService.ExecQuery _
		         |(""Select * from Win32_Printer"")
		         |For Each objPrinter in colInstalledPrinters
		         |If objPrinter.Attributes and 4 Then
		         |GetDefaultPrinter=objPrinter.Name
		         |Exit For
		         |End If
		         |Next
		         |End Function");
			
			Возврат СокрЛП(Скрипт.run("GetDefaultPrinter"));
		КонецЕсли;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияСоздатьВременныйКаталогФормыИСформироватьPDFФайлы(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	КаталогВременныхФайловДокумента = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаВременныхФайлов);
	СоздатьPDFФайлыДерева(ДеревоПечатныхФорм);
	
КонецПроцедуры

// Рекурсивная процедура
&НаКлиенте
Процедура СоздатьPDFФайлыДерева(ДеревоПечатныхФорм) Экспорт
	
	Для Каждого СтрокаКомандыПечати из ДеревоПечатныхФорм.ПолучитьЭлементы() цикл
		
		СтрокаКомандыПечати.ФайлPDF = СформироватьPDFФайл(СтрокаКомандыПечати.ПолучитьИдентификатор());
		
		Если СтрокаКомандыПечати.ПолучитьЭлементы().Количество() > 0 тогда
			СоздатьPDFФайлыДерева(СтрокаКомандыПечати);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьPDFФайл(ИдентификаторСтрокиДерева)
	
	СтрокаДерева = ДеревоПечатныхФорм.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	ТабличныйДокумент = СтрокаДерева.ТабличныйДокумент;
	
	Если ТабличныйДокумент = Неопределено тогда
		Возврат "";
	Иначе
		Если ТабличныйДокумент.ВысотаТаблицы < 1 тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	UIDФайла = Строка(Новый УникальныйИдентификатор);
	ИмяФайлаСохранения = КаталогВременныхФайловДокумента+UIDФайла+".pdf";
	
	ТабличныйДокумент.Записать(ИмяФайлаСохранения, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ИмяФайлаСохранения;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияУдалениеВременногоКаталогаФормы(Контекст) Экспорт
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения(
		"ОбработкаОповещенияУдалениеВременногоКаталогаФормы"
		, ЭтотОбъект)
		, КаталогВременныхФайловДокумента);
		
КонецПроцедуры

&НаКлиенте
Процедура ПечатьPDFФайла(ДанныеПечатнойФормы, ИмяПринтера)
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Arguments", "" + ИмяПринтера + " """ + ДанныеПечатнойФормы.ФайлPDF + """");
	
	Для Сч = 1 по ДанныеПечатнойФормы.Копий цикл
		LinuxScriptsClient.ExecuteTemplateLinuxScript("print_file",,ПараметрыПечати);
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивная процедура
&НаКлиенте
Процедура РаспечататьПодготовленныеПечатныеФормы(ДеревоПечатныхФорм, ИмяПринтера) Экспорт
	
	Для Каждого Строка из ДеревоПечатныхФорм.ПолучитьЭлементы() цикл
		Если ЗначениеЗаполнено(Строка.ФайлPDF) тогда
			ПечатьPDFФайла(Строка, ИмяПринтера);
		КонецЕсли;
		
		Если Строка.ПолучитьЭлементы().Количество() > 0 тогда
			РаспечататьПодготовленныеПечатныеФормы(Строка, ИмяПринтера);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяПечать(Команда)
	
	РаспечататьПодготовленныеПечатныеФормы(ДеревоПечатныхФорм, Принтер);
	
КонецПроцедуры