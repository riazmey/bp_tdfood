Функция ЗаполнитьДокументИСформироватьДокументыОтгрузки(ЗаполняемыйОбъект, ПроводитьДокумент = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаполняемыйОбъект.ДокументЛогистики) И
		НЕ ЗначениеЗаполнено(ЗаполняемыйОбъект.Маршрут) тогда
		Сообщить("При попытке заполнить Маршрутный лист возникла ошибка - не заполнен документ-основание или маршрут!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗаполняемыйОбъект.ДокументЛогистики.Проведен тогда
		Сообщить("Документ-основание " + ЗаполняемыйОбъект.ДокументЛогистики + " не проведен!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗаполняемыйОбъект.ПометкаУдаления тогда
		ЗаполняемыйОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ЗаполняемыйОбъект.Дата = ЗаполняемыйОбъект.ДокументЛогистики.Дата;
	
	ЗаполнитьНаОснованииДокументаТранспортнаяЛогистика(ЗаполняемыйОбъект);
	Возврат СформироватьДокументыОтгрузки(ЗаполняемыйОбъект, ПроводитьДокумент);
	
КонецФункции

Процедура ЗаполнитьНаОснованииДокументаТранспортнаяЛогистика(ЗаполняемыйОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ЗаполняемыйОбъект.Дата);
	Запрос.УстановитьПараметр("ДокументЛогистики", ЗаполняемыйОбъект.ДокументЛогистики);
	Запрос.УстановитьПараметр("Маршрут", ЗаполняемыйОбъект.Маршрут);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТранспортнаяЛогистикаМаршруты.Маршрут ЕСТЬ NULL
	|				И ТранспортнаяЛогистикаСоставыРейсов.Маршрут ЕСТЬ NULL
	|			ТОГДА ТранспортнаяЛогистикаДокументы.Ссылка.Дата
	|		ИНАЧЕ ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Ссылка.Дата, ТранспортнаяЛогистикаСоставыРейсов.Ссылка.Дата)
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА ТранспортнаяЛогистикаМаршруты.Маршрут ЕСТЬ NULL
	|				И ТранспортнаяЛогистикаСоставыРейсов.Маршрут ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Маршруты.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Маршрут, ТранспортнаяЛогистикаСоставыРейсов.Маршрут)
	|	КОНЕЦ КАК Маршрут,
	|	ТранспортнаяЛогистикаСоставыРейсов.Рейс КАК Рейс,
	|	ТранспортнаяЛогистикаСоставыРейсов.НомерВРейсе КАК НомерВРейсе,
	|	ТранспортнаяЛогистикаСоставыРейсов.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ТранспортнаяЛогистикаСоставыРейсов.АдресПредставление КАК АдресПредставление,
	|	ТранспортнаяЛогистикаСоставыРейсов.ВремяНачала КАК ВремяНачала,
	|	ТранспортнаяЛогистикаСоставыРейсов.ВремяОкончания КАК ВремяОкончания,
	|	ТранспортнаяЛогистикаСоставыРейсов.GUID КАК GUID,
	|	ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Водитель, ЗНАЧЕНИЕ(Справочник.Водители.ПустаяСсылка)) КАК Водитель,
	|	ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)) КАК Автомобиль,
	|	ЕСТЬNULL(ТранспортнаяЛогистикаДокументы.Документ, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)) КАК Документ,
	|	СУММА(ЕСТЬNULL(ТранспортнаяЛогистикаДокументы.Тоннаж, 0)) КАК Тоннаж,
	|	СУММА(ЕСТЬNULL(ТранспортнаяЛогистикаДокументы.Наценка, 0)) КАК Наценка,
	|	ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Пробег, 0) КАК Пробег
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ТранспортнаяЛогистика.СоставыРейсов КАК ТранспортнаяЛогистикаСоставыРейсов
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяЛогистика.Маршруты КАК ТранспортнаяЛогистикаМаршруты
	|		ПО ТранспортнаяЛогистикаСоставыРейсов.Ссылка = ТранспортнаяЛогистикаМаршруты.Ссылка
	|			И ТранспортнаяЛогистикаСоставыРейсов.Маршрут = ТранспортнаяЛогистикаМаршруты.Маршрут
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяЛогистика.ДокументыМаршрута КАК ТранспортнаяЛогистикаДокументы
	|		ПО ТранспортнаяЛогистикаСоставыРейсов.Ссылка = ТранспортнаяЛогистикаДокументы.Ссылка
	|			И ТранспортнаяЛогистикаСоставыРейсов.GUID = ТранспортнаяЛогистикаДокументы.GUID
	|ГДЕ
	|	ТранспортнаяЛогистикаМаршруты.Ссылка = &ДокументЛогистики
	|	И ТранспортнаяЛогистикаСоставыРейсов.Ссылка = &ДокументЛогистики
	|	И ТранспортнаяЛогистикаДокументы.Ссылка = &ДокументЛогистики
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортнаяЛогистикаСоставыРейсов.Рейс,
	|	ТранспортнаяЛогистикаСоставыРейсов.НомерВРейсе,
	|	ТранспортнаяЛогистикаСоставыРейсов.ТочкаМаршрута,
	|	ТранспортнаяЛогистикаСоставыРейсов.АдресПредставление,
	|	ТранспортнаяЛогистикаСоставыРейсов.ВремяНачала,
	|	ТранспортнаяЛогистикаСоставыРейсов.ВремяОкончания,
	|	ТранспортнаяЛогистикаСоставыРейсов.GUID,
	|	ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Водитель, ЗНАЧЕНИЕ(Справочник.Водители.ПустаяСсылка)),
	|	ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Автомобиль, ЗНАЧЕНИЕ(Справочник.Автомобили.ПустаяСсылка)),
	|	ЕСТЬNULL(ТранспортнаяЛогистикаДокументы.Документ, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)),
	|	ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Пробег, 0),
	|	ВЫБОР
	|		КОГДА ТранспортнаяЛогистикаМаршруты.Маршрут ЕСТЬ NULL
	|				И ТранспортнаяЛогистикаСоставыРейсов.Маршрут ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Маршруты.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Маршрут, ТранспортнаяЛогистикаСоставыРейсов.Маршрут)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТранспортнаяЛогистикаМаршруты.Маршрут ЕСТЬ NULL
	|				И ТранспортнаяЛогистикаСоставыРейсов.Маршрут ЕСТЬ NULL
	|			ТОГДА ТранспортнаяЛогистикаДокументы.Ссылка.Дата
	|		ИНАЧЕ ЕСТЬNULL(ТранспортнаяЛогистикаМаршруты.Ссылка.Дата, ТранспортнаяЛогистикаСоставыРейсов.Ссылка.Дата)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументОтгрузки,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК Документ
	|ПОМЕСТИТЬ РеализацииТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Маршрут КАК Маршрут,
	|	ДанныеДокумента.Рейс КАК Рейс,
	|	ДанныеДокумента.НомерВРейсе КАК НомерВРейсе,
	|	ДанныеДокумента.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ДанныеДокумента.АдресПредставление КАК АдресПредставление,
	|	ДанныеДокумента.ВремяНачала КАК ВремяНачала,
	|	ДанныеДокумента.ВремяОкончания КАК ВремяОкончания,
	|	ДанныеДокумента.GUID КАК GUID,
	|	ДанныеДокумента.Водитель КАК Водитель,
	|	ДанныеДокумента.Автомобиль КАК Автомобиль,
	|	ДанныеДокумента.Документ КАК Документ,
	|	РеализацииТоваровУслуг.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ДанныеДокумента.Тоннаж КАК Тоннаж,
	|	ДанныеДокумента.Наценка КАК Наценка,
	|	ДанныеДокумента.Пробег КАК Пробег
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеализацииТоваровУслуг КАК РеализацииТоваровУслуг
	|		ПО ДанныеДокумента.Документ = РеализацииТоваровУслуг.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Дата КАК Дата,
	|	ИтоговаяТаблица.Водитель КАК Водитель,
	|	ИтоговаяТаблица.Автомобиль КАК Автомобиль,
	|	ИтоговаяТаблица.Пробег КАК Пробег
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.Маршрут = &Маршрут
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.Водитель,
	|	ИтоговаяТаблица.Автомобиль,
	|	ИтоговаяТаблица.Пробег,
	|	ИтоговаяТаблица.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Рейс КАК Рейс,
	|	СУММА(ИтоговаяТаблица.Тоннаж) КАК Тоннаж,
	|	СУММА(ИтоговаяТаблица.Наценка) КАК Наценка
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.Маршрут = &Маршрут
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.Рейс
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рейс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Рейс КАК Рейс,
	|	ИтоговаяТаблица.НомерВРейсе КАК НомерВРейсе,
	|	ИтоговаяТаблица.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ИтоговаяТаблица.АдресПредставление КАК АдресПредставление,
	|	ИтоговаяТаблица.ВремяНачала КАК ВремяНачала,
	|	ИтоговаяТаблица.ВремяОкончания КАК ВремяОкончания,
	|	ИтоговаяТаблица.GUID КАК GUID,
	|	СУММА(ИтоговаяТаблица.Тоннаж) КАК Тоннаж,
	|	СУММА(ИтоговаяТаблица.Наценка) КАК Наценка
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.Маршрут = &Маршрут
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.Рейс,
	|	ИтоговаяТаблица.НомерВРейсе,
	|	ИтоговаяТаблица.ТочкаМаршрута,
	|	ИтоговаяТаблица.АдресПредставление,
	|	ИтоговаяТаблица.ВремяНачала,
	|	ИтоговаяТаблица.ВремяОкончания,
	|	ИтоговаяТаблица.GUID
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рейс,
	|	НомерВРейсе,
	|	ТочкаМаршрута,
	|	АдресПредставление,
	|	ВремяНачала,
	|	ВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Документ КАК Документ,
	|	ИтоговаяТаблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	СУММА(ИтоговаяТаблица.Тоннаж) КАК Тоннаж,
	|	СУММА(ИтоговаяТаблица.Наценка) КАК Наценка,
	|	ИтоговаяТаблица.GUID КАК GUID
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.Маршрут = &Маршрут
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.Документ,
	|	ИтоговаяТаблица.GUID,
	|	ИтоговаяТаблица.ДокументОтгрузки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	ДокументОтгрузки";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ШапкаДокумента = ПакетРезультатов.Получить(3).Выгрузить();
	ПерваяСтрока = ШапкаДокумента.Получить(0);
	ЗаполнитьЗначенияСвойств(ЗаполняемыйОбъект, ПерваяСтрока);
	
	ЗаполняемыйОбъект.Рейсы.Загрузить(ПакетРезультатов.Получить(4).Выгрузить());
	ЗаполняемыйОбъект.СоставыРейсов.Загрузить(ПакетРезультатов.Получить(5).Выгрузить());
	ЗаполняемыйОбъект.ДокументыМаршрута.Загрузить(ПакетРезультатов.Получить(6).Выгрузить());
	
	// Дорабатываем то, что нельзя сделать в запросе
	НомерВРейсе = 0;
	ПредыдущийРейс = 0;
	
	Для Каждого СтрокаСоставаРейса из ЗаполняемыйОбъект.СоставыРейсов цикл
		
		Если СтрокаСоставаРейса.Рейс <> ПредыдущийРейс тогда
			НомерВРейсе = 0;
		КонецЕсли;
		
		НомерВРейсе = НомерВРейсе + 1;
		СтрокаСоставаРейса.НомерВРейсе = НомерВРейсе;
		
		СтруктураПоиска = Новый Структура("GUID", СтрокаСоставаРейса.GUID);
		
		АдресJSON = "";
		НайденыеСтроки = ЗаполняемыйОбъект.ДокументыМаршрута.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаДокумент из НайденыеСтроки цикл
			
			Если ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") тогда
				АдресJSON = СтрокаДокумент.Документ.АдресДоставкиJSON;
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.ДанныеАдресаДоставкиJSON(АдресJSON, ЗаполняемыйОбъект.Дата);
		
		СтрокаСоставаРейса.АдресJSON = АдресJSON;
		
		Если НЕ ДанныеАдреса = Неопределено тогда
			СтрокаСоставаРейса.АдресПредставление = ДанныеАдреса.АдресДоставки;
		КонецЕсли;
		
		ПредыдущийРейс = СтрокаСоставаРейса.Рейс;
		
	КонецЦикла;
	
	Для Каждого СтрокаРейс из ЗаполняемыйОбъект.Рейсы цикл
		
		СтрокаРейс.РейсПредставление = "Рейс №" + Строка(СтрокаРейс.Рейс);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДокументыОтгрузки(ЗаполняемыйОбъект, Знач ПроводитьДокумент = Истина)
	
	Если ТипЗнч(ЗаполняемыйОбъект) <> Тип("ДокументОбъект.МаршрутныйЛист") тогда
		ПроводитьДокумент = Ложь;
		СохранятьДокумент = Ложь;
	Иначе
		СохранятьДокумент = Истина;
		Если ЗаполняемыйОбъект.Проведен тогда
			ЗаполняемыйОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	//Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ОписаниеОшибокПроведения");
	
	//ОбластьШапка             = Макет.ПолучитьОбласть("ШапкаГрупповоеСозданиеДокументов");
	//ОбластьГруппаОрганизация = Макет.ПолучитьОбласть("ГруппаОрганизация");
	//ОбластьГруппаОшибки      = Макет.ПолучитьОбласть("ГруппаОшибки");
	//ОбластьГруппаИнформация  = Макет.ПолучитьОбласть("ГруппаИнформация");
	//ОбластьСсылка            = Макет.ПолучитьОбласть("Ссылка");
	//ОбластьТекст1            = Макет.ПолучитьОбласть("ТекстПервогоУровня");
	//ОбластьТекст2            = Макет.ПолучитьОбласть("ТекстВторогоУровня");
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("ПопытокСоздатьДокументов"      , 0);
	РезультатОбработки.Вставить("НеУдалосьСоздатьДокументов"    , 0);
	РезультатОбработки.Вставить("ПопытокПровестиДокументов"     , 0);
	РезультатОбработки.Вставить("НеУдалосьПровестиДокументов"   , 0);
	РезультатОбработки.Вставить("ВМаршрутномЛистеЕстьРеализации", Ложь);
	
	Если СохранятьДокумент тогда
		Если ЗаполняемыйОбъект.ЭтоНовый() тогда
			ЗаполняемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			Если ЗаполняемыйОбъект.Проведен И ПроводитьДокумент тогда
				ЗаполняемыйОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДокументов = ЗаполняемыйОбъект.ДокументыМаршрута.Выгрузить();
	ТаблицаДокументов.Свернуть("Документ, ДокументОтгрузки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокументов.Документ КАК Документ.СчетНаОплатуПокупателю) КАК ДокументСчет,
	|	ВЫРАЗИТЬ(ТаблицаДокументов.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК ДокументРеализация
	|ПОМЕСТИТЬ ДокументыСчетИРеализация
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСчетИРеализация.ДокументСчет КАК ДокументСчет,
	|	ДокументыСчетИРеализация.ДокументРеализация КАК ДокументРеализация,
	|	СчетНаОплатуПокупателюТовары.НоменклатураГосЗакупок КАК НоменклатураГосЗакупок,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПокупателюТовары.НоменклатураГосЗакупок.ЕдиницаИзмеренияГосЗакупок КАК ЕдиницаИзмеренияГосЗакупок,
	|	СчетНаОплатуПокупателюТовары.КоэффициентГосЗакупок КАК КоэффициентГосЗакупок,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.Количество КАК Количество,
	|	СчетНаОплатуПокупателюТовары.КоличествоГосЗакупок КАК КоличествоГосЗакупок,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.ЦенаГосЗакупок КАК ЦенаГосЗакупок
	|ПОМЕСТИТЬ ТоварыСчетаНаОплату
	|ИЗ
	|	ДокументыСчетИРеализация КАК ДокументыСчетИРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|		ПО ДокументыСчетИРеализация.ДокументСчет = СчетНаОплатуПокупателюТовары.Ссылка
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка В (ДокументыСчетИРеализация.ДокументСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСчетИРеализация.ДокументСчет КАК ДокументСчет,
	|	ДокументыСчетИРеализация.ДокументРеализация КАК ДокументРеализация,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.НоменклатураГосЗакупок КАК НоменклатураГосЗакупок,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмеренияГосЗакупок КАК ЕдиницаИзмеренияГосЗакупок,
	|	РеализацияТоваровУслугТовары.КоэффициентГосЗакупок КАК КоэффициентГосЗакупок,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Коэффициент КАК Коэффициент,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.КоличествоГосЗакупок КАК КоличествоГосЗакупок,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.ЦенаГосЗакупок КАК ЦенаГосЗакупок
	|ПОМЕСТИТЬ ТоварыРеализацииТоваров
	|ИЗ
	|	ДокументыСчетИРеализация КАК ДокументыСчетИРеализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ДокументыСчетИРеализация.ДокументРеализация = РеализацияТоваровУслугТовары.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В (ДокументыСчетИРеализация.ДокументРеализация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ДокументСчет, ТоварыРеализацииТоваров.ДокументСчет) КАК ДокументСчет,
	|	ЕСТЬNULL(ЕСТЬNULL(ТоварыСчетаНаОплату.ДокументРеализация, ТоварыРеализацииТоваров.ДокументРеализация), ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК ДокументРеализация,
	|	ЕСТЬNULL(ТоварыРеализацииТоваров.НоменклатураГосЗакупок, ТоварыСчетаНаОплату.НоменклатураГосЗакупок) КАК НоменклатураГосЗакупок,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ЕдиницаИзмеренияГосЗакупок, ТоварыРеализацииТоваров.ЕдиницаИзмеренияГосЗакупок) КАК ЕдиницаИзмеренияГосЗакупок,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.КоэффициентГосЗакупок, ТоварыРеализацииТоваров.КоэффициентГосЗакупок) КАК КоэффициентГосЗакупок,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.Номенклатура, ТоварыРеализацииТоваров.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ЕдиницаИзмерения, ТоварыРеализацииТоваров.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТоварыРеализацииТоваров.Коэффициент, 1) КАК Коэффициент,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.СтавкаНДС, ТоварыРеализацииТоваров.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ТоварыСчетаНаОплату.Количество, 0) - ЕСТЬNULL(ТоварыРеализацииТоваров.Количество, 0)) КАК Количество,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.КоличествоГосЗакупок, 0) - ЕСТЬNULL(ТоварыРеализацииТоваров.КоличествоГосЗакупок, 0) КАК КоличествоГосЗакупок,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.Цена, ТоварыРеализацииТоваров.Цена) КАК Цена,
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ЦенаГосЗакупок, ТоварыРеализацииТоваров.ЦенаГосЗакупок) КАК ЦенаГосЗакупок
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ТоварыСчетаНаОплату КАК ТоварыСчетаНаОплату
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыРеализацииТоваров КАК ТоварыРеализацииТоваров
	|		ПО ТоварыСчетаНаОплату.ДокументСчет = ТоварыРеализацииТоваров.ДокументСчет
	|			И ТоварыСчетаНаОплату.НоменклатураГосЗакупок = ТоварыРеализацииТоваров.НоменклатураГосЗакупок
	|			И ТоварыСчетаНаОплату.Номенклатура = ТоварыРеализацииТоваров.Номенклатура
	|			И ТоварыСчетаНаОплату.Цена = ТоварыРеализацииТоваров.Цена
	|			И ТоварыСчетаНаОплату.ЦенаГосЗакупок = ТоварыРеализацииТоваров.ЦенаГосЗакупок
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ТоварыРеализацииТоваров.НоменклатураГосЗакупок, ТоварыСчетаНаОплату.НоменклатураГосЗакупок),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.СтавкаНДС, ТоварыРеализацииТоваров.СтавкаНДС),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.Цена, ТоварыРеализацииТоваров.Цена),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.Номенклатура, ТоварыРеализацииТоваров.Номенклатура),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ЕдиницаИзмеренияГосЗакупок, ТоварыРеализацииТоваров.ЕдиницаИзмеренияГосЗакупок),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ЕдиницаИзмерения, ТоварыРеализацииТоваров.ЕдиницаИзмерения),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ДокументСчет, ТоварыРеализацииТоваров.ДокументСчет),
	|	ЕСТЬNULL(ЕСТЬNULL(ТоварыСчетаНаОплату.ДокументРеализация, ТоварыРеализацииТоваров.ДокументРеализация), ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)),
	|	ЕСТЬNULL(ТоварыРеализацииТоваров.Коэффициент, 1),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.КоэффициентГосЗакупок, ТоварыРеализацииТоваров.КоэффициентГосЗакупок),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.ЦенаГосЗакупок, ТоварыРеализацииТоваров.ЦенаГосЗакупок),
	|	ЕСТЬNULL(ТоварыСчетаНаОплату.КоличествоГосЗакупок, 0) - ЕСТЬNULL(ТоварыРеализацииТоваров.КоличествоГосЗакупок, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.ДокументРеализация КАК ДокументРеализация,
	|	ИтоговаяТаблица.ДокументСчет КАК ДокументСчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.Товары) КАК ВидОперации,
	|	ИтоговаяТаблица.ДокументСчет.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями) КАК СчетУчетаРасчетовСКонтрагентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным) КАК СчетУчетаРасчетовПоАвансам,
	|	ИтоговаяТаблица.ДокументСчет КАК СчетНаОплатуПокупателю,
	|	ИтоговаяТаблица.ДокументСчет.Дата КАК Дата,
	|	ИтоговаяТаблица.ДокументСчет.Организация КАК Организация,
	|	ИтоговаяТаблица.ДокументСчет.Склад КАК Склад,
	|	ИтоговаяТаблица.ДокументСчет.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ИтоговаяТаблица.ДокументСчет.ТипЦен КАК ТипЦен,
	|	ИтоговаяТаблица.ДокументСчет.СтруктурнаяЕдиница КАК БанковскийСчетОрганизации,
	|	ИтоговаяТаблица.ДокументСчет.Контрагент КАК Контрагент,
	|	ИтоговаяТаблица.ДокументСчет.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ИтоговаяТаблица.ДокументСчет.Грузополучатель КАК Грузополучатель,
	|	ИтоговаяТаблица.ДокументСчет.Грузоотправитель КАК Грузоотправитель,
	|	ИтоговаяТаблица.ДокументСчет.ПеревозкаАвтотранспортом КАК ПеревозкаАвтотранспортом,
	|	ИтоговаяТаблица.ДокументСчет.ВремяЛогистикиНачало КАК ВремяЛогистикиНачало,
	|	ИтоговаяТаблица.ДокументСчет.ВремяЛогистикиОкончание КАК ВремяЛогистикиОкончание,
	|	ИтоговаяТаблица.ДокументСчет.АдресДоставки КАК АдресДоставки,
	|	ВЫРАЗИТЬ(ИтоговаяТаблица.ДокументСчет.АдресДоставкиJSON КАК СТРОКА(1024)) КАК АдресДоставкиJSON,
	|	ИтоговаяТаблица.ДокументСчет.Ответственный КАК Ответственный,
	|	ВЫРАЗИТЬ(ИтоговаяТаблица.ДокументСчет.Комментарий КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.ДокументРеализация,
	|	ИтоговаяТаблица.ДокументСчет,
	|	ВЫРАЗИТЬ(ИтоговаяТаблица.ДокументСчет.Комментарий КАК СТРОКА(1000)),
	|	ВЫРАЗИТЬ(ИтоговаяТаблица.ДокументСчет.АдресДоставкиJSON КАК СТРОКА(1024)),
	|	ИтоговаяТаблица.ДокументСчет.Дата,
	|	ИтоговаяТаблица.ДокументСчет.Организация,
	|	ИтоговаяТаблица.ДокументСчет.Склад,
	|	ИтоговаяТаблица.ДокументСчет.ТипЦен,
	|	ИтоговаяТаблица.ДокументСчет.СтруктурнаяЕдиница,
	|	ИтоговаяТаблица.ДокументСчет.Контрагент,
	|	ИтоговаяТаблица.ДокументСчет.Грузополучатель,
	|	ИтоговаяТаблица.ДокументСчет.Грузоотправитель,
	|	ИтоговаяТаблица.ДокументСчет.ПеревозкаАвтотранспортом,
	|	ИтоговаяТаблица.ДокументСчет.ДоговорКонтрагента,
	|	ИтоговаяТаблица.ДокументСчет.ВремяЛогистикиНачало,
	|	ИтоговаяТаблица.ДокументСчет.ВремяЛогистикиОкончание,
	|	ИтоговаяТаблица.ДокументСчет.АдресДоставки,
	|	ИтоговаяТаблица.ДокументСчет.Ответственный,
	|	ИтоговаяТаблица.ДокументСчет.СуммаВключаетНДС,
	|	ИтоговаяТаблица.ДокументСчет.ВалютаДокумента,
	|	ИтоговаяТаблица.ДокументСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.ДокументСчет КАК ДокументСчет,
	|	ИтоговаяТаблица.ДокументРеализация КАК ДокументРеализация,
	|	ИтоговаяТаблица.НоменклатураГосЗакупок КАК НоменклатураГосЗакупок,
	|	ИтоговаяТаблица.ЕдиницаИзмеренияГосЗакупок КАК ЕдиницаИзмеренияГосЗакупок,
	|	ИтоговаяТаблица.КоэффициентГосЗакупок КАК КоэффициентГосЗакупок,
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИтоговаяТаблица.Коэффициент КАК Коэффициент,
	|	ИтоговаяТаблица.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ИтоговаяТаблица.Количество) КАК Количество,
	|	ИтоговаяТаблица.КоличествоГосЗакупок КАК КоличествоГосЗакупок,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.ЦенаГосЗакупок КАК ЦенаГосЗакупок
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|ГДЕ
	|	ИтоговаяТаблица.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.ДокументСчет,
	|	ИтоговаяТаблица.ДокументРеализация,
	|	ИтоговаяТаблица.НоменклатураГосЗакупок,
	|	ИтоговаяТаблица.Номенклатура,
	|	ИтоговаяТаблица.Цена,
	|	ИтоговаяТаблица.ЕдиницаИзмерения,
	|	ИтоговаяТаблица.ЕдиницаИзмеренияГосЗакупок,
	|	ИтоговаяТаблица.КоэффициентГосЗакупок,
	|	ИтоговаяТаблица.Коэффициент,
	|	ИтоговаяТаблица.СтавкаНДС,
	|	ИтоговаяТаблица.КоличествоГосЗакупок,
	|	ИтоговаяТаблица.ЦенаГосЗакупок";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ДокументыКСозданиюОбновлению = ПакетЗапросов.Получить(4).Выбрать();
	РелазацииКПроведению = Новый Массив;
	ТоварыДокументов = ПакетЗапросов.Получить(5).Выгрузить();
	СчетаФактурыКСозданиюОбновлению = Новый Соответствие;
	
	Пока ДокументыКСозданиюОбновлению.Следующий() цикл
		
		Если ЗначениеЗаполнено(ДокументыКСозданиюОбновлению.ДокументРеализация) тогда
			ДокументОбъект = ДокументыКСозданиюОбновлению.ДокументРеализация.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		// Перед началом обработки узнаем есть ли строки табличной части "Товары",
		// документа "РеализацияТоваровУслуг" которые необходимо откорректировать
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ДокументСчет", ДокументыКСозданиюОбновлению.ДокументСчет);
		СтрокиТовараКИзменению = ТоварыДокументов.НайтиСтроки(СтруктураПоиска);
		
		// Снимаем с проведения документ "РеализацияТоваровУслуг", если его нужно откорректировать,
		// если же корректировка документа не нужна и документ "РеализацияТоваровУслуг" не проведен, то 
		// добавялем его в массив документов к проведению и продолжаем цикл (переход к след. документу)
		Если НЕ ДокументОбъект.ЭтоНовый() тогда
			Если СтрокиТовараКИзменению.Количество() = 0 тогда
				Если ДокументОбъект.Проведен тогда
					
					// Проверяем наличие проведенной счет-фактуры
					СоздатьОбновитьСчетФактуру = Ложь;
					СчетФактура = Неопределено;
					Если ДокументОбъект.Проведен тогда
						СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОбъект.Ссылка);
						Если СчетФактура = Неопределено тогда
							СоздатьОбновитьСчетФактуру = Истина;
						Иначе
							Если НЕ СчетФактура.Проведен тогда
								СоздатьОбновитьСчетФактуру = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если СоздатьОбновитьСчетФактуру тогда
						СчетаФактурыКСозданиюОбновлению.Вставить(ДокументОбъект.Ссылка, СчетФактура);
					КонецЕсли;
					
					Продолжить;
				Иначе
					РелазацииКПроведению.Добавить(ДокументОбъект.Ссылка);
					Продолжить;
				КонецЕсли;
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЕсли;
		
		// Отмечаем попытки создания только тогда, когда нужна корректировка/создание документа "РеализацияТоваровУслуг"
		РезультатОбработки.ПопытокСоздатьДокументов = РезультатОбработки.ПопытокСоздатьДокументов + 1;
		
		// Заполняем шапку документа "РеализацияТоваровУслуг"
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДокументыКСозданиюОбновлению);
		
		ЭтоДокументПоставкиГосЗакупок = ГосЗакупкиСервер.ЭтоДоговорПоставкиГосЗакупок(ДокументОбъект.ДоговорКонтрагента);
		
		// Заполним раздел Подписи
		Документы.РеализацияТоваровУслуг.ЗаполнитьРазделПодписи(ДокументОбъект, ПользователиКлиентСервер.ТекущийПользователь());
		
		// Заполняем табличную часть "Товары" документа "РеализацияТоваровУслуг"
		Для Каждого СтрокаТовар из СтрокиТовараКИзменению цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НоменклатураГосЗакупок", СтрокаТовар.НоменклатураГосЗакупок);
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТовар.Номенклатура);
			СтруктураПоиска.Вставить("ЦенаГосЗакупок", СтрокаТовар.ЦенаГосЗакупок);
			СтруктураПоиска.Вставить("Цена", СтрокаТовар.Цена);
			
			СтрокиТоварыДокумента = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТоварыДокумента.Количество() = 0 тогда
				СтрокаТоварыДокумента = ДокументОбъект.Товары.Добавить();
			Иначе
				СтрокаТоварыДокумента = СтрокиТоварыДокумента.Получить(0);
			КонецЕсли;
			
			ПоляДляЗаполненияБезПроверок = "Номенклатура,
			                               |НоменклатураГосЗакупок,
			                               |Цена,
			                               |ЦенаГосЗакупок,
			                               |ЕдиницаИзмерения,
			                               |ЕдиницаИзмеренияГосЗакупок,
			                               |Коэффициент,
			                               |КоэффициентГосЗакупок,
			                               |СтавкаНДС";
			
			ЗаполнитьЗначенияСвойств(СтрокаТоварыДокумента, СтрокаТовар, ПоляДляЗаполненияБезПроверок);
			
			СтрокаТоварыДокумента.Количество = СтрокаТоварыДокумента.Количество + СтрокаТовар.Количество;
			СтрокаТоварыДокумента.КоличествоГосЗакупок = СтрокаТоварыДокумента.КоличествоГосЗакупок + СтрокаТовар.КоличествоГосЗакупок;
			
			Если СтрокаТоварыДокумента.Количество <= 0 тогда
				ДокументОбъект.Товары.Удалить(ДокументОбъект.Товары.Индекс(СтрокаТоварыДокумента));
			Иначе
				Если ЭтоДокументПоставкиГосЗакупок тогда
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧастиГосЗакупок(СтрокаТоварыДокумента, 0);
				Иначе
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТоварыДокумента, 0);
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТоварыДокумента, ДокументОбъект.СуммаВключаетНДС);
			КонецЕсли;
			
		КонецЦикла;
		
		// Если в табличной части "товары" документа "РеализацияТоваровУслуг", нет товаров,
		// то и создавать документ не будем.
		// Или пометим на удаление, если документ "РеализацияТоваровУслуг" уже существует.
		Если ДокументОбъект.Товары.Количество() = 0 тогда
			
			Если НЕ ДокументОбъект.ЭтоНовый() тогда
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		// Заполним раздел "Транспортная логистика" (Для полноценного заполнения нужна заполненная
		// табличная част "Товары")
		ДанныеТранспортнойЛогистики = ТранспортнаяЛогистикаСервер.ДанныеТранспортнойЛогистики(ДокументОбъект,
		                                                                                      Неопределено,
		                                                                                      ДокументыКСозданиюОбновлению.ДокументСчет);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеТранспортнойЛогистики);
		
		// Заполним счета учетов в табличных частях документа "РеализацияТоваровУслуг"
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ДокументОбъект, РежимЗаписиДокумента.Проведение);
		
		// Пытаемся записать документ "РеализацияТоваровУслуг"
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			РезультатОбработки.НеУдалосьСоздатьДокументов = РезультатОбработки.НеУдалосьСоздатьДокументов + 1;
		КонецПопытки;
		
		// Если документ "РеализацияТоваровУслуг" записан, то укажем его в табличной части "ДокументыМаршрута"
		// документа "МаршрутныйЛист"
		Если НЕ ДокументОбъект.ЭтоНовый() тогда
			
			РелазацииКПроведению.Добавить(ДокументОбъект.Ссылка);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Документ", ДокументыКСозданиюОбновлению.ДокументСчет);
			
			НайденыеСтрокиДокументов = ЗаполняемыйОбъект.ДокументыМаршрута.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДокумент из НайденыеСтрокиДокументов цикл
				Если СтрокаДокумент.ДокументОтгрузки <> ДокументОбъект.Ссылка тогда
					СтрокаДокумент.ДокументОтгрузки = ДокументОбъект.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РелазацияКПроведению из РелазацииКПроведению цикл
		
		РезультатОбработки.ПопытокПровестиДокументов = РезультатОбработки.ПопытокПровестиДокументов + 1;
		
		ДокументОбъект = РелазацияКПроведению.ПолучитьОбъект();
		
		// Пытаемся провести документ "РеализацияТоваровУслуг"
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			РезультатОбработки.НеУдалосьПровестиДокументов = РезультатОбработки.НеУдалосьПровестиДокументов + 1;
			Сообщить("Не удалось провести документ " + ДокументОбъект);
		КонецПопытки;
		
		СоздатьОбновитьСчетФактуру = Ложь;
		СчетФактура = Неопределено;
		Если ДокументОбъект.Проведен тогда
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОбъект.Ссылка);
			Если СчетФактура = Неопределено тогда
				СоздатьОбновитьСчетФактуру = Истина;
			Иначе
				Если НЕ СчетФактура.Проведен тогда
					СоздатьОбновитьСчетФактуру = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СоздатьОбновитьСчетФактуру тогда
			СчетаФактурыКСозданиюОбновлению.Вставить(ДокументОбъект.Ссылка, СчетФактура);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение из СчетаФактурыКСозданиюОбновлению цикл
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) тогда
			
			ПараметрыСозданияСФ = Новый Структура;
			ПараметрыСозданияСФ.Вставить("Основание", КлючИЗначение.Ключ);
			ПараметрыСозданияСФ.Вставить("СтруктураОтбора", Неопределено);
			ПараметрыСозданияСФ.Вставить("УникальныйИдентификатор", Неопределено);
			ПараметрыСозданияСФ.Вставить("КодВидаОперации", "01");
			ПараметрыСозданияСФ.Вставить("ЭтоУниверсальныйДокумент", Истина);

			РезультатСозданияСФ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСозданияСФ);
			Если РезультатСозданияСФ = Неопределено тогда
				Сообщить("На основании документа " + КлючИЗначение.Ключ + " не выписана счет-фактура!");
			КонецЕСли;
		Иначе
			ДокументОбъект = КлючИЗначение.Значение.ПолучитьОбъект();
			Если ДокументОбъект.ПометкаУдаления тогда
				ДокументОбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("При попытке провести счет-фактуру на основании " + КлючИЗначение.Ключ + " произошла ошика. Счет-фактура не проведена!");
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ДокументыМаршрута = ЗаполняемыйОбъект.ДокументыМаршрута.Выгрузить();
	ДокументыМаршрута.Свернуть("ДокументОтгрузки");
	
	Если ТипЗнч(ЗаполняемыйОбъект) = Тип("ДокументОбъект.МаршрутныйЛист") тогда
		Если ДокументыМаршрута.Количество() > 1 тогда
			РезультатОбработки.ВМаршрутномЛистеЕстьРеализации = Истина;
		Иначе
			Если ДокументыМаршрута.Количество() = 1 тогда
				Если ЗначениеЗаполнено(ДокументыМаршрута.Получить(0).ДокументОтгрузки) тогда
					РезультатОбработки.ВМаршрутномЛистеЕстьРеализации = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Создаем документ "ДвижениеМногооборотнойТары", на основании маршрутного листа
	ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Передача;
	ДвиженияМногооборотнойТары = МногооборотнаяТараСервер.НайтиДвиженияМногооборотнойТарыНаОсновании(ЗаполняемыйОбъект.Ссылка, ВидОперации);
	Если ДвиженияМногооборотнойТары = Неопределено тогда
		ДокументОбъект = Документы.ДвижениеМногооборотнойТары.СоздатьДокумент();
	Иначе
		ДокументОбъект = ДвиженияМногооборотнойТары.Получить(0).ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		ДокументОбъект,
		ЗаполняемыйОбъект,
		"Дата,
		|Ответственный,
		|Водитель,
		|Автомобиль,
		|Маршрут"
	);
	
	ДокументОбъект.ДокументОснование          = ЗаполняемыйОбъект.Ссылка;
	ДокументОбъект.ВидОперации                = ВидОперации;
	ДокументОбъект.Комментарий                = "Автоматическое создание документа. Основание: Проведение документа "+ЗаполняемыйОбъект.Ссылка;
	ДокументОбъект.ПометкаУдаления            = Ложь;
	
	ДокументОбъект.НаВодителя.Очистить();
	ДокументОбъект.Грузополучатели.Очистить();
	
	ДокументОбъект.ЗаполнитьТабличныеЧасти(Истина, Истина);
	
	// Пытаемся провести документ "ДвижениеМногооборотнойТары"
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		РезультатОбработки.НеУдалосьПровестиДокументов = РезультатОбработки.НеУдалосьПровестиДокументов + 1;
		Сообщить("Не удалось провести документ " + ДокументОбъект);
	КонецПопытки;
	
	// Сохраняем/проводим текущий документ
	Если СохранятьДокумент тогда
		Если РезультатОбработки.НеУдалосьПровестиДокументов = 0 И
			РезультатОбработки.НеУдалосьСоздатьДокументов = 0 И
			РезультатОбработки.ВМаршрутномЛистеЕстьРеализации И
			ПроводитьДокумент тогда
			
			Попытка
				ЗаполняемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Документ " + ЗаполняемыйОбъект + " не проведен!");
			КонецПопытки;
			
		Иначе
			Попытка
				ЗаполняемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("Документ " + ЗаполняемыйОбъект + " не записан!");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 11, 30);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры
