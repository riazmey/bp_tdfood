Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыДвиженийМногооборотнойТары.Передача")
	 ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыДвиженийМногооборотнойТары.Прием") Тогда
		
		ПроверяемыеРеквизиты.Добавить("Водитель");
		ПроверяемыеРеквизиты.Добавить("Автомобиль");
		
		Если ЗначениеЗаполнено(ДокументОснование) тогда
			ПроверяемыеРеквизиты.Добавить("Маршрут");
		КонецЕсли;
		
		Если НаВодителя.Количество() = 0 И Грузополучатели.Количество() = 0 тогда
			ПроверяемыеРеквизиты.Добавить("НаВодителя");
			ПроверяемыеРеквизиты.Добавить("Грузополучатели");
		КонецЕсли;
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыДвиженийМногооборотнойТары.Передача") тогда
			ПроверяемыеРеквизиты.Добавить("Грузополучатели.Документ");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыДвиженийМногооборотнойТары.Перемещение") Тогда
		
		ПроверяемыеРеквизиты.Добавить("Водитель");
		ПроверяемыеРеквизиты.Добавить("ВодительПолучатель");
		ПроверяемыеРеквизиты.Добавить("НаВодителя");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.Базар_ВидыДвиженийМногооборотнойТары.ВозвратПоставщику") Тогда
		
		ПроверяемыеРеквизиты.Добавить("Поставщик");
		ПроверяемыеРеквизиты.Добавить("НаВодителя");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОшибкиПроведения = Неопределено;
	
	СчетаМТ = МногооборотнаяТараСервер.СчетаМногооборотнойТары();
	ВидНоменклатурыТары = ПредопределенныеЭлементыРасширенияСервер.ПредопределенноеЗначениеРасширения("Справочник", "ВидыНоменклатуры", "МногооборотнаяТара");
	
	Если НЕ МногооборотнаяТараСервер.ПредопределенныеСчетаУчетаМногооборотнойТарыЗаполнены(СчетаМТ) тогда
		ТекстСообщения = "Перед началом проведения документа, необходимо в " +
		                 "настройках установить предопределенные значения " +
		                 "счетов учета многооборотной тары:
		                 |     1. ""Многооборотная тара (остатки)"", с кодом: ""МногооборотнаяТараОстатки"";
		                 |     2. ""Задолженность многооборотной тары перед поставщиками"", с кодом: ""МногооборотнаяТараПоставщики"";
		                 |     3. ""Задолженность многооборотной тары водителями-экспедиторами"", с кодом: ""МногооборотнаяТараВодители"";
		                 |     4. ""Задолженность многооборотной тары контрагентами"", с кодом: ""МногооборотнаяТараКонтрагенты"".";
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПроведения,
			"Номер",
			ТекстСообщения,
			Неопределено
		);
		
	КонецЕсли;
	
	Если НЕ МногооборотнаяТараСервер.ПредопределенныеСчетаУчетаМногооборотнойТарыЗаполнены(СчетаМТ) тогда
		
		ТекстСообщения = "Перед началом проведения документа, необходимо в "+
		                 "настройках расширения установить ""Счет учета "+
		                 "многооборотной тары ""!";
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПроведения,
			"Номер",
			ТекстСообщения,
			Неопределено
		);
		
	КонецЕсли;
	
	// Подготовка таблицы остатков тары у водителя-экспедитора
	Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Перемещение тогда
		
		СчетаЗапасов = Новый Массив;
		СчетаЗапасов.Добавить(СчетаМТ.МногооборотнаяТараВодители);
		
		ВидыСубконто = Новый Массив;
		Для Каждого Субконто Из СчетаМТ.МногооборотнаяТараВодители.ВидыСубконто Цикл
			ВидыСубконто.Добавить(Субконто.ВидСубконто);
		КонецЦикла;
		
		Если Водитель = ВодительПолучатель тогда
			
			ТекстСообщения = "Нельзя производить перемещение многооборотной тары между одним и тем же водителем!";
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				ОшибкиПроведения,
				"Водитель",
				ТекстСообщения,
				Неопределено
			);
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОстатков", Дата);
		Запрос.УстановитьПараметр("Должник"     , Водитель.ФизическоеЛицо);
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("СчетаЗапасов", СчетаЗапасов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиНаСкладе.Организация КАК Организация,
		|	ОстаткиНаСкладе.Субконто2 КАК МногооборотнаяТара,
		|	СУММА(ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0)) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаЗапасов), &ВидыСубконто, Субконто1 = &Должник) КАК ОстаткиНаСкладе
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиНаСкладе.Организация,
		|	ОстаткиНаСкладе.Субконто2";
		
		ОстаткиТарыУВодителя = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	
	// Подготовка таблицы тары документа "ПоступленияТоваровУслуг"
	Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.ВозвратПоставщику
	   И ЗначениеЗаполнено(ДокументОснование)
	   И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда
		
		СчетаЗапасов = Новый Массив;
		СчетаЗапасов.Добавить(СчетаМТ.МногооборотнаяТараПоставщики);
		
		НомерСубконтоПоставщика = 1;
		НомерСубконтоДокумента = 1;
		НомерСубконтоМногооборотнаяТара = 1;
		СчетчикСубконто = 0;
		ВидыСубконто = Новый Массив;
		Для Каждого Субконто Из СчетаМТ.МногооборотнаяТараПоставщики.ВидыСубконто Цикл
			
			СчетчикСубконто = СчетчикСубконто + 1;
			
			Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ДокументОснование)) тогда
				НомерСубконтоДокумента = СчетчикСубконто;
			КонецЕсли;
			
			Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Поставщик)) тогда
				НомерСубконтоПоставщика = СчетчикСубконто;
			КонецЕсли;
			
			Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) тогда
				НомерСубконтоМногооборотнаяТара = СчетчикСубконто;
			КонецЕсли;
			
			ВидыСубконто.Добавить(Субконто.ВидСубконто);
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Дата));
		Запрос.УстановитьПараметр("Поставщик"   , Поставщик);
		Запрос.УстановитьПараметр("Документ"    , ДокументОснование.Ссылка);
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		Запрос.УстановитьПараметр("СчетаЗапасов", СчетаЗапасов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиНаСкладе.Организация КАК Организация,
		|	ОстаткиНаСкладе.Субконто" + НомерСубконтоМногооборотнаяТара + " КАК МногооборотнаяТара,
		|	СУММА(ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстатокКт, 0)) КАК КоличествоОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатков,
		|			Счет В (&СчетаЗапасов),
		|			&ВидыСубконто,
		|			Субконто" + НомерСубконтоПоставщика + " = &Поставщик
		|				И Субконто" + НомерСубконтоДокумента + " = &Документ) КАК ОстаткиНаСкладе
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиНаСкладе.Организация,
		|	ОстаткиНаСкладе.Субконто" + НомерСубконтоМногооборотнаяТара + "";
		
		ОстаткиТарыПоДокументу = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого СтрокаНаВодителя Из НаВодителя Цикл
		
		// Проверяем остатки многооборотной тары у водителя-отправителя
		Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Перемещение тогда
			
			Фильтр = Новый Структура;
			Фильтр.Вставить("Организация"       , СтрокаНаВодителя.Организация);
			Фильтр.Вставить("МногооборотнаяТара", СтрокаНаВодителя.МногооборотнаяТара);
			НайденыеСтроки = ОстаткиТарыУВодителя.НайтиСтроки(Фильтр);
			
			Если НайденыеСтроки.Количество() > 0 тогда
				
				Остатки = НайденыеСтроки.Получить(0);
				Если Остатки.КоличествоОстаток < СтрокаНаВодителя.Количество тогда
					
					ТекстСообщения = "У водителя " + Строка(Водитель) +
					                 " остаток задолженности " +
					                 Строка(СтрокаНаВодителя.МногооборотнаяТара) +
					                 " составляет " + Остатки.КоличествоОстаток + " " +
					                 СтрокаНаВодителя.МногооборотнаяТара.ЕдиницаИзмерения +
					                 ", что превышает требуемое количество к перемещению!";
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						ОшибкиПроведения,
						"Водитель",
						ТекстСообщения,
						Неопределено
					);
					
				КонецЕсли;
			Иначе
				
				ТекстСообщения = "У водителя " + Строка(Водитель) +
				                 " отсутствует остаток тары " +
				                 Строка(СтрокаНаВодителя.МногооборотнаяТара) + "!";
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					ОшибкиПроведения,
					"Водитель",
					ТекстСообщения,
					Неопределено
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверяем наличие достаточного количества многооборотной тары
		// в документе-основания (ПоступлениеТоваровУслуг)
		Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.ВозвратПоставщику
		   И ЗначениеЗаполнено(ДокументОснование)
		   И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда
			
			Фильтр = Новый Структура;
			Фильтр.Вставить("Организация"       , СтрокаНаВодителя.Организация);
			Фильтр.Вставить("МногооборотнаяТара", СтрокаНаВодителя.МногооборотнаяТара);
			НайденыеСтроки = ОстаткиТарыПоДокументу.НайтиСтроки(Фильтр);
			
			Если НайденыеСтроки.Количество() > 0 тогда
				
				Остатки = НайденыеСтроки.Получить(0);
				Если Остатки.КоличествоОстаток < СтрокаНаВодителя.Количество тогда
					
					ТекстСообщения = "По документу-основанию " + Строка(ДокументОснование) +
					                 " остаток многооборотной тары " + Строка(СтрокаНаВодителя.МногооборотнаяТара) +
					                 " составляет " + Остатки.КоличествоОстаток + " " +
					                 СтрокаНаВодителя.МногооборотнаяТара.ЕдиницаИзмерения +
					                 ", что превышает требуемое количество к возврату!";
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						ОшибкиПроведения,
						"НаВодителя",
						ТекстСообщения,
						Неопределено
					);
					
				КонецЕсли;
			Иначе
				
				ТекстСообщения = "У документа-основанию " + Строка(ДокументОснование) +
				                 " отсутствует остаток тары " +
				                 Строка(СтрокаНаВодителя.МногооборотнаяТара) + "!";
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					ОшибкиПроведения,
					"НаВодителя",
					ТекстСообщения,
					Неопределено
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проводим документ, если нет ошибок
		Если ОшибкиПроведения = Неопределено тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Дата;
			Проводка.Организация  = СтрокаНаВодителя.Организация;
			Проводка.КоличествоДт = СтрокаНаВодителя.Количество;
			Проводка.КоличествоКт = СтрокаНаВодителя.Количество;
			Проводка.Содержание   = Строка(ВидОперации);
			
			Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Передача тогда
				Проводка.СчетДт = СчетаМТ.МногооборотнаяТараВодители;
				Проводка.СчетКт = СчетаМТ.МногооборотнаяТараОстатки;
				
			ИначеЕсли ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Прием тогда
				Проводка.СчетДт     = СчетаМТ.МногооборотнаяТараОстатки;
				Проводка.СчетКт     = СчетаМТ.МногооборотнаяТараВодители;
				
			ИначеЕсли ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Перемещение тогда
				Проводка.СчетДт     = СчетаМТ.МногооборотнаяТараВодители;
				Проводка.СчетКт     = СчетаМТ.МногооборотнаяТараВодители;
				
			ИначеЕсли ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.ВозвратПоставщику тогда
				Проводка.СчетДт     = СчетаМТ.МногооборотнаяТараПоставщики;
				Проводка.СчетКт     = СчетаМТ.МногооборотнаяТараОстатки;
				
			КонецЕсли;
			
			ЗначенияСубконто = Новый Массив;
			ЗначенияСубконто.Добавить(СтрокаНаВодителя.МногооборотнаяТара);
			
			Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Перемещение тогда
				
				ЗначенияСубконто.Добавить(Водитель.ФизическоеЛицо);
				
				Документы.ДвижениеМногооборотнойТары.ЗаполнитьПроводкуЗначениямиСубконто(
					Проводка.СчетКт,
					Проводка.СубконтоКт,
					ЗначенияСубконто
				);
				
				ЗначенияСубконто.Удалить(0);
				ЗначенияСубконто.Добавить(ВодительПолучатель.ФизическоеЛицо);
				
				Документы.ДвижениеМногооборотнойТары.ЗаполнитьПроводкуЗначениямиСубконто(
					Проводка.СчетДт,
					Проводка.СубконтоДт,
					ЗначенияСубконто
				);
				
			Иначе // Передача, Прием, ВозвратПоставщику
				
				Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.ВозвратПоставщику тогда
					ЗначенияСубконто.Добавить(Поставщик);
					Если ЗначениеЗаполнено(ДокументОснование) тогда
						ЗначенияСубконто.Добавить(ДокументОснование.Ссылка);
					КонецЕсли;
				Иначе // Передача, Прием
					ЗначенияСубконто.Добавить(Водитель.ФизическоеЛицо);
				КонецЕсли;
				
				Документы.ДвижениеМногооборотнойТары.ЗаполнитьПроводкуЗначениямиСубконто(
					Проводка.СчетДт,
					Проводка.СубконтоДт,
					ЗначенияСубконто
				);
				
				Документы.ДвижениеМногооборотнойТары.ЗаполнитьПроводкуЗначениямиСубконто(
					Проводка.СчетКт,
					Проводка.СубконтоКт,
					ЗначенияСубконто
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаГрузополучатель Из Грузополучатели Цикл
		
		// Проводим документ, если нет ошибок
		Если ОшибкиПроведения = Неопределено тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтрокаГрузополучатель.Организация;
			Проводка.КоличествоДт = СтрокаГрузополучатель.Количество;
			Проводка.КоличествоКт = СтрокаГрузополучатель.Количество;
			Проводка.Содержание   = Строка(ВидОперации);
			
			Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Передача тогда
				Проводка.СчетДт = СчетаМТ.МногооборотнаяТараКонтрагенты;
				Проводка.СчетКт = СчетаМТ.МногооборотнаяТараОстатки;
				
			ИначеЕсли ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Прием тогда
				Проводка.СчетДт     = СчетаМТ.МногооборотнаяТараОстатки;
				Проводка.СчетКт     = СчетаМТ.МногооборотнаяТараКонтрагенты;
				
			КонецЕсли;
			
			ЗначенияСубконто = Новый Массив;
			ЗначенияСубконто.Добавить(СтрокаГрузополучатель.Грузополучатель);
			ЗначенияСубконто.Добавить(СтрокаГрузополучатель.МногооборотнаяТара);
			ЗначенияСубконто.Добавить(СтрокаГрузополучатель.Документ);
			
			Документы.ДвижениеМногооборотнойТары.ЗаполнитьПроводкуЗначениямиСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				ЗначенияСубконто
			);
			
			Документы.ДвижениеМногооборотнойТары.ЗаполнитьПроводкуЗначениямиСубконто(
				Проводка.СчетКт,
				Проводка.СубконтоКт,
				ЗначенияСубконто
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПроведения, Отказ);
	
	Если НЕ Отказ тогда
		Движения.Хозрасчетный.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(ДокументОснование) тогда
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.МаршрутныйЛист") тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование, "Дата, Маршрут, Автомобиль, Водитель");
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда
			Поставщик = ДокументОснование.Контрагент;
		КонецЕсли;

	КонецЕсли;
	
	ФиксированноеВремяДокументов.УстановитьВремяНовогоДокумента(ЭтотОбъект, Ложь);
	ЗаполнитьТабличныеЧасти();
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧасти(ЗаполнитьТаблицуНаВодителя = Истина, ЗаполнитьТаблицуГрузополучетели = Истина) Экспорт
	
	Если НЕ ЗаполнитьТаблицуНаВодителя И НЕ ЗаполнитьТаблицуГрузополучетели тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.МаршрутныйЛист") тогда
		ЗаполнитьТабличныеЧастиНаОснованииМаршрутногоЛиста(ЗаполнитьТаблицуНаВодителя, ЗаполнитьТаблицуГрузополучетели);
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда
		ЗаполнитьТабличныеЧастиНаОснованииПоступленияТоваров();
		
	КонецЕСли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиНаОснованииМаршрутногоЛиста(ЗаполнитьТаблицуНаВодителя, ЗаполнитьТаблицуГрузополучетели)
	
	ВидНоменклатурыТары = ПредопределенныеЭлементыРасширенияСервер.ПредопределенноеЗначениеРасширения("Справочник", "ВидыНоменклатуры", "МногооборотнаяТара");
	
	Если НЕ ЗначениеЗаполнено(Маршрут) ИЛИ
		 НЕ ЗначениеЗаполнено(Водитель) ИЛИ
		 НЕ ЗначениеЗаполнено(Автомобиль) ИЛИ
		 НЕ ЗначениеЗаполнено(ВидНоменклатурыТары) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата"               , Дата);
	Запрос.УстановитьПараметр("Маршрут"            , Маршрут);
	Запрос.УстановитьПараметр("Водитель"           , Водитель);
	Запрос.УстановитьПараметр("Автомобиль"         , Автомобиль);
	Запрос.УстановитьПараметр("ВидНоменклатурыТары", ВидНоменклатурыТары);
	Запрос.УстановитьПараметр("ВидОперации"        , ВидОперации);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураМногооборотнаяТара.Ссылка КАК МногооборотнаяТара,
	|	НоменклатураМногооборотнаяТара.Номенклатура КАК Номенклатура,
	|	НоменклатураМногооборотнаяТара.КоличествоВМесте КАК КоличествоВМесте
	|ПОМЕСТИТЬ ВТ_КоличествоВМесте
	|ИЗ
	|	Справочник.Номенклатура.МногооборотнаяТара КАК НоменклатураМногооборотнаяТара
	|ГДЕ
	|	НоменклатураМногооборотнаяТара.Ссылка.ВидНоменклатуры = &ВидНоменклатурыТары
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураМногооборотнаяТара.Номенклатура,
	|	НоменклатураМногооборотнаяТара.КоличествоВМесте,
	|	НоменклатураМногооборотнаяТара.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортнаяЛогистикаДоставкаОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.Базар_ВидыДвиженийМногооборотнойТары.Передача)
	|			ТОГДА ТранспортнаяЛогистикаДоставкаОбороты.ДокументДвижения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|	КОНЕЦ КАК Документ,
	|	ТранспортнаяЛогистикаДоставкаОбороты.ТочкаМаршрута КАК Грузополучатель,
	|	ТранспортнаяЛогистикаДоставкаОбороты.ДокументДвижения.ДоговорКонтрагента.ОбособленныйУчетМногооботнойТары КАК ОбособленныйУчетМногооботнойТары,
	|	ВТ_КоличествоВМесте.МногооборотнаяТара КАК МногооборотнаяТара,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ВТ_КоличествоВМесте.КоличествоВМесте ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ ТранспортнаяЛогистикаДоставкаОбороты.КоличествоРасход / ВТ_КоличествоВМесте.КоличествоВМесте
	|			КОНЕЦ КАК ЧИСЛО(10, 0))) КАК Количество
	|ПОМЕСТИТЬ ВТ_МногооборотнаяТара
	|ИЗ
	|	РегистрНакопления.ТранспортнаяЛогистикаДоставка.Обороты(
	|			НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|			День,
	|			Маршрут = &Маршрут
	|				И Водитель = &Водитель
	|				И Автомобиль = &Автомобиль
	|				И ДокументДвижения ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_КоличествоВМесте.Номенклатура
	|					ИЗ
	|						ВТ_КоличествоВМесте КАК ВТ_КоличествоВМесте)) КАК ТранспортнаяЛогистикаДоставкаОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоВМесте КАК ВТ_КоличествоВМесте
	|		ПО ТранспортнаяЛогистикаДоставкаОбороты.Номенклатура = ВТ_КоличествоВМесте.Номенклатура
	|ГДЕ
	|	ТранспортнаяЛогистикаДоставкаОбороты.КоличествоРасход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортнаяЛогистикаДоставкаОбороты.Организация,
	|	ТранспортнаяЛогистикаДоставкаОбороты.ТочкаМаршрута,
	|	ТранспортнаяЛогистикаДоставкаОбороты.ДокументДвижения.ДоговорКонтрагента.ОбособленныйУчетМногооботнойТары,
	|	ВТ_КоличествоВМесте.МногооборотнаяТара,
	|	ВЫБОР
	|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.Базар_ВидыДвиженийМногооборотнойТары.Передача)
	|			ТОГДА ТранспортнаяЛогистикаДоставкаОбороты.ДокументДвижения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МногооборотнаяТара.Организация КАК Организация,
	|	ВТ_МногооборотнаяТара.МногооборотнаяТара КАК МногооборотнаяТара,
	|	СУММА(ВТ_МногооборотнаяТара.Количество) КАК Количество
	|ИЗ
	|	ВТ_МногооборотнаяТара КАК ВТ_МногооборотнаяТара
	|ГДЕ
	|	ВТ_МногооборотнаяТара.ОбособленныйУчетМногооботнойТары = ЛОЖЬ
	|	И ВТ_МногооборотнаяТара.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МногооборотнаяТара.Организация,
	|	ВТ_МногооборотнаяТара.МногооборотнаяТара
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МногооборотнаяТара.Организация КАК Организация,
	|	ВТ_МногооборотнаяТара.Грузополучатель КАК Грузополучатель,
	|	ВТ_МногооборотнаяТара.Документ КАК Документ,
	|	ВТ_МногооборотнаяТара.МногооборотнаяТара КАК МногооборотнаяТара,
	|	СУММА(ВТ_МногооборотнаяТара.Количество) КАК Количество
	|ИЗ
	|	ВТ_МногооборотнаяТара КАК ВТ_МногооборотнаяТара
	|ГДЕ
	|	ВТ_МногооборотнаяТара.ОбособленныйУчетМногооботнойТары = ИСТИНА
	|	И ВТ_МногооборотнаяТара.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МногооборотнаяТара.Организация,
	|	ВТ_МногооборотнаяТара.Грузополучатель,
	|	ВТ_МногооборотнаяТара.МногооборотнаяТара,
	|	ВТ_МногооборотнаяТара.Документ";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет(); // 2 - на водителя, 3 - грузополучатели
	
	Если ЗаполнитьТаблицуНаВодителя тогда
		НаВодителя.Загрузить(ПакетЗапроса.Получить(2).Выгрузить());
	КонецЕсли;
	
	Если ЗаполнитьТаблицуГрузополучетели тогда
		Грузополучатели.Загрузить(ПакетЗапроса.Получить(3).Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиНаОснованииПоступленияТоваров()
	
	Если НЕ ЗначениеЗаполнено(Поставщик) ИЛИ
		 НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаМТ = МногооборотнаяТараСервер.СчетаМногооборотнойТары();
	Если НЕ МногооборотнаяТараСервер.ПредопределенныеСчетаУчетаМногооборотнойТарыЗаполнены(СчетаМТ) тогда
		Возврат;
	КонецЕсли;
	
	СчетаЗапасов = Новый Массив;
	СчетаЗапасов.Добавить(СчетаМТ.МногооборотнаяТараПоставщики);
	
	НомерСубконтоПоставщика = 0;
	НомерСубконтоДокумента = 0;
	НомерСубконтоМногооборотнаяТара = 0;
	СчетчикСубконто = 0;
	ВидыСубконто = Новый Массив;
	Для Каждого Субконто Из СчетаМТ.МногооборотнаяТараПоставщики.ВидыСубконто Цикл
		
		СчетчикСубконто = СчетчикСубконто + 1;
		
		Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ДокументОснование)) тогда
			НомерСубконтоДокумента = СчетчикСубконто;
		КонецЕсли;
		
		Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Поставщик)) тогда
			НомерСубконтоПоставщика = СчетчикСубконто;
		КонецЕсли;
		
		Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) тогда
			НомерСубконтоМногооборотнаяТара = СчетчикСубконто;
		КонецЕсли;
		
		ВидыСубконто.Добавить(Субконто.ВидСубконто);
		
	КонецЦикла;
	
	Если НомерСубконтоПоставщика = 0
	 ИЛИ НомерСубконтоДокумента = 0
	 ИЛИ НомерСубконтоМногооборотнаяТара = 0 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Дата));
	Запрос.УстановитьПараметр("Поставщик"   , Поставщик);
	Запрос.УстановитьПараметр("Документ"    , ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаЗапасов", СчетаЗапасов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиНаСкладе.Организация КАК Организация,
	|	ОстаткиНаСкладе.Субконто" + НомерСубконтоМногооборотнаяТара + " КАК МногооборотнаяТара,
	|	СУММА(ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстатокКт, 0)) КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В (&СчетаЗапасов),
	|			&ВидыСубконто,
	|			Субконто" + НомерСубконтоПоставщика + " = &Поставщик
	|				И Субконто" + НомерСубконтоДокумента + " = &Документ) КАК ОстаткиНаСкладе
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиНаСкладе.Организация,
	|	ОстаткиНаСкладе.Субконто" + НомерСубконтоМногооборотнаяТара + "";
	
	НаВодителя.Загрузить(Запрос.Выполнить().Выгрузить());
	Грузополучатели.Очистить();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Передача
	 ИЛИ ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Прием тогда
		Если НЕ ЗначениеЗаполнено(ДокументОснование) тогда
			Маршрут = ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка");
			Поставщик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			ВодительПолучатель = ПредопределенноеЗначение("Справочник.Водители.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.Перемещение тогда
		Маршрут = ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка");
		Поставщик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ДокументОснование = ПредопределенноеЗначение("Документ.МаршрутныйЛист.ПустаяСсылка");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.Базар_ВидыДвиженийМногооборотнойТары.ВозвратПоставщику тогда
		Маршрут = ПредопределенноеЗначение("Справочник.Маршруты.ПустаяСсылка");
		Водитель = ПредопределенноеЗначение("Справочник.Водители.ПустаяСсылка");
		Автомобиль = ПредопределенноеЗначение("Справочник.Автомобили.ПустаяСсылка");
		ВодительПолучатель = ПредопределенноеЗначение("Справочник.Водители.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры
