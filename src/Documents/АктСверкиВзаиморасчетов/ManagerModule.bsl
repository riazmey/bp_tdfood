&Вместо("ПодготовитьЗапрос")
Функция Базар_ПодготовитьЗапрос(СтруктураПараметров, СчетаИсключения)

	МассивКонтрагентов = МассивКонтрагентов(СтруктураПараметров.Контрагент, СтруктураПараметров.СОбособленнымиПодразделениями);
	МассивДоговоров = МассивДоговоров(СтруктураПараметров.ДоговорКонтрагента);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачала",                            СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",                         СтруктураПараметров.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаОкончанияДата",                     СтруктураПараметров.ДатаОкончания.Значение);
	Запрос.УстановитьПараметр("Организация",                           СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("МассивКонтрагентов",                    МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивДоговоров",                       МассивДоговоров);
	Запрос.УстановитьПараметр("Валюта",                                СтруктураПараметров.Валюта);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов",                    СтруктураПараметров.ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("АналитикаРасчетов",                     СтруктураПараметров.АналитикаРасчетов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",                    СтруктураПараметров.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("РазбитьПоДоговорам",                    СтруктураПараметров.РазбитьПоДоговорам);
	Запрос.УстановитьПараметр("СчетаИсключения",                       СчетаИсключения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Реализация,
	|	ДанныеПервичныхДокументов.Номер КАК НомерСчетаФактуры
	|ПОМЕСТИТЬ СчетаФактурыВыданные
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Проведен = ИСТИНА
	|	И СчетФактураВыданныйДокументыОснования.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента В (&МассивДоговоров)
	|			ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|	И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНачала,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&МассивКонтрагентов)
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В (&МассивДоговоров)
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК Дата,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК Номер,
	|	ХозрасчетныйОбороты.Регистратор КАК Документ,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(СчетаФактурыВыданные.НомерСчетаФактуры, ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО)) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2 КАК КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3 КАК КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта КАК Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ФильтрСписокСчетов.Счет
	|				ИЗ
	|					ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 В (&МассивКонтрагентов)
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 В (&МассивДоговоров)
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ХозрасчетныйОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыВыданные КАК СчетаФактурыВыданные
	|		ПО ХозрасчетныйОбороты.Регистратор = СчетаФактурыВыданные.Реализация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА ВЫБОР
	|									КОГДА &РазбитьПоДоговорам
	|										ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2
	|									ИНАЧЕ НЕ ХозрасчетныйОбороты.КорСубконто1 В (&МассивКонтрагентов)
	|								КОНЕЦ
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 В (&МассивКонтрагентов)
	|									И ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Возврат Запрос;
	
КонецФункции

&Вместо("ПодготовитьДанныеДляЗаполнения")
Процедура Базар_ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанныхЗаполнения = Новый Структура();
	СтруктураДанныхЗаполнения.Вставить("Успешно", Ложь);
	
	Если НЕ ПроверитьОтложенныеРасчеты(СтруктураПараметров) Тогда
		ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Подготовим переменные
	СчетаИсключения             = СчетаИсключения();
	ТаблицаПоДаннымОрганизации = НовыйТаблицаДокументов();
	КэшМетаданных              = Новый Соответствие; // Используется для получения представления документов
	Запрос = ПодготовитьЗапрос(СтруктураПараметров, СчетаИсключения);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Остаток на начало
	ВыборкаОстатокНаНачало = РезультатЗапроса[2].Выбрать();
	ВыборкаОстатокНаНачало.Следующий();
	СтруктураДанныхЗаполнения.Вставить("ОстатокНаНачало", ВыборкаОстатокНаНачало.ОстатокНаНачало);
	
	// Первоначальное заполнение таблицы по данным организации
	Выборка = РезультатЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПоДаннымОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Представление = ПредставлениеДокумента(
			СтруктураПараметров,
			Выборка,
			КэшМетаданных,
			СчетаИсключения);
			
	КонецЦикла;
	
	// Дополним таблицу валютной суммой
	ДополнитьТаблицуВалютнойСуммой(ТаблицаПоДаннымОрганизации, СтруктураПараметров);
	
	// Дополним таблицу счетами-фактурами
	ДополнитьТаблицуСчетамиФактурами(ТаблицаПоДаннымОрганизации, СтруктураПараметров);
	
	// Сортируем таблицу
	КолонкиДляСортировки = ?(СтруктураПараметров.РазбитьПоДоговорам, 
		"Договор, Дата, Документ, Представление",
		"Дата, Документ, Представление, Договор");
	ТаблицаПоДаннымОрганизации.Сортировать(КолонкиДляСортировки, Новый СравнениеЗначений);
	
	// Заполним возвращаемую структуру
	СтруктураДанныхЗаполнения.Вставить("ПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);
	Если СтруктураПараметров.ЗаполнятьДанныеКонтрагента Тогда
		СтруктураДанныхЗаполнения.Вставить("ПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента(ТаблицаПоДаннымОрганизации));
	КонецЕсли;
	СтруктураДанныхЗаполнения.Успешно = Истина;
	ПоместитьВоВременноеХранилище(СтруктураДанныхЗаполнения, АдресХранилища);
	
КонецПроцедуры

&Вместо("ПечатьАктаСверки")
Функция Базар_ПечатьАктаСверки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	МакетДополнения = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки_Дополнения");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктСверки();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Документ");
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получаем области
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьДоговор      = Макет.ПолучитьОбласть("Договор");
		ОбластьДоговорИтоги = Макет.ПолучитьОбласть("ДоговорИтоги");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьНДС          = МакетДополнения.ПолучитьОбласть("СуммаПродажиСНДС");
		ОбластьНДС10        = МакетДополнения.ПолучитьОбласть("СуммаПродажиСНДС_10");
		ОбластьНДС20        = МакетДополнения.ПолучитьОбласть("СуммаПродажиСНДС_20");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		// Заполняем шапку
		ПараметрыЗаголовок = Новый Структура;
		
		// Название организации
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаАктаСверки);
		НазваниеОрганизации   = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ПараметрыЗаголовок.Вставить("НазваниеОрганизации", НазваниеОрганизации);
		
		// Наименование контрагента
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаАктаСверки);
		НаименованиеКонтрагента = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
		Если Шапка.СОбособленнымиПодразделениями Тогда
			НаименованиеКонтрагента = НаименованиеКонтрагента + " " + НСтр("ru='с обособленными подразделениями'");
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
		
		// За период
		ДатаНачалаОтчета = ?(ЗначениеЗаполнено(Шапка.ДатаНачала), Шапка.ДатаНачала, Шапка.МинДата);
		Если ЗначениеЗаполнено(ДатаНачалаОтчета) Тогда
			ЗаПериод = ПредставлениеПериода(НачалоДня(ДатаНачалаОтчета), КонецДня(Шапка.ДатаОкончания), "ФП = Истина");
			ПараметрыЗаголовок.Вставить("ЗаПериод", СтрШаблон(НСтр("ru='за период: %1'"), ЗаПериод));
		КонецЕсли;
		
		// По договору
		Если ЗначениеЗаполнено(Шапка.ДоговорКонтрагентаВШапке) И НЕ Шапка.ДоговорКонтрагентаВШапкеЭтоГруппа Тогда
			ПараметрыЗаголовок.Вставить("ПоДоговору",
				Символы.ПС + СтрШаблон(НСтр("ru='по договору %1'"), Шапка.ДоговорКонтрагентаВШапке));
		КонецЕсли;
		
		// Валюта документа
		ПараметрыЗаголовок.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
		
		// Представитель организации
		ДанныеПредставителяОрганизации = ДанныеПредставителяОрганизации(Шапка);
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для ИП выводим только информацию об организации
			ПредставительОрганизации = НазваниеОрганизации;
		Иначе
			ПредставительОрганизации = СтрШаблон("%1 %2 %3",
				ДанныеПредставителяОрганизации.Должность,
				НазваниеОрганизации, 
				ДанныеПредставителяОрганизации.ФИОПолные);
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("ПредставительОрганизации", ПредставительОрганизации);
		
		// Представитель контрагента
		ДанныеПредставителяКонтрагента = ДанныеПредставителяКонтрагента(Шапка);
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для физического лица выводим только информацию об организации
			ПредставительКонтрагента = НаименованиеКонтрагента;
		Иначе
			ПредставительКонтрагента = СтрШаблон("%1 %2 %3", 
				ДанныеПредставителяКонтрагента.Должность, 
				НаименованиеКонтрагента,
				ДанныеПредставителяКонтрагента.ФИОПолные);
		КонецЕсли;
		ПараметрыЗаголовок.Вставить("ПредставительКонтрагента", ПредставительКонтрагента);
		
		// Выводим шапку
		ОбластьЗаголовок.Параметры.Заполнить(ПараметрыЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Строки таблицы
		ПараметрыНачальныеОстатки = Новый Структура;
		ПараметрыНачальныеОстатки.Вставить("СуммаНачальныйОстатокДт", ?(Шапка.ОстатокНаНачало > 0, Шапка.ОстатокНаНачало, 0));
		ПараметрыНачальныеОстатки.Вставить("СуммаНачальныйОстатокКт", ?(Шапка.ОстатокНаНачало < 0, -Шапка.ОстатокНаНачало, 0));
		ОбластьНачОстатки.Параметры.Заполнить(ПараметрыНачальныеОстатки);
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		Если Шапка.РазбитьПоДоговорам Тогда
			СальдоПоДоговорам = НачальноеСальдоПоДоговорам(Шапка);
			НачальноеСальдоПоДоговорамАкта      = СальдоПоДоговорам.ПоДоговорамАкта;
			НачальноеСальдоПоОстальнымДоговорам = СальдоПоДоговорам.ПоОстальнымДоговорам;
			
			ВывестиСальдоПоОстальнымДоговорам(
				НачальноеСальдоПоОстальнымДоговорам,
				ОбластьДоговор,
				ОбластьДоговорИтоги,
				ТабличныйДокумент,
				Шапка);
		КонецЕсли;
		
		СуммаПродажи = 0;
		СуммаНДС     = 0;
		СуммаНДС10   = 0;
		СуммаНДС20   = 0;
		
		ОбходПоДоговорам = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Договор");
		Пока ОбходПоДоговорам.Следующий() Цикл
			
			// Собираем данные
			ОбходПоДокументам = ОбходПоДоговорам.Выбрать();
			
			// Создадим список документов по организации и контрагенту.
			СписокДокументов  = Новый Массив;
			СписокДокументовК = Новый Массив;
			
			Пока ОбходПоДокументам.Следующий() Цикл
				Если ОбходПоДокументам.Дата <> NULL Тогда
					СтруктураДокумента = НовыйСтруктураДокумента();
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, ОбходПоДокументам);
					СписокДокументов.Добавить(СтруктураДокумента);
				КонецЕсли;
				Если ОбходПоДокументам.ДатаКонтр <> NULL Тогда
					СтруктураДокумента = НовыйСтруктураДокумента(Истина);
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, ОбходПоДокументам);
					СписокДокументовК.Добавить(СтруктураДокумента);
				КонецЕсли;
			КонецЦикла;
			
			// Не отображаем информацию по контрагенту, если не введены документы и сверка не согласована.
			// В этом случае будут пустые строки и итоги со стороны контрагента.
			ЗаполнятьДанныеКонтрагента = (Шапка.СверкаСогласована ИЛИ (СписокДокументовК.Количество() <> 0));
			
			// Выравняем таблицы по количеству строк
			РазницаСтрок = СписокДокументов.Количество() - СписокДокументовК.Количество();
			Если РазницаСтрок > 0 Тогда
				ДополняемаяТаблица = СписокДокументовК;
				НоваяСтрока = НовыйСтруктураДокумента(Истина);
			ИначеЕсли РазницаСтрок < 0 Тогда
				РазницаСтрок = -РазницаСтрок;
				ДополняемаяТаблица = СписокДокументов;
				НоваяСтрока = НовыйСтруктураДокумента();
			КонецЕсли;
			Для Счетчик = 1 По РазницаСтрок Цикл
				ДополняемаяТаблица.Добавить(НоваяСтрока);
			КонецЦикла;
			
			ЕстьСтрокиДокументов = (СписокДокументов.Количество() <> 0);
			
			// Выводим данные в табличный документ
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов Тогда
				ОбластьДоговор.Параметры.Заполнить(ОбходПоДоговорам);
				НачальноеСальдоПоДоговору = НачальноеСальдоПоДоговорамАкта.Скопировать(
					Новый Структура("Договор", ОбходПоДоговорам.Договор));
				СтруктураСальдоПоДоговору = Новый Структура;
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруДт",
					НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруДт"));
				СтруктураСальдоПоДоговору.Вставить("НачОстатокПоДоговоруКт",
					НачальноеСальдоПоДоговору.Итог("НачОстатокПоДоговоруКт"));
				ОбластьДоговор.Параметры.Заполнить(СтруктураСальдоПоДоговору);
				
				ТабличныйДокумент.Вывести(ОбластьДоговор);
			КонецЕсли;
			
			Для Счетчик = 0 По СписокДокументов.Количество() - 1 Цикл
				// Выводим обороты
				
				СтрокаСпискаДокументов = СписокДокументов[Счетчик];
				
				ОбластьОбороты.Параметры.Заполнить(СписокДокументов[Счетчик]);
				ОбластьОбороты.Параметры.Заполнить(СписокДокументовК[Счетчик]);
				ТабличныйДокумент.Вывести(ОбластьОбороты);
				
				Если ТипЗнч(СтрокаСпискаДокументов.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
					СуммаПродажи = СуммаПродажи + СтрокаСпискаДокументов.СуммаОборотДт;
					Для Каждого Строка из СтрокаСпискаДокументов.Регистратор.Товары цикл
						Если Строка.СуммаНДС > 0 тогда
							СуммаНДС = СуммаНДС + Строка.СуммаНДС;
							Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 тогда
								СуммаНДС10 = СуммаНДС10 + Строка.СуммаНДС;
							ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 тогда
								СуммаНДС20 = СуммаНДС20 + Строка.СуммаНДС;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Шапка.РазбитьПоДоговорам И ЕстьСтрокиДокументов Тогда
				ОбластьДоговорИтоги.Параметры.Заполнить(ОбходПоДоговорам);
				// Конечное сальдо по договору
				СтруктураКонСальдоПоДоговору = Новый Структура;
				КонОстатокПоДоговоруДт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорам.СуммаОборотДт;
				КонОстатокПоДоговоруКт = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорам.СуммаОборотКт;
				КонОстатокПоДоговору   = КонОстатокПоДоговоруДт - КонОстатокПоДоговоруКт;
				Если КонОстатокПоДоговору < 0 Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт",-КонОстатокПоДоговору);
				Иначе
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДт", КонОстатокПоДоговору);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКт", 0);
				КонецЕсли;
				
				Если НЕ ЗаполнятьДанныеКонтрагента Тогда
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
					СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
				Иначе
					КонОстатокПоДоговоруДтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруКт + ОбходПоДоговорам.СуммаОборотДтКонтр;
					КонОстатокПоДоговоруКтКонтр = СтруктураСальдоПоДоговору.НачОстатокПоДоговоруДт + ОбходПоДоговорам.СуммаОборотКтКонтр;
					КонОстатокПоДоговоруКонтр = КонОстатокПоДоговоруДтКонтр - КонОстатокПоДоговоруКтКонтр;
					Если КонОстатокПоДоговоруКонтр < 0 Тогда
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", 0);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр",-КонОстатокПоДоговоруКонтр);
					Иначе
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруДтКонтр", КонОстатокПоДоговоруКонтр);
						СтруктураКонСальдоПоДоговору.Вставить("КонОстатокПоДоговоруКтКонтр", 0);
					КонецЕсли;
				КонецЕсли;
				
				ОбластьДоговорИтоги.Параметры.Заполнить(СтруктураКонСальдоПоДоговору);
				ТабличныйДокумент.Вывести(ОбластьДоговорИтоги);
			КонецЕсли;
			
		КонецЦикла;
		
		// Итоги по документам
		ОбластьОборотыИтог.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		// Итоги по контрагенту
		ОстатокНаКонец = Шапка.ОстатокНаНачало + Шапка.СуммаОборотДт - Шапка.СуммаОборотКт;
		Если ЗаполнятьДанныеКонтрагента Тогда
			ОстатокНаКонецКонтр = Шапка.ОстатокНаНачало - Шапка.СуммаОборотДтКонтр + Шапка.СуммаОборотКтКонтр;
		Иначе
			ОстатокНаКонецКонтр = 0;
		КонецЕсли;
		ПараметрыИтогиПоКонтрагенту = Новый Структура;
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокДт",      ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокКт",      ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокКтКонтр", ?(ОстатокНаКонецКонтр > 0, ОстатокНаКонецКонтр, 0));
		ПараметрыИтогиПоКонтрагенту.Вставить("СуммаКонечныйОстатокДтКонтр", ?(ОстатокНаКонецКонтр < 0, -ОстатокНаКонецКонтр, 0));
		ОбластьКонОстатки.Параметры.Заполнить(ПараметрыИтогиПоКонтрагенту);
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		Если СуммаНДС > 0 тогда
			ОбластьНДС.Параметры.СуммаПродажи = СуммаПродажи;
			ОбластьНДС.Параметры.СуммаНДС     = СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
			Если СуммаНДС10 > 0 тогда
				ОбластьНДС10.Параметры.СуммаНДС10   = СуммаНДС10;
				ТабличныйДокумент.Вывести(ОбластьНДС10);
			КонецЕсли;
			Если СуммаНДС20 > 0 тогда
				ОбластьНДС20.Параметры.СуммаНДС20   = СуммаНДС20;
				ТабличныйДокумент.Вывести(ОбластьНДС20);
			КонецЕсли;
		КонецЕсли;
		
		// Результаты сверки
		ПараметрыПодвала = Новый Структура;
		ПараметрыПодвала.Вставить("НаименованиеКонтрагента", НаименованиеКонтрагента);
		ПараметрыПодвала.Вставить("НазваниеОрганизации",     НазваниеОрганизации);
		ПараметрыПодвала.Вставить("Должность",               ДанныеПредставителяОрганизации.Должность);
		ПараметрыПодвала.Вставить("ДолжностьК",              ДанныеПредставителяКонтрагента.Должность);
		ПараметрыПодвала.Вставить("ФИОПредставителя",        СтрШаблон("(%1)", ДанныеПредставителяОрганизации.Представление));
		ПараметрыПодвала.Вставить("ФИОПредставителяК",       СтрШаблон("(%1)", ДанныеПредставителяКонтрагента.Представление));
		ПараметрыПодвала.Вставить("РезультатыСверки",
			РезультатСверки(Шапка, ОстатокНаКонец, НазваниеОрганизации, НаименованиеКонтрагента));
		Если ЗаполнятьДанныеКонтрагента Тогда
			ПараметрыПодвала.Вставить("РезультатыСверкиК",
				РезультатСверки(Шапка, ОстатокНаКонецКонтр, НазваниеОрганизации, НаименованиеКонтрагента));
		КонецЕсли;
		
		// Итог сверки выводим если нашли расхождение и сверка согласована.
		Если Шапка.Расхождение <> 0 И Шапка.СверкаСогласована Тогда
			СуммаРасхождение = ?(Шапка.Расхождение > 0, Шапка.Расхождение, -Шапка.Расхождение);
			ИтогСверки = СтрШаблон(НСтр("ru='В результате сверки выявлено расхождение информации о состоянии расчетов в размере %1 %2 %3'"),
				Формат(СуммаРасхождение, "ЧЦ=21; ЧДЦ=2"),
				Строка(Шапка.ВалютаДокумента),
				УчетДенежныхСредствБП.ФорматироватьСуммуПрописьюПлатежногоДокумента(СуммаРасхождение, Шапка.ВалютаДокумента, Ложь));
			ПараметрыПодвала.Вставить("ИтогСверки", Символы.ПС + ИтогСверки + Символы.ПС + " ");
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Заполнить(ПараметрыПодвала);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		ТабличныйДокумент.ТолькоПросмотр = Истина;
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Документ);
			
		УправлениеПечатьюБП.ДополнитьДокументПодписьюИПечатью(ТабличныйДокумент, Шапка, ОбъектыПечати, ПараметрыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции