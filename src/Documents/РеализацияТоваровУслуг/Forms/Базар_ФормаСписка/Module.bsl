#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОсновнаяОрганизация           = Справочники.Организации.ОрганизацияПоУмолчанию();
	ОтборОрганизация              = ОсновнаяОрганизация;
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	УстановитьВосстановленныеОтборы();
	
	ОтборПоВидуОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПустаяСсылка();
	Если Параметры.Свойство("Отбор") Тогда
		Параметры.Отбор.Свойство("ВидОперации", ОтборПоВидуОперации)
	КонецЕсли;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.РеализацияТоваровУслуг);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.ПодменюСоздать.Видимость = МожноРедактировать;
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                 = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			УстановитьВосстановленныеОтборы();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданный" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			ОтборОрганизация = СтруктураОтбора.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			Параметры.Отбор.Удалить("Организация");
		КонецЕсли;
		Если СтруктураОтбора.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
			ОтборКонтрагент = СтруктураОтбора.Контрагент;
			ОтборКонтрагентИспользование = ЗначениеЗаполнено(ОтборКонтрагент);
			Параметры.Отбор.Удалить("Контрагент");
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборКонтрагентИспользованиеПриИзменении(Элемент)
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	ОтборКонтрагентИспользование = ЗначениеЗаполнено(ОтборКонтрагент);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если ЗначениеЗаполнено(ОтборПоВидуОперации) Тогда
		Если ОтборПоВидуОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугТовары";
		ИначеЕсли ОтборПоВидуОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугУслуги";
		Иначе
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугОбщая";
		КонецЕсли;
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары") Тогда
		КлючеваяОперация = "ОткрытиеФормыРеализацияТоваровУслугТовары";
	ИначеЕсли ДанныеСтроки.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги") Тогда
		КлючеваяОперация = "ОткрытиеФормыРеализацияТоваровУслугУслуги";
	Иначе
		КлючеваяОперация = "ОткрытиеФормыРеализацияТоваровУслугОбщая";
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкиСтатусаБумажногоДокумента();
	
	Оповестить("Запись_РеализацияТоваровУслуг", , Элемент.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьПометкиСтатусаБумажногоДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьОборудование(Команда)

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Оборудование"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияОтгрузкаБезПереходаПраваСобственности(Команда)

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияПродажаКомиссия(Команда)

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияТовары(Команда)

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРеализацияУслуги(Команда)

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидОперации(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Ссылка);
	ПараметрыФормы.Вставить("ВидОперации", СтрокаТаблицы.ВидОперации);
	ПараметрыФормы.Вставить("ИзменитьВидОперации", Истина);
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура СменитьСтатусБумажногоДокумента(Команда)
	
	СсылкаНаДокумент = ПолучитьЗначениеРеквизита(Элементы.Список.ВыделенныеСтроки[0], "Ссылка");
	
	Если Команда.Имя = "СменитьСтатусБумажногоДокумента_Отсутствует" тогда
		СтатусБумажногоДокумента = ПредопределенноеЗначение("Перечисление.Базар_СтатусыНаличияБумажногоДокумента.Отсутствует");
	ИначеЕсли Команда.Имя = "СменитьСтатусБумажногоДокумента_СОшибками" тогда
		СтатусБумажногоДокумента = ПредопределенноеЗначение("Перечисление.Базар_СтатусыНаличияБумажногоДокумента.ПолученСОшибками");
	ИначеЕсли Команда.Имя = "СменитьСтатусБумажногоДокумента_Корректный" тогда
		СтатусБумажногоДокумента = ПредопределенноеЗначение("Перечисление.Базар_СтатусыНаличияБумажногоДокумента.ПолученКорректным");
	КонецЕсли;
	
	Для Счетчик = 1 по Элементы.Список.ВыделенныеСтроки.Количество() цикл
		СтрокаСписка = Элементы.Список.ВыделенныеСтроки.Получить(Счетчик - 1);
		СсылкаНаОбъект = ПолучитьЗначениеРеквизита(СтрокаСписка, "Ссылка");
		Если ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "Проведен") тогда
			Если УстановитьПометкиСтатусаБумажногоДокумента(СтатусБумажногоДокумента) тогда
				СменитьСтатусБумажногоДокументаНаСервере(СсылкаНаОбъект, СтатусБумажногоДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВосстановленныеОтборы()
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы(ВидОперации)

	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары") Тогда
		КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугТовары";
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги") Тогда
		КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугУслуги";
	Иначе
		КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугОбщая";
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары") тогда
		
		Если НЕ Элементы.Список.ТекущиеДанные = Неопределено тогда
			
			ВыбранныйКонтрагент      = Элементы.Список.ТекущиеДанные.Контрагент;
			ВыбранныйГрузополучатель = Элементы.Список.ТекущиеДанные.Грузополучатель;
			ВыбранныйДоговор         = Элементы.Список.ТекущиеДанные.Договор;
			
			Если НЕ ЗначенияЗаполнения.Свойство("Контрагент") тогда
				ЗначенияЗаполнения.Вставить("Контрагент", ВыбранныйКонтрагент);
			КонецЕсли;
			
			Если НЕ ЗначенияЗаполнения.Свойство("Грузополучатель") тогда
				ЗначенияЗаполнения.Вставить("Грузополучатель", ВыбранныйГрузополучатель);
			КонецЕсли;
			
			Если НЕ ЗначенияЗаполнения.Свойство("ДоговорКонтрагента") И ЗначенияЗаполнения.Свойство("Контрагент") тогда
				ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", ВыбранныйДоговор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Команда.Имя = "ПодменюПечатьОбычное_Реестр" Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции

&НаСервереБезКонтекста
Процедура СменитьСтатусБумажногоДокументаНаСервере(Документ, СтатусБумажногоДокумента)
	
	НаборЗаписей = РегистрыСведений.Базар_СтатусыНаличияБумажногоДокумента.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(Документ);
	НаборЗаписей.Очистить();
	
	НоваяЗапись                          = НаборЗаписей.Добавить();
	НоваяЗапись.Объект                   = Документ;
	НоваяЗапись.СтатусБумажногоДокумента = СтатусБумажногоДокумента;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьПометкиСтатусаБумажногоДокумента(СтатусБумажногоДокумента = Неопределено)
	
	ДоступностьЭлементовУправления = Истина;
	
	Попытка
		Если НЕ ЗначениеЗаполнено(СтатусБумажногоДокумента) тогда
			СтатусБумажногоДокумента = Элементы.Список.ТекущиеДанные.СтатусБумажногоДокумента;
		КонецЕсли;
		
		Если НЕ ПолучитьЗначениеРеквизита(Элементы.Список.ВыделенныеСтроки[0], "Проведен") тогда
			ДоступностьЭлементовУправления = Ложь;
		КонецЕсли;
		
		Если СтатусБумажногоДокумента = ПредопределенноеЗначение("Перечисление.Базар_СтатусыНаличияБумажногоДокумента.Отсутствует") тогда
			Элементы.Отсутствует.Пометка = Истина;
			Элементы.СписокКонтекстноеМенюОтсутствует.Пометка = Истина;
		Иначе
			Элементы.Отсутствует.Пометка = Ложь;
			Элементы.СписокКонтекстноеМенюОтсутствует.Пометка = Ложь;
		КонецЕсли;
		
		Если СтатусБумажногоДокумента = ПредопределенноеЗначение("Перечисление.Базар_СтатусыНаличияБумажногоДокумента.ПолученСОшибками") тогда
			Элементы.СОшибками.Пометка = Истина;
			Элементы.СписокКонтекстноеМенюСОшибками.Пометка = Истина;
		Иначе
			Элементы.СОшибками.Пометка = Ложь;
			Элементы.СписокКонтекстноеМенюСОшибками.Пометка = Ложь;
		КонецЕсли;
		
		Если СтатусБумажногоДокумента = ПредопределенноеЗначение("Перечисление.Базар_СтатусыНаличияБумажногоДокумента.ПолученКорректным") тогда
			Элементы.Корректный.Пометка = Истина;
			Элементы.СписокКонтекстноеМенюКорректный.Пометка = Истина;
		Иначе
			Элементы.Корректный.Пометка = Ложь;
			Элементы.СписокКонтекстноеМенюКорректный.Пометка = Ложь;
		КонецЕсли;
		
	Исключение
		ДоступностьЭлементовУправления = Ложь;
	КонецПопытки;
	
	Если Элементы.Отсутствует.Доступность <> ДоступностьЭлементовУправления тогда
		Элементы.Отсутствует.Доступность  = ДоступностьЭлементовУправления;
		Элементы.СписокКонтекстноеМенюОтсутствует.Доступность = ДоступностьЭлементовУправления;
		Элементы.СОшибками.Доступность    = ДоступностьЭлементовУправления;
		Элементы.СписокКонтекстноеМенюСОшибками.Доступность   = ДоступностьЭлементовУправления;
		Элементы.Корректный.Доступность   = ДоступностьЭлементовУправления;
		Элементы.СписокКонтекстноеМенюКорректный.Доступность  = ДоступностьЭлементовУправления;
	КонецЕсли;
	
	Возврат ДоступностьЭлементовУправления;
КонецФункции

#КонецОбласти
