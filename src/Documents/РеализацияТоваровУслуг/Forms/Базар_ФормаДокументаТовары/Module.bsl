// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Перем ЭтоНоваяСтрока;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		СистемныеНастройки = ОбщегоНазначенияБазарСервер.СистемныеНастройкиБазар(Объект.Дата);
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Объект.ТипЦен = СистемныеНастройки.ТипЦенПродажи;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = СистемныеНастройки.СкладОтгрузки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) тогда
			
			АктуальныеДоговора = АктуальныеДоговораКонтрагента(Объект.Контрагент, Объект.Дата);
			
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
				Если АктуальныеДоговора.Количество() > 0 тогда
					Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
				КонецЕсли;
			Иначе
				ТекущийДоговорАктуальный = Ложь;
				Если Объект.ДоговорКонтрагента.Владелец = Объект.Контрагент тогда
					Для Каждого АктуальныйДоговор из АктуальныеДоговора цикл
						Если АктуальныйДоговор = Объект.ДоговорКонтрагента тогда
							ТекущийДоговорАктуальный = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ ТекущийДоговорАктуальный тогда
					Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
					Если АктуальныеДоговора.Количество() > 0 тогда
						Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Объект.Грузополучатель = Объект.Контрагент тогда
				ЗаполнитьРазделПеревозкаАвтотранспортом(, Объект.Грузополучатель);
			Иначе
				ЗаполнитьРазделПеревозкаАвтотранспортом();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РеализацияТоваровУслугФормы.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
	ЗаполнитьДанныеСпецификацииДоговора();
	ЗаполнитьИнформационныеЦеныНаТовары();
	ПересчитатьНаценкуТабличнойЧасти(Ложь);
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтаФорма);
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
		
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияВызовСервераПереопределяемый.ИспользоватьПодключаемоеОборудование();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если УправлениеПечатьюБП.ИспользуетсяИзмененныйМакет(Объект.Ссылка) Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяИзмененныйМакет");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.РеализацияТоваровУслуг",
		"Базар_ФормаДокументаТовары",
		НСтр("ru='Новости: Реализация (акт, накладная)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
		ТекущийЭлемент = Элементы.Контрагент;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
		ТекущийЭлемент = Элементы.ДоговорКонтрагента;
	Иначе
		ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма"
		Или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатурыГосЗакупок.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПокупателю.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги" Тогда
		ОбработкаВыбораАналитикиУчетаНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаПодписиТовары" Тогда
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		СформироватьНадписьПодписи(ЭтаФорма);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДоставка" Тогда
		РеализацияТоваровУслугФормыКлиент.ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Патенты.Форма.ФормаЭлемента" Тогда
		ЗаполнитьПатентОбработкаВыбора(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ДокументДоставка" Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма.Объект, ВыбранноеЗначение);
		ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма, Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		
		ОбработатьоповещениеОбИзмененииБанковскогоСчетаИлиОрганизации();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Источник = Объект.Организация Тогда
		
		ОбработатьоповещениеОбИзмененииБанковскогоСчетаИлиОрганизации();
		
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
		
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			ДобавитьПоШтрихкодуНаСервере(ТекущийКод);
		КонецЕсли;
		
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ТолькоПросмотр И ИспользоватьПодключаемоеОборудование Тогда
		// Попробуем подключить сканер штрихкода
		МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	Если Параметры.Ключ.Пустая() И
		ЗначениеЗаполнено(Объект.Грузополучатель) И
		Объект.Грузополучатель <> Объект.Контрагент Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветНаВопросОчиститьГрузополучателя", ЭтотОбъект),
		              "Поле ""Грузополучатель"" заполнено значением - "+Строка(Объект.Грузополучатель)+
		              " на основании скопированного документа! Очистить поле ""Грузополучатель""?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	Если ЭтоДокументГосЗакупок тогда
		ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатураГосЗакупок",, ЭтаФорма,,Объект.Дата);
	КонецЕсли;
	
	ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма, Истина);
	СформироватьНадписьПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РеализацияТоваровУслугФормы.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормыКлиент.ПередЗаписью(
		ЭтаФорма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);	
	
	РеализацияТоваровУслугФормы.ПослеЗаписиНаСервере(ЭтаФорма, Объект, ПараметрыЗаписи);

	УстановитьСостояниеДокумента();
	
	Если ВедетсяУчетНДСПоФЗ335
		И ПокупательНалоговыйАгентПоНДС = Истина Тогда 
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтотОбъект);
	
	ЗаполнитьИнформационныеЦеныНаТовары();
	ПересчитатьНаценкуТабличнойЧасти(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормы.ПередЗаписьНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
		Объект.Организация,
		Объект.БанковскийСчетОрганизации,
		ИспользоватьНесколькоБанковскихСчетовОрганизации,
		Отказ,
		ПараметрыЗаписи,
		Ложь);
		
	// Дополнительные свойства для установки статусов по документу
	ЕстьСчетФактура = ЗначениеЗаполнено(СчетФактура) 
		ИЛИ ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСчетФактура", ТребуетсяСчетФактура И НЕ Объект.ДокументБезНДС);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЕстьСчетФактура",      ЕстьСчетФактура);
	
	Если НЕ ЭтоДокументГосЗакупок И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		КонтрольРасчетовНаличнымиДеньгамиСервер.КонтрольРасчетовНаличнымиДеньгами(
			Объект,
			Объект.ДоговорКонтрагента,
			ИтогиВсего,
			Отказ
		);
		
		Ценообразование.КонтрольЦенПродажи(
			Объект,
			"Товары",
			"Номенклатура",
			"Закупочная",
			Отказ
		);
		
	КонецЕсли;
	
	Если ЭтоДокументГосЗакупок И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		СписокАктуальныхДоговоров = АктуальныеДоговораКонтрагента(
			Объект.Контрагент,
			Объект.Дата
		);
		
		Если СписокАктуальныхДоговоров.Найти(Объект.ДоговорКонтрагента) = Неопределено тогда
			ТекстСообщения =
				"Договор " +
				Объект.ДоговорКонтрагента +
				" имеет не корректный период действия!"
			;
			
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
				ТекстСообщения,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормы.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РеализацияТоваровУслугФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	СобытияФормИСКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ИспользоватьПодключаемоеОборудование И ЗавершениеРаботы Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = РеализацияТоваровУслугФормыКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(ЭтаФорма);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		// В случае если выбранный договор не подходит по дате, или договор не заполнен,
		// тогда меняем его на первый актуальный (на дату документа)
		АктуальныеДоговора = АктуальныеДоговораКонтрагента(Объект.Контрагент, Объект.Дата);
		ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
			
			Если АктуальныеДоговора.Количество() > 0 Тогда
				Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
			КонецЕсли;
			
		Иначе
			
			Если АктуальныеДоговора.Найти(Объект.ДоговорКонтрагента) = Неопределено тогда
				
				Если АктуальныеДоговора.Количество() > 0 Тогда
					Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
				Иначе
					Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийДоговорКонтрагента <> Объект.ДоговорКонтрагента ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
			
			НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора();
			ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				ДоговорКонтрагентаПриИзмененииНаСервере();
				ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаПриИзмененииНаСервере();
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;
	
	ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
	ЗаполнитьДанныеСпецификацииДоговора();
	НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора();
	ЗаполнитьРазделПеревозкаАвтотранспортом();
	ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма, Истина);
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Контрагент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
	ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
	ЗаполнитьДанныеСпецификацииДоговора();
	НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора();
	ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма, Истина);
	
	Если ЭтоДокументГосЗакупок тогда
		ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатураГосЗакупок", Неопределено, ЭтаФорма,,Объект.Дата);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(АктуальныеДоговораКонтрагента(Объект.Контрагент, Объект.Дата));
	
	ДанныеВыбора = СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателюПриИзменении(Элемент)
	
	//Если ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
	//	ОбработкаЗаполненияПоСчетуНаКлиенте(Объект.СчетНаОплатуПокупателю, "Товары");
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();

	РеализацияТоваровУслугФормыКлиент.ПорядокУчетаРасчетовНажатие(
		ЭтаФорма, Элемент, СтандартнаяОбработка, АдресХранилищаЗачетАвансов);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ЦеныИВалютаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПокупателюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборСчетаНаОплатуЗавершение", ЭтотОбъект);
	
	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораСчетаНаОплату(ЭтотОбъект, Истина, ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаНаОплатуЗавершение(МассивСчетов, ДополнительныеПараметры) Экспорт
	Если МассивСчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСчетов.Количество() = 1 Тогда
		ОбработкаЗаполненияПоСчетуНаКлиенте(МассивСчетов[0], "Товары");
	Иначе
		//ЗаполнитьПоСчетамНаСервере(МассивСчетов, "Товары");
		//РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	ДеятельностьНаПатентеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаТорговомСбореПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаТорговомСборе Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		ДеятельностьНаТорговомСбореПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	РеализацияТоваровУслугФормыКлиент.ПатентПриИзменении(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ТекстНеобходимоЗаполнитьПатентОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьЦеныСтроки();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатура", Элементы.Товары.ТекущиеДанные, ЭтаФорма,,Объект.Дата);
	ТоварыПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриАктивизацииСтрокиНаСервере()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	Строка = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Строка.ЕдиницаИзмеренияГосЗакупок.Дробная тогда
		Элементы.ТоварыКоличествоГосЗакупок.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
	Иначе
		Элементы.ТоварыКоличествоГосЗакупок.ФорматРедактирования = "ЧЦ=15; ЧДЦ=0";
	КонецЕсли;
	
	Если Строка.ЕдиницаИзмерения.Дробная тогда
		Элементы.ТоварыКоличество.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
	Иначе
		Элементы.ТоварыКоличество.ФорматРедактирования = "ЧЦ=15; ЧДЦ=0";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ТоварыАналитикаУчета" Тогда
		ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНоваяСтрока Тогда
		ТекущаяКолонкаТаблицы = Элементы.Товары.ТекущийЭлемент;
		Если ТекущаяКолонкаТаблицы.Имя = "ТоварыАналитикаУчета"
			И НЕ Элементы.Товары.ТекущиеДанные.АналитикаУчетаЗаполнена Тогда
			ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
			ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.Себестоимость = 0;
		Элемент.ТекущиеДанные.ДокументОприходования = Неопределено;
		
		Если ИспользоватьКонтрольныеЗнакиГИСМ Тогда
			Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНоваяСтрока = НоваяСтрока;
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы	= Элементы.Товары.ТекущиеДанные;
	Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
	СтрокаТаблицы.АналитикаУчета = "<...>";

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования И НоваяСтрока Тогда
		// Закроем форму редактирования строки, т.к. пользователь отменяет ввод
		Оповестить("ФормаРедактированияСтроки_Закрыть", Неопределено, ЭтаФорма);
	КонецЕсли;

	ЭтоНоваяСтрока = Ложь;

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ВестиУчетТабачнойПродукцииМОТП
		ИЛИ ВестиУчетОбувнойПродукцииИСМП Тогда
		ТоварыПриОкончанииРедактированияНаСервере();
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере()

	ДополнительныеПараметры = Неопределено;
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЭтоДокументГосЗакупок тогда
		ГосЗакупкиКлиент.ТоварыНоменклатураПриИзменении(ЭтаФорма);
	КонецЕсли;

	
	// Получим общие параметры обработки для реквизитов документа
	ПараметрыОбработки = РеализацияТоваровУслугФормыКлиент.ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(
		ЭтаФорма, ТекущиеДанные);

	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчета", ТекущиеДанные.АналитикаУчета);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("АналитикаУчетаЗаполнена", ТекущиеДанные.АналитикаУчетаЗаполнена);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаЗабалансовый", ТекущиеДанные.СчетУчетаЗабалансовый);
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("СчетУчетаПартионный", ТекущиеДанные.СчетУчетаПартионный);
	
	
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбработки.ДанныеОбъекта);
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы,
		ПараметрыОбработки.ДанныеОбъекта,
		ПараметрыОбработки.СчетаУчетаКЗаполнению);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	ОбновитьЦеныСтроки();
	ПересчитатьНаценку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Склад",           Объект.Склад);
	СтруктураПараметров.Вставить("ДатаОстатков",    Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",          Объект.ТипЦен);
	СтруктураПараметров.Вставить("ДатаЦен",         Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока",   Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", 
		СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	Если ЭтоДокументГосЗакупок И Строка.ЦенаГосЗакупок = 0 тогда
		ДанныеЦены = ВернутьЦенуНоменклатурыГосЗаказа(Объект.ДоговорКонтрагента, Строка.НоменклатураГосЗакупок, Строка.Номенклатура);
		Если НЕ ДанныеЦены = Неопределено тогда
			Строка.ЦенаГосЗакупок = ДанныеЦены.ЦенаГосЗакупок;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьКоличествоИЦену();
	
	Если ЭтоДокументГосЗакупок тогда
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦенаГосЗакупок(ЭтаФорма, "Товары");
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары");
	КонецЕсли;
	
	ПересчитатьНаценку();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПересчитатьКоличествоИЦену();
	
	Если ЭтоДокументГосЗакупок тогда
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦенаГосЗакупок(ЭтаФорма, "Товары");
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары");
	КонецЕсли;
	
	ПересчитатьНаценку();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Если ЭтоДокументГосЗакупок тогда
		
		// Пересчитаем сумму
		ТоварыПриИзмененииСуммаГосЗакупок();
		
		// Пересчитаем сумму НДС
		СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ПокупательНалоговыйАгентПоНДС")
			И ЭтаФорма.ПокупательНалоговыйАгентПоНДС = Истина
			И ЭтаФорма.ВедетсяУчетНДСПоФЗ335 Тогда 
			СтрокаТаблицы.СуммаНДС = 0;
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
		КонецЕсли;
		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		
	Иначе
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары");
	КонецЕсли;
	
	ПересчитатьНаценку();

КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииСуммаГосЗакупок()
	
	ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	ГосЗакупкиСервер.ПриИзмененииСуммаГосЗакупок(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаНДС(ЭтаФорма, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОткрытьФормуРедактированияСтроки(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РеализацияТоваровУслугФормыКлиент.ТоварыНомерГТДНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияПриИзменении(Элемент)

	РеализацияТоваровУслугФормыКлиент.ТоварыДокументОприходованияПриИзменении(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОприходованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РеализацияТоваровУслугФормыКлиент.ТоварыДокументОприходованияНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, ТоварыНаКомиссии");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, ТоварыНаКомиссии");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоДокументГосЗакупок тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
		ТекущаяНоменклатураГосЗакупок = Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок;
		
		ГосЗакупкиКлиент.ПолеНоменклатураИлиНоменклатураГосЗакупокОбработкаВыбора(ЭтаФорма,
		                                                                          Элементы.Товары.ТекущиеДанные,
		                                                                          СтрЗаменить(Элемент.Имя, "Товары", ""),
		                                                                          ВыбранноеЗначение);
		
		ПересчитатьКоличествоИЦену();
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦенаГосЗакупок(ЭтаФорма, "Товары");
		
		Если Элементы.Товары.ТекущиеДанные.Номенклатура <> ТекущаяНоменклатура тогда
			ТоварыНоменклатураПриИзменении(Элемент);
		КонецЕсли;
		
		Если Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок <> ТекущаяНоменклатураГосЗакупок тогда
			ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатура", Элементы.Товары.ТекущиеДанные, ЭтаФорма,, Объект.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок) тогда
			ТекущийЭлемент = Элементы.ТоварыКоличествоГосЗакупок;
		КонецЕсли;
		
		Модифицированность = Истина;
	Иначе
		РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
	ТоварыПриАктивизацииСтрокиНаСервере();
	
	ОбновитьЦеныСтроки();
	ПересчитатьНаценку();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураГосЗакупокПриИзменении(Элемент)
	
	ГосЗакупкиКлиент.ПолеНоменклатураИлиНоменклатураГосЗакупокОбработкаВыбора(ЭтаФорма,
	                                                                          Элементы.Товары.ТекущиеДанные,
	                                                                          "НоменклатураГосЗакупок",
	                                                                          Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок);
	
	ПересчитатьКоличествоИЦену();
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦенаГосЗакупок(ЭтаФорма, "Товары");
	ОбновитьЦеныСтроки();
	ПересчитатьНаценку();
	ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "Товары", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	РеализацияТоваровУслугФормыКлиент.ОткрытьФормуВыбораПоступленияТоваровУслуг(ЭтаФорма, "Товары", "Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ПодборНоменклатуры(ЭтаФорма, "Товары", Команда);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	АдресХранилищаТовары = ПоместитьТоварыВоВременноеХранилищеНаСервере();

	РеализацияТоваровУслугФормыКлиент.ИзменитьТовары(ЭтаФорма, Команда, АдресХранилищаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыписатьСчетФактуру(Команда)
	
	РеализацияТоваровУслугФормыКлиент.ВыписатьСчетФактуру(ЭтаФорма, Команда);
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Оповестить("Запись_СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если УправлениеПечатьюБПВызовСервера.ИспользуетсяИзмененныйМакет(Объект.Ссылка) Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяИзмененныйМакет");
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
		ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Объект.Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетТабачнойПродукцииМОТП);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	ТекущаяДатаДокумента          = Объект.Дата;
	ДатыИзмененияОтветственныхЛиц = ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация);
	
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
//	ТекстНеобходимоЗаполнитьПатент = УчетПСН.ТекстНеобходимоЗаполнитьПатент();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОсновнойБанковскийСчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ЗначениеЗаполнено(ОсновнойБанковскийСчетОрганизации);
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДСПокупателем");
	
		ВалютаВзаиморасчетов          = РеквизитыДоговора.ВалютаВзаиморасчетов;
		ПокупательНалоговыйАгентПоНДС = РеквизитыДоговора.УчетАгентскогоНДСПокупателем;
		ТребуетсяСчетФактура          = Истина;
		
	Иначе

		ВалютаВзаиморасчетов          = ВалютаРегламентированногоУчета;
		ПокупательНалоговыйАгентПоНДС = Ложь;
		ТребуетсяСчетФактура          = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентПриИзмененииНаСервере();
		ИначеЕсли ВестиУчетПоДоговорам И РеализацияТоваровУслугФормы.ДоступноСозданиеОсновногоДоговораПоВидуОперации(Объект.ВидОперации) Тогда
			ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма);
	КонецЕсли;
	
	ЕстьПравоЧтениеПоступлениеТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	ЕстьПравоЧтениеСчетНаОплату            = ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуПокупателю);
	
	Элементы.ТоварыДобавитьИзПоступления.Видимость  = ЕстьПравоЧтениеПоступлениеТоваровУслуг;
	Элементы.ТоварыЗаполнитьПоПоступлению.Видимость = ЕстьПравоЧтениеПоступлениеТоваровУслуг;
	Элементы.СчетНаОплатуПокупателю.Видимость       = ЕстьПравоЧтениеСчетНаОплату;
	
	УправлениеФормой(ЭтаФорма);
	
	РеализацияТоваровУслугФормы.УстановитьЗаголовокФормы(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЦеныИВалюты(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь) Экспорт

	Если ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС Тогда
		ПриИзмененииЦеныИВалютыНаСервере(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	Иначе
		ОбновитьИтоги(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС        = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ       = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	
	// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтранаРегистрации");
	РеализацияВЕАЭС              = УчетНДС.ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
	ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(Объект.Дата);
	ВедетсяУчетНДСПоФЗ335        = УчетНДС.ВедетсяУчетНДСПоФЗ335(Объект.Дата);
	
	Если ПрименяетсяУСНПатент Тогда
		ПрименяетсяНесколькоПатентов = Справочники.Патенты.ИспользуетсяНесколькоПатентов(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	ПрименяетсяТолькоУСНПатент        = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры   = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);
	ЕстьВалютныйУчет                  = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользуетсяПланированиеПлатежей  = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейОтПокупателей");
	ВестиУчетПоДоговорам              = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ИспользоватьКонтрольныеЗнакиГИСМ  = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ");
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
	РаздельныйУчетТорговыйСборПриУСН = УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Объект.Организация, Объект.Дата);
	
	СпособОценкиМПЗ          = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата);
	СпособОценкиМПЗПоСредней = (СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);
	
	ОсуществляетсяРеализацияТоваровУслугКомитентов = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
		
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбработатьВыпискуСчетаФактуры(Результат, ДополнительныеПараметры) Экспорт
	
	РеализацияТоваровУслугФормыКлиент.ОбработатьВыпискуСчетаФактуры(ЭтаФорма, Результат, ДополнительныеПараметры);
	Если СчетФактура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ТоварыДокументОприходования

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	// ТоварыДокументОприходования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
				"Объект.Товары.СчетУчетаПартионный", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыДокументОприходования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыДокументОприходования");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОсуществляетсяРеализацияТоваровУслугКомитентов", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСебестоимость

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Себестоимость", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	// ТоварыСебестоимость
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСебестоимость");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ДокументОприходования", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаПартионный", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Ложь);
				
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// ТоварыАналитикаУчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыАналитикаУчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.АналитикаУчетаЗаполнена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);


	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ДокументБезНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ПокупательНалоговыйАгентПоНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ВедетсяУчетНДСПоФЗ335",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыКодТНВЭД
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ГруппаОтбораИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ЭтоДокументГосЗакупок", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКодТНВЭД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РеализацияВЕАЭС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВедетсяУчетНДСПоФЗ150", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтавкиНДС.НДС0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Цвет текста итоги наценки
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаПроцент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогиНаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 14.99);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаПроцент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогиНаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 5);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаПроцент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогиНаценкаПроцент", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 15);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
	// Цвет текста товары наценка представление
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНаценкаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 14.99);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНаценкаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 5);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНаценкаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НаценкаПроцент", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 15);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
	// Управление видимостью патента.
	Элементы.ТекстНеобходимоЗаполнитьПатент.Видимость =
		УчетПСНКлиентСервер.ПоказатьПредупреждениеНеобходимоЗаполнитьПатент(
			Объект.Организация,
			Объект.Патент,
			Форма.ПрименяетсяТолькоУСНПатент,
			Форма.ПрименяетсяНесколькоПатентов);
	
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.Патент.Видимость   = Форма.ПрименяетсяНесколькоПатентов ИЛИ Не Форма.ПрименяетсяТолькоУСНПатент;
	
	// Если только патент, то флаг избыточен - патент должен быть доступен для выбора всегда.
	Элементы.ДеятельностьНаПатенте.Видимость = Не Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступШапка.Видимость  = Форма.ПрименяетсяУСНПатент И Не Форма.ПрименяетсяТолькоУСНПатент;
	Элементы.ОтступПодвал.Видимость = Форма.ПрименяетсяУСНПатент И Не Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.ДеятельностьНаТорговомСборе.Видимость = Форма.РаздельныйУчетТорговыйСборПриУСН;
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Форма.Элементы.СчетФактураКнопка,
		Форма.Элементы.СчетФактураСсылка,
		Форма.Элементы.НадписьСчетФактура,
		Объект.ДокументБезНДС,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура); 
		
	НалоговыйАгентПоФЗ335 = Форма.ПокупательНалоговыйАгентПоНДС = Истина И Форма.ВедетсяУчетНДСПоФЗ335;
	
	Элементы.ИтогиВсегоНДС.Видимость 		= Не (Объект.ДокументБезНДС ИЛИ НалоговыйАгентПоФЗ335);
	
	ОбновитьИтоги(Форма);
	РеализацияТоваровУслугФормыКлиентСервер.СформироватьНадписьЦеныИВалюта(Форма);
	Элементы.ЦеныИВалюта.Видимость = НЕ НалоговыйАгентПоФЗ335;
	
	Элементы.ТоварыЕдиницаИзмерения.Видимость = Истина;
	
	Если Форма.ЭтоДокументГосЗакупок тогда
		Элементы.ТоварыНоменклатураГосЗакупок.Видимость = Истина;
		Элементы.ТоварыКоэффициентГосЗакупок.Видимость = Истина;
		Элементы.ТоварыЕдиницаИзмеренияГосЗакупок.Видимость = Истина;
		Элементы.ТоварыИзменитьТовары.Видимость = Ложь;
		Элементы.ТоварыЦенаПредыдущейПродажи.Видимость = Ложь;
		Элементы.ТоварыЦена.Видимость = Ложь;
		Элементы.ТоварыЦенаГосЗакупок.Видимость = Истина;
		Элементы.ТоварыКоличество.Видимость = Ложь;
		Элементы.ТоварыКоличествоГосЗакупок.Видимость = Истина;
		Элементы.ГруппаТоварыЗаполнить.Видимость = Ложь;
		
		Элементы.ТоварыНаценкаПредставление.Ширина = 10;
		
		Элементы.ТоварыНоменклатура.РедактированиеТекста = Ложь;
		Элементы.ТоварыНоменклатура.КнопкаВыбора = Ложь;
		Элементы.ТоварыНоменклатура.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		Элементы.ТоварыНоменклатура.КнопкаВыпадающегоСписка = Истина;
		Элементы.ТоварыНоменклатура.КнопкаСоздания = Ложь;
		
		Элементы.ТоварыГруппаСтавкаНДССуммаНДС.Группировка = ГруппировкаКолонок.Вертикальная;
	Иначе
		Элементы.ТоварыНоменклатураГосЗакупок.Видимость = Ложь;
		Элементы.ТоварыКоэффициентГосЗакупок.Видимость = Ложь;
		Элементы.ТоварыЕдиницаИзмеренияГосЗакупок.Видимость = Ложь;
		Элементы.ТоварыИзменитьТовары.Видимость = Истина;
		Элементы.ТоварыЦенаПредыдущейПродажи.Видимость = Истина;
		Элементы.ТоварыЦена.Видимость = Истина;
		Элементы.ТоварыЦенаГосЗакупок.Видимость = Ложь;
		Элементы.ТоварыКоличество.Видимость = Истина;
		Элементы.ТоварыКоличествоГосЗакупок.Видимость = Ложь;
		Элементы.ГруппаТоварыЗаполнить.Видимость = Истина;
		
		Элементы.ТоварыНаценкаПредставление.Ширина = 16;
		
		Элементы.ТоварыНоменклатура.РедактированиеТекста = Истина;
		Элементы.ТоварыНоменклатура.КнопкаВыбора = Истина;
		Элементы.ТоварыНоменклатура.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.Авто;
		Элементы.ТоварыНоменклатура.КнопкаВыпадающегоСписка = Неопределено;
		Элементы.ТоварыНоменклатура.КнопкаСоздания = Неопределено;
		
		Элементы.ТоварыГруппаСтавкаНДССуммаНДС.Группировка = ГруппировкаКолонок.Горизонтальная;
	КонецЕсли;
	
	Элементы.КомментарийСпецификации.Видимость = НЕ ПустаяСтрока(Форма.КомментарийСпецификации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьЦенуНоменклатурыГосЗаказа(ДоговорКонтрагента, НоменклатураГосЗакупок, Номенклатура)
	
	Возврат ГосЗакупкиСервер.ВернутьЦенуНоменклатурыГосЗаказа(ДоговорКонтрагента, НоменклатураГосЗакупок, Номенклатура);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТаблицеТовары()
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() тогда
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.Товары, "Товары", Объект, Документы.РеализацияТоваровУслуг);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ИдентификаторСтроки)
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() тогда
		
		СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, "Товары");
		
		ПараметрыОбъекта = Неопределено;
		ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);
		ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры


// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ДатаПриИзменении(ЭтаФорма);
	
	// Перезаполним закупочные цены и прошлые цены контрагента
	ЗаполнитьИнформационныеЦеныНаТовары();
	ПересчитатьНаценкуТабличнойЧасти(Ложь);
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	РеализацияТоваровУслугФормы.ОрганизацияПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	МассивАдресовДоставкиКонтрагента = ПолучитьМассивАдресовДоставкиКонтрагента();
	Если МассивАдресовДоставкиКонтрагента.Количество() > 0 Тогда
		Объект.АдресДоставки = МассивАдресовДоставкиКонтрагента[0];
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;
	
	РеализацияТоваровУслугФормы.КонтрагентПриИзменении(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ДоговорКонтрагентаПриИзменении(ЭтаФорма);
	
	// Обновим ремя доставки при выборе договора
	ДанныеТранспортнойЛогистики = ТранспортнаяЛогистикаСервер.ДанныеТранспортнойЛогистики(Объект);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеТранспортнойЛогистики, "ВремяЛогистикиНачало, ВремяЛогистикиОкончание");
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	РеализацияТоваровУслугФормы.СкладПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаПатентеПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ОбработатьИзменениеДеятельностьНаПатенте(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.УстановитьПараметрыВыбора(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.УстановитьДеятельностьНаТорговомСборе(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДеятельностьНаТорговомСбореПриИзмененииНаСервере()
	
	РеализацияТоваровУслугФормы.ОбработатьИзменениеДеятельностьНаПатенте(ЭтотОбъект);
	
	РеализацияТоваровУслугФормы.УстановитьПараметрыВыбора(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоШтрихкодуНаСервере(Штрихкод)
	РеализацияТоваровУслугФормы.ДобавитьПоШтрихкодуНаСервере(ЭтотОбъект, Штрихкод);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЭтоДоговорПоставкиГосЗакупок(ДоговорКонтрагента)
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ГосЗакупкиСервер.ЭтоДоговорПоставкиГосЗакупок(ДоговорКонтрагента);
	
КонецФункции

&НаСервереБезКонтекста
Функция АктуальныеДоговораКонтрагента(Контрагент, Дата)
	
	Возврат Справочники.ДоговорыКонтрагентов.АктуальныеДоговораКонтрагента(Контрагент, Дата);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРазделПеревозкаАвтотранспортом(Грузоотправитель = Неопределено, Грузополучатель = Неопределено)
	
	ПраметрыПодстановки = Новый Структура;
	ПраметрыПодстановки.Вставить("ПеревозкаАвтотранспортом", Истина);
	
	Если Грузоотправитель = Неопределено Тогда
		ПраметрыПодстановки.Вставить("Грузоотправитель", Объект.Организация);
	Иначе
		ПраметрыПодстановки.Вставить("Грузоотправитель", Грузоотправитель);
	КонецЕсли;
	
	Если Грузополучатель = Неопределено Тогда
		ПраметрыПодстановки.Вставить("Грузополучатель", Объект.Контрагент);
	Иначе
		ПраметрыПодстановки.Вставить("Грузополучатель", Грузополучатель);
	КонецЕсли;
	
	ДанныеТранспортнойЛогистики = ТранспортнаяЛогистикаСервер.ДанныеТранспортнойЛогистики(Объект, ПраметрыПодстановки);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеТранспортнойЛогистики);
	
КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаСервере
Процедура ПересчитатьКоличествоИЦену(ИдентификаторСтроки = Неопределено)
	
	ГосЗакупкиСервер.ПересчитатьКоличествоИЦену(ЭтаФорма, ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНаценку()
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	Если Строка.ЦенаЗакупочная > 0 тогда
		Если Строка.Сумма > 0 Тогда
			Строка.Наценка = Строка.Сумма - (Строка.ЦенаЗакупочная * Строка.Количество);
			Себестоимость = Строка.Сумма - Строка.Наценка;
			Строка.НаценкаПроцент = (Строка.Сумма * 100 / Себестоимость) - 100;
		Иначе
			Строка.Наценка = 0;
			Строка.НаценкаПроцент = 0;
		КонецЕсли;
	Иначе
		Строка.Наценка = 0;
		Строка.НаценкаПроцент = 0;
	КонецЕсли;
	
	Если Строка.Наценка = 0 тогда
		Строка.НаценкаПредставление = "<Пусто>";
	Иначе
		Если ЭтоДокументГосЗакупок тогда
			Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб." + Символы.ПС + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ='(N %)'");
		Иначе
			Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб. " + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ=' (N %)'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНаценкуТабличнойЧасти(ОбновлятьЦены = Истина)
	
	Если ОбновлятьЦены Тогда
		Ценообразование.ОбновитьЦеныВТаблицеДокумента(Объект, "Товары", "ЦенаЗакупочная", "Закупочная");
	КонецЕсли;
	
	Для Каждого Строка из Объект.Товары цикл
		Если ЭтоДокументГосЗакупок И Строка.Количество = 0 тогда
			ПересчитатьКоличествоИЦену(Строка.ПолучитьИдентификатор());
		КонецЕсли;
		Если Строка.ЦенаЗакупочная > 0 тогда
			Строка.Наценка = Строка.Сумма - (Строка.ЦенаЗакупочная * Строка.Количество);
			Себестоимость = Строка.Сумма - Строка.Наценка;
			Если Строка.Сумма > 0 И Себестоимость > 0 тогда
				Строка.НаценкаПроцент = (Строка.Сумма * 100 / Себестоимость) - 100;
			Иначе
				Строка.НаценкаПроцент = 0;
			КонецЕсли;
		Иначе
			Строка.Наценка = 0;
			Строка.НаценкаПроцент = 0;
		КонецЕсли;
		
		Если Строка.Наценка = 0 тогда
			Строка.НаценкаПредставление = "<Пусто>";
		Иначе
			Если ЭтоДокументГосЗакупок тогда
				Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб." + Символы.ПС + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ='(N %)'");
			Иначе
				Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб. " + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ=' (N %)'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	РеализацияТоваровУслугФормы.ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта, СчетаУчетаКЗаполнению);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта);
	
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора()
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	
	ГосЗакупкиСервер.НормализоватьТаблицуФормыТоварыПриИзмененииДоговораКонтрагента(Объект.Дата,
	                                                                                Объект.Организация,
																					Объект.ДоговорКонтрагента,
																					ТаблицаТоваров,
	                                                                                Объект.СуммаВключаетНДС,
	                                                                                ТипЗнч(Объект.Ссылка));
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	ПересчитатьНаценкуТабличнойЧасти();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационныеЦеныНаТовары()
	
	Если НЕ ЭтоДокументГосЗакупок тогда
		Ценообразование.ОбновитьЦеныВТаблицеДокумента(Объект, "Товары", "ЦенаПредыдущейПродажи", "ПрошлаяПродажа");
	КонецЕсли;
	
	Ценообразование.ОбновитьЦеныВТаблицеДокумента(Объект, "Товары", "ЦенаЗакупочная", "Закупочная");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныСтроки()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеТовары = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если НЕ ЭтоДокументГосЗакупок тогда
		ТекущиеДанныеТовары.ЦенаПредыдущейПродажи = Ценообразование.ЦенаНоменклатуры("ПрошлаяПродажа",
		                                                                             Объект.Дата,
		                                                                             ТекущиеДанныеТовары.Номенклатура,
		                                                                             Объект.Контрагент);
	КонецЕсли;
	
	ТекущиеДанныеТовары.ЦенаЗакупочная = Ценообразование.ЦенаНоменклатуры("Закупочная",
	                                                                      Объект.Дата,
	                                                                      ТекущиеДанныеТовары.Номенклатура);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.Товары.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС");
	Форма.ИтогиНаценка  = Объект.Товары.Итог("Наценка");
	
	ИтогиНаценкаПроцент = 0;
	Если Форма.ИтогиВсего > 0 тогда
		Себестоимость = Форма.ИтогиВсего - Форма.ИтогиНаценка;
		Если Себестоимость > 0 тогда
			ИтогиНаценкаПроцент = (Форма.ИтогиВсего * 100 / Себестоимость) - 100;
		Иначе
			ИтогиНаценкаПроцент = 0;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИтогиНаценкаПроцент = ИтогиНаценкаПроцент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСпецификацииДоговора()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЭтоДокументГосЗакупок тогда
		ДанныеСпецификации = ГосЗакупкиСервер.ДанныеСпецификацииДоговора(Объект.ДоговорКонтрагента);
		СпецификацияДоговора = ДанныеСпецификации.Ссылка;
		КомментарийСпецификации = ДанныеСпецификации.Комментарий;
	Иначе
		СпецификацияДоговора = ПредопределенноеЗначение("Документ.СпецификацияДоговора.ПустаяСсылка");
		КомментарийСпецификации = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпецификацияДоговора) тогда
		Элементы.ГруппаСпецификация.Видимость = Истина;
		Элементы.КомментарийСпецификации.Видимость = НЕ ПустаяСтрока(КомментарийСпецификации);
	Иначе
		Элементы.ГруппаСпецификация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьПодписи(Форма)
	
	Объект = Форма.Объект;
	
	ПустоеЗначение = "<Пусто>";
	Заголовок = "";
	
	Заголовок = "За руководителя:        " + ?(ЗначениеЗаполнено(Объект.Руководитель), Строка(Объект.Руководитель), ПустоеЗначение) + "; ";
	Заголовок = Заголовок + Символы.ПС + "За главного бухгалтера: " + ?(ЗначениеЗаполнено(Объект.ГлавныйБухгалтер), Строка(Объект.ГлавныйБухгалтер), ПустоеЗначение) + "; ";
	Заголовок = Заголовок + Символы.ПС + "За оформление (УПД):    " + ?(ЗначениеЗаполнено(Объект.ОтветственныйЗаОформление), Строка(Объект.ОтветственныйЗаОформление), ПустоеЗначение) + "; ";
	Заголовок = Заголовок + Символы.ПС + "Отпуск произвел:        " + ?(ЗначениеЗаполнено(Объект.ОтпускПроизвел), Строка(Объект.ОтпускПроизвел), ПустоеЗначение);
	
	Форма.Элементы.ДекорацияПодписи.Заголовок = Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОчиститьГрузополучателя(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРазделПеревозкаАвтотранспортом();
		ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма, Истина);
	КонецЕсли;
		
КонецПроцедуры

// Прочий функционал:

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетТабачнойПродукцииМОТП)
	
	Если (Не ИспользоватьКонтрольныеЗнакиГИСМ)
		И (Не ВестиУчетТабачнойПродукцииМОТП) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеМаркируемаяПродукция = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина), "ПродукцияМаркируемаяДляГИСМ, ТабачнаяПродукция");
	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаНоменклатуры = СоответствиеМаркируемаяПродукция.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаНоменклатуры = Неопределено Тогда
			ПараметрыМаркируемойПродукции = Новый Структура("ПродукцияМаркируемаяДляГИСМ , МаркируемаяПродукцияГосИС" , Ложь, Ложь);
		Иначе
			ПараметрыМаркируемойПродукции = Новый Структура("ПродукцияМаркируемаяДляГИСМ , МаркируемаяПродукцияГосИС" , 
				СтрокаНоменклатуры.ПродукцияМаркируемаяДляГИСМ, СтрокаНоменклатуры.ТабачнаяПродукция);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыМаркируемойПродукции);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)

	Объект = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС",                  Объект.СуммаВключаетНДС);
	ПараметрыОбъекта.Вставить("ДокументБезНДС",                    Объект.ДокументБезНДС);
	ПараметрыОбъекта.Вставить("ПлательщикНДФЛ",                    Форма.ПлательщикНДФЛ);
	ПараметрыОбъекта.Вставить("СчетУчетаРасчетовСКонтрагентом",     Объект.СчетУчетаРасчетовСКонтрагентом);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если Не СтрокаТабличнойЧасти.Свойство("АналитикаУчета") 
		ИЛИ НЕ ПользовательУправляетСчетамиУчета Тогда
		Возврат;
	КонецЕсли;
	
	// При вызове с клиента: чтобы сократить обмен с сервером, передадим только нужные данные
	// При вызове с сервера: функциональная опция может скрыть эти поля
	ДанныеЗаполнения = Новый Структура("СчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТабличнойЧасти);
	
	ОписаниеАналитикиУчета = ОписаниеАналитикиУчета(
		ДанныеЗаполнения,
		Не ПараметрыОбъекта.ДокументБезНДС,
		ПараметрыОбъекта.ПлательщикНДФЛ);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ОписаниеАналитикиУчета);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеАналитикиУчета(Знач ДанныеСтроки, Знач ЗаполнятьНДС, Знач ЗаполнятьНДФЛ)
	
	Результат = Новый Структура;
	Результат.Вставить("АналитикаУчета",          "");
	Результат.Вставить("СчетУчетаЗабалансовый", Ложь);
	Результат.Вставить("СчетУчетаПартионный", Ложь);
	Результат.Вставить("АналитикаУчетаЗаполнена", Истина);
	
	ВидСубконтоНГ			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	
	// СчетУчета
	Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчета) Тогда
		СвойстваСчета 			 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчета);
		Результат.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
		Результат.СчетУчетаПартионный = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
			ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии
			ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
		Результат.АналитикаУчета = СвойстваСчета.Код;
	Иначе
		Результат.АналитикаУчета           = ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения();
		Результат.АналитикаУчетаЗаполнена  = Ложь;
	КонецЕсли;
	
	// Счета дохода, расхода и НДС учитываются, если счет учета товара незабалансовый
	Если НЕ Результат.СчетУчетаЗабалансовый Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.СчетДоходов) Тогда
			
			СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетДоходов);
			Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			
			Если СвойстваСчета.КоличествоСубконто >= 1 Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.Субконто) Тогда
					ТипСубконто = ТипЗнч(ДанныеСтроки.Субконто);
					ПредставлениеСубконто = "";
					
					Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
					ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
						ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Субконто, "Представление");
					Иначе
						ПредставлениеСубконто = Строка(ДанныеСтроки.Субконто);
					КонецЕсли;
					Если НЕ (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ И БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу()) Тогда
						Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + ПредставлениеСубконто;
					КонецЕсли;
				Иначе
					Результат.АналитикаУчета = Результат.АналитикаУчета + ", <...>";
					
					// Заполнение субконто обязательно для ИП, когда на счете есть субконто "Номенклатурные группы".
					Если ЗаполнятьНДФЛ
						И (СвойстваСчета.ВидСубконто1 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто2 = ВидСубконтоНГ
							ИЛИ СвойстваСчета.ВидСубконто3 = ВидСубконтоНГ) Тогда
						Результат.АналитикаУчетаЗаполнена = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
	    	
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
	    Если ЗначениеЗаполнено(ДанныеСтроки.СчетРасходов) Тогда
	    	СвойстваСчета 		= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетРасходов);
	    	Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
	    Иначе
	    	Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
			Результат.АналитикаУчетаЗаполнена = Ложь;
	    КонецЕсли;
		
		Если ЗаполнятьНДС Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.СчетУчетаНДСПоРеализации) Тогда
				СвойстваСчета 		     = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДанныеСтроки.СчетУчетаНДСПоРеализации);
				Результат.АналитикаУчета = Результат.АналитикаУчета + ", " + СвойстваСчета.Код;
			Иначе
				Если ДанныеСтроки.СуммаНДС <> 0 Тогда
					Результат.АналитикаУчета          = Результат.АналитикаУчета + ", <...>";
					Результат.АналитикаУчетаЗаполнена = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ПриИзмененииЦеныИВалютыНаСервере(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)

	РеализацияТоваровУслугФормы.ЗаполнитьРассчитатьСуммы(
		ЭтаФорма,
		ВалютаДоИзменения,
		КурсДоИзменения,
		КратностьДоИзменения,
		ПерезаполнитьЦены,
		ПересчитатьЦены,
		ПересчитатьНДС);

	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	РеализацияТоваровУслугФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьИнформационныеЦеныНаТовары();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПоступлению(ТабличнаяЧасть, "Добавить", ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьИнформационныеЦеныНаТовары();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииБанковскогоСчетаИлиОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетОрганизации) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияПоСчетуНаКлиенте(ВыбранноеЗначение, ТабличнаяЧасть)
	
	Если ЗначениеЗаполнено(ТабличнаяЧасть) И Объект[ТабличнаяЧасть].Количество() = 0 Тогда
	
		ОбработкаЗаполненияПоСчетуНаСервере(ВыбранноеЗначение, ТабличнаяЧасть);
	
	Иначе
	
		ТекстВопроса = "Заполнить документ по счету?";
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);

		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоСчетуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоСчетуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаЗаполненияПоСчетуНаСервере(ДополнительныеПараметры.ВыбранноеЗначение, ДополнительныеПараметры.ТабличнаяЧасть);
	Иначе
		Объект.СчетНаОплатуПокупателю = ДополнительныеПараметры.ВыбранноеЗначение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	РеализацияТоваровУслугФормы.ОбработкаЗаполненияПоСчету(ЭтаФорма, ВыбранноеЗначение, ТабличнаяЧасть);

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнитьИнформационныеЦеныНаТовары();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	РеализацияТоваровУслугФормы.ОбработкаОповещенияОбработкиТабличнойЧастиТовары(ЭтаФорма, Параметры);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	ДанныеСтроки 	= Объект.Товары.НайтиПоИдентификатору(ВыбранноеЗначение);
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата", 			Объект.Дата);
	ПараметрыФормы.Вставить("Организация", 		Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТаблицы",		"Товары");
	ПараметрыФормы.Вставить("ДокументБезНДС", 	Объект.ДокументБезНДС);
	
	ПараметрыФормы.Вставить("СчетУчета", 	ДанныеСтроки.СчетУчета);
	ПараметрыФормы.Вставить("СчетДоходов", 	ДанныеСтроки.СчетДоходов);
	ПараметрыФормы.Вставить("Субконто", 	ДанныеСтроки.Субконто);
	ПараметрыФормы.Вставить("СчетРасходов", ДанныеСтроки.СчетРасходов);
	ПараметрыФормы.Вставить("СчетУчетаНДСПоРеализации", ДанныеСтроки.СчетУчетаНДСПоРеализации);
	ПараметрыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("СуммаНДС", 	ДанныеСтроки.СуммаНДС);
	
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаРедактированияСтрокиТоварыУслуги", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАналитикиУчетаНаКлиенте(ЗначенияВыбранныеВФормеАналитикиУчета)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияВыбранныеВФормеАналитикиУчета);
	
	Модифицированность = Истина;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если СтрокаТабличнойЧасти.Свойство("АналитикаУчета") И ПользовательУправляетСчетамиУчета Тогда
		ПараметрыОбъекта = Неопределено;
		ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);
		ЗаполнитьАналитикуУчета(СтрокаТабличнойЧасти, ПараметрыОбъекта);
		Если СпособОценкиМПЗПоСредней И НЕ (СтрокаТабличнойЧасти.СчетУчетаЗабалансовый И СтрокаТабличнойЧасти.СчетУчетаПартионный) Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОприходования) Тогда
				СтрокаТабличнойЧасти.Себестоимость = 0;
				СтрокаТабличнойЧасти.ДокументОприходования = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПатентОбработкаВыбора(ВыбранныйПатент)
	
	Если ТипЗнч(ВыбранныйПатент) <> Тип("СправочникСсылка.Патенты") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПатентОбработкаВыбораНаСервере(ВыбранныйПатент)
	
	Если НЕ УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаПатенте       = Истина;
		Объект.Патент                      = ВыбранныйПатент;
		
		ДеятельностьНаПатентеПриИзмененииНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивАдресовДоставкиКонтрагента()

	МассивАдресовДоставки = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат МассивАдресовДоставки;
	КонецЕсли;
	
	ТипыКИ = Новый Массив;
	ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Объекты = Новый Массив();
	Объекты.Добавить(Объект.Контрагент);
	Адреса = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(Объекты, ТипыКИ);
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо");
	
	ВидФактАдреса = ?(ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	
	Для каждого Адрес Из Адреса Цикл
		Если Адрес.Вид = ВидФактАдреса Тогда
			МассивАдресовДоставки.Вставить(0,Адрес.Представление);
		Иначе
			МассивАдресовДоставки.Добавить(Адрес.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивАдресовДоставки;

КонецФункции

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыАналитикаУчета");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокументов

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПодразделениеОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()

	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПодписиНажатие(Элемент)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", 				ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", 					Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент",					Объект.Контрагент);
	ПараметрыФормы.Вставить("ДатаДокумента",				Объект.Дата);
	ПараметрыФормы.Вставить("Руководитель",					Объект.Руководитель);
	ПараметрыФормы.Вставить("ЗаРуководителяНаОсновании", 	Объект.ЗаРуководителяНаОсновании);
	ПараметрыФормы.Вставить("ГлавныйБухгалтер",				Объект.ГлавныйБухгалтер);
	ПараметрыФормы.Вставить("ЗаГлавногоБухгалтераНаОсновании",Объект.ЗаГлавногоБухгалтераНаОсновании);
	ПараметрыФормы.Вставить("ОтпускПроизвел",				Объект.ОтпускПроизвел);
	ПараметрыФормы.Вставить("ДоверенностьНомер",			Объект.ДоверенностьНомер);
	ПараметрыФормы.Вставить("ДоверенностьДата",				Объект.ДоверенностьДата);
	ПараметрыФормы.Вставить("ДоверенностьВыдана",			Объект.ДоверенностьВыдана);
	ПараметрыФормы.Вставить("ДоверенностьЧерезКого",		Объект.ДоверенностьЧерезКого);
	ПараметрыФормы.Вставить("ОтветственныйЗаОформление",	Объект.ОтветственныйЗаОформление);
	ПараметрыФормы.Вставить("ЗаЗаказчикаНаОсновании",		"");
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаПодписиТовары", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДоставкаНажатие(Элемент)
	
	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ТранспортнаяЛогистикаКлиент.ОткрытьФормуДокументДоставка(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	РеализацияТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);

	ДобавленныеСтроки = РеализацияТоваровУслугФормы.ОбработкаВыбораПодборВставкаИзБуфера(ЭтаФорма, ВыбранноеЗначение, ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из ДобавленныеСтроки.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
	ЗаполнитьПризнакМаркируемойПродукцииТаблицыТовары(ДобавленныеСтроки.Товары, ИспользоватьКонтрольныеЗнакиГИСМ, ВестиУчетТабачнойПродукцииМОТП);
	
	ЗаполнитьИнформационныеЦеныНаТовары();
	ПересчитатьНаценкуТабличнойЧасти();
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВГИСМ(Команда)
	ИнтеграцияГИСМКлиентБП.КомандаВыгрузитьВГИСМ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВВЕТИС(Команда)
	
	ДополнительныеПараметры = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ИсходящаяТранспортнаяОперацияВЕТИС.ФормаОбъекта", ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	Возврат "Товары";
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("КоличествоМест");
	СписокСвойств.Добавить("ЕдиницаИзмерения");
	СписокСвойств.Добавить("Коэффициент");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("СтавкаНДС");
	СписокСвойств.Добавить("НомерГТД");
	СписокСвойств.Добавить("СтранаПроисхождения");
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетДоходов");
			СписокСвойств.Добавить("Субконто");
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");
			СписокСвойств.Добавить("СчетРасходов");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ДополнительныеПараметры = Неопределено;
	СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, ДополнительныеПараметры);
	
КонецПроцедуры

ЭтоНоваяСтрока = Ложь;
