#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		
		СистемныеНастройки = ОбщегоНазначенияБазарСервер.СистемныеНастройкиБазар(Объект.Дата);
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Объект.ТипЦен = СистемныеНастройки.ТипЦенПродажи;
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = СистемныеНастройки.СкладОтгрузки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) тогда
			
			АктуальныеДоговора = АктуальныеДоговораКонтрагента(Объект.Контрагент, Объект.Дата);
			
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
				Если АктуальныеДоговора.Количество() > 0 тогда
					Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
				КонецЕсли;
			Иначе
				ТекущийДоговорАктуальный = Ложь;
				Если Объект.ДоговорКонтрагента.Владелец = Объект.Контрагент тогда
					Для Каждого АктуальныйДоговор из АктуальныеДоговора цикл
						Если АктуальныйДоговор = Объект.ДоговорКонтрагента тогда
							ТекущийДоговорАктуальный = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ ТекущийДоговорАктуальный тогда
					Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
					Если АктуальныеДоговора.Количество() > 0 тогда
						Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Объект.Грузополучатель = Объект.Контрагент тогда
				ЗаполнитьРазделПеревозкаАвтотранспортом(, Объект.Грузополучатель);
			Иначе
				ЗаполнитьРазделПеревозкаАвтотранспортом();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
	
	УстановитьУсловноеОформление();
	ЗаполнитьДанныеСпецификацииДоговора();
	ЗаполнитьИнформационныеЦеныНаТовары();
	ПересчитатьНаценкуТабличнойЧасти(Ложь);
	УправлениеФормой(ЭтаФорма);
	
	ПравоРедактированияСрокаОплаты  = СрокиОплатыДокументов.ПравоРедактирования();
	Если Не ПравоРедактированияСрокаОплаты Тогда
		Элементы.СрокОплаты.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.СрокОплаты.ТолькоПросмотр       = Истина;
	КонецЕсли;
	Если НЕ ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СрокиОплатыПокупателями) Тогда
		// В подсказке отображается ссылка на общую форму СрокиОплатыПокупателям.
		// Без этой ссылки подсказка теряет смысл, поэтому в случае, если пользователю
		// недоступна форма, то не показываем подсказку.
		Элементы.СрокОплаты.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
		ТекущийЭлемент = Элементы.Контрагент;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
		ТекущийЭлемент = Элементы.ДоговорКонтрагента;
	Иначе
		ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() И
		ЗначениеЗаполнено(Объект.Грузополучатель) И
		Объект.Грузополучатель <> Объект.Контрагент Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветНаВопросОчиститьГрузополучателя", ЭтотОбъект),
		              "Поле ""Грузополучатель"" заполнено значением - "+Строка(Объект.Грузополучатель)+
		              " на основании скопированного документа! Очистить поле ""Грузополучатель""?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	Если ЭтоДокументГосЗакупок тогда
		ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатураГосЗакупок",, ЭтаФорма,,Объект.Дата);
	КонецЕсли;
	
	ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма);
	СформироватьНадписьРеквизитыОрганизацииКонтрагента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма"
		Или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатурыГосЗакупок.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПокупателю.Форма.ФормаРеквизитыОрганизацииКонтрагента" Тогда
		ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ВыбранноеЗначение, ИсточникВыбора);
		СформироватьНадписьРеквизитыОрганизацииКонтрагента(ЭтаФорма);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора"
		Или ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПоставщика.Форма.ФормаВыбора"
		Или ИсточникВыбора.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаВыбора" Тогда
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ДокументДоставка" Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма.Объект, ВыбранноеЗначение);
		ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЗаполнитьИнформационныеЦеныНаТовары();
	ОбновитьИтоги(ЭтаФорма);
	ПересчитатьНаценкуТабличнойЧасти(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)

	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Объект.ДоговорКонтрагента = НовыйОбъект;
		ДоговорКонтрагентаОбработатьИзменение();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка или при проведении оплаты от покупателя
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			ОбработатьОповещениеОбИзмененииСтатусДокумента();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		
		ОбработатьоповещениеОбИзмененииБанковскогоСчетаИлиОрганизации();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Источник = Объект.ОрганизацияПолучатель Тогда
		
		ОбработатьоповещениеОбИзмененииБанковскогоСчетаИлиОрганизации();
		
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекПараметровУчета" Тогда
		
		ОбработатьОповещениеОбИзмененииНастроекПараметровУчета();
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииБанковскогоСчетаИлиОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		ОрганизацияПолучательПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	ЗаполнитьИнформациюОбОплатеСчета();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеСчетНаОплатуПокупателю";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
		Объект.ОрганизацияПолучатель, 
		Объект.СтруктурнаяЕдиница, 
		ИспользоватьНесколькоБанковскихСчетовОрганизации, 
		Отказ, 
		ПараметрыЗаписи);
	
	СтруктураРеквизитовПодписи = Новый Структура;

	СтруктураРеквизитовПодписи.вставить("Руководитель",		"ЗаРуководителяНаОсновании");
	СтруктураРеквизитовПодписи.вставить("ГлавныйБухгалтер", "ЗаГлавногоБухгалтераНаОсновании");
	
	ОтветственныеЛицаБП.ПроверитьИзменениеПодписейДокумента(ТекущийОбъект,СтруктураРеквизитовПодписи,ПараметрыЗаписи);
	
	Если НЕ ЭтоДокументГосЗакупок И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		КонтрольРасчетовНаличнымиДеньгамиСервер.КонтрольРасчетовНаличнымиДеньгами(
			Объект,
			Объект.ДоговорКонтрагента,
			ИтогиВсего,
			Отказ
		);
		
		Ценообразование.КонтрольЦенПродажи(
			Объект,
			"Товары",
			"Номенклатура",
			"Закупочная",
			Отказ
		);
		
	КонецЕсли;
	
	Если ЭтоДокументГосЗакупок И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		СписокАктуальныхДоговоров = АктуальныеДоговораКонтрагента(
			Объект.Контрагент,
			Объект.Дата
		);
		
		Если СписокАктуальныхДоговоров.Найти(Объект.ДоговорКонтрагента) = Неопределено тогда
			ТекстСообщения =
				"Договор " +
				Объект.ДоговорКонтрагента +
				" имеет не корректный период действия!"
			;
			
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
				ТекстСообщения,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСтатусДокумента(ТекущийОбъект.Ссылка);
	
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(ТекущийОбъект.Ссылка, СрокОплаты);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка,
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	Если ВедетсяУчетНДСПоФЗ335
		И ПокупательНалоговыйАгентПоНДС = Истина Тогда 
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
	ОтветственныеЛицаБП.УстановитьПодписиПоУмолчанию(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
	
	Если ИнтеграцияCRMПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		РегистрыСведений.ДокументыИнтеграцииCRM.ЗаполнитьДанныеКОтправкеИОповеститьОбИзмененияхВФоне(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
	ЗаполнитьИнформационныеЦеныНаТовары();
	ПересчитатьНаценкуТабличнойЧасти(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПараметрыОткрытия", Новый Структура("АктивныйЭлемент", "СрокОплатыВыставленныхСчетов"));
	
	ОткрытьФорму("ОбщаяФорма.СрокиОплатыПокупателями", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	ТребуетсяПерерасчитатьСрокОплаты = ПравоРедактированияСрокаОплаты 
		И Объект.Ссылка.Пустая() 
		И (НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента));
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера ИЛИ ТребуетсяПерерасчитатьСрокОплаты Тогда
		
		// В случае если выбранный договор не подходит по дате, или договор не заполнен,
		// тогда меняем его на первый актуальный (на дату документа)
		АктуальныеДоговора = АктуальныеДоговораКонтрагента(Объект.Контрагент, Объект.Дата);
		ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
			
			Если АктуальныеДоговора.Количество() > 0 Тогда
				Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
			КонецЕсли;
			
		Иначе
			
			Если АктуальныеДоговора.Найти(Объект.ДоговорКонтрагента) = Неопределено тогда
				
				Если АктуальныеДоговора.Количество() > 0 Тогда
					Объект.ДоговорКонтрагента = АктуальныеДоговора.Получить(0);
				Иначе
					Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийДоговорКонтрагента <> Объект.ДоговорКонтрагента ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) тогда
			
			НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора();
			ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				ДоговорКонтрагентаОбработатьИзменение();
				ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаПриИзмененииНаСервере(ТребуетсяВызовСервера, ТребуетсяПерерасчитатьСрокОплаты);
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаПриИзменении(Элемент)
	
	ЗаполнитьИнформациюОбОплатеСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОрганизацияПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПодразделениеОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииНаСервере();
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;
	
	ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
	ЗаполнитьДанныеСпецификацииДоговора();
	НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора();
	ЗаполнитьРазделПеревозкаАвтотранспортом();
	ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораКонтрагенты");

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
	ЭтоДокументГосЗакупок = ЭтоДоговорПоставкиГосЗакупок(Объект.ДоговорКонтрагента);
	ЗаполнитьДанныеСпецификацииДоговора();
	НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора();
	ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма);
	
	Если ЭтоДокументГосЗакупок тогда
		ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатураГосЗакупок", Неопределено, ЭтаФорма,,Объект.Дата);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(АктуальныеДоговораКонтрагента(Объект.Контрагент, Объект.Дата));
	
	ДанныеВыбора = СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	
	ОрганизацияПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
    ОтветственныйПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаНажатие(Элемент)
	
	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ТранспортнаяЛогистикаКлиент.ОткрытьФормуДокументДоставка(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодписиНажатие(Элемент)

	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр", 				ТолькоПросмотр);
	ПараметрыФормы.Вставить("Контрагент",					Объект.Контрагент);
	ПараметрыФормы.Вставить("АдресДоставки", 				Объект.АдресДоставки);
	ПараметрыФормы.Вставить("ГлавныйБухгалтер",				Объект.ГлавныйБухгалтер);
	ПараметрыФормы.Вставить("Организация",					Объект.Организация);
	ПараметрыФормы.Вставить("ДатаДокумента",				Объект.Дата);
	ПараметрыФормы.Вставить("ДополнительныеУсловия",		Объект.ДополнительныеУсловия);
	ПараметрыФормы.Вставить("ЗаГлавногоБухгалтераНаОсновании",Объект.ЗаГлавногоБухгалтераНаОсновании);
	ПараметрыФормы.Вставить("ЗаРуководителяНаОсновании", 	Объект.ЗаРуководителяНаОсновании);
	ПараметрыФормы.Вставить("Руководитель",					Объект.Руководитель);
	ПараметрыФормы.Вставить("Склад",						Объект.Склад);
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.Форма.ФормаРеквизитыОрганизацииКонтрагента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатура", Элементы.Товары.ТекущиеДанные, ЭтаФорма,,Объект.Дата);
	ТоварыПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриАктивизацииСтрокиНаСервере()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	Строка = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Строка.НоменклатураГосЗакупок.ЕдиницаИзмеренияГосЗакупок.Дробная тогда
		Элементы.ТоварыКоличествоГосЗакупок.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
	Иначе
		Элементы.ТоварыКоличествоГосЗакупок.ФорматРедактирования = "ЧЦ=15; ЧДЦ=0";
	КонецЕсли;
	
	Если Строка.Номенклатура.ЕдиницаИзмерения.Дробная тогда
		Элементы.ТоварыКоличество.ФорматРедактирования = "ЧЦ=15; ЧДЦ=3";
	Иначе
		Элементы.ТоварыКоличество.ФорматРедактирования = "ЧЦ=15; ЧДЦ=0";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
		Элемент.ТекущиеДанные.ЭтоУслуга = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, ЭтоУслуга, СуммаСкидки");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС, СтавкаНДС,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента,
		|ДокументБезНДС, Реализация, ПокупательНалоговыйАгентПоНДС, ВедетсяУчетНДСПоФЗ335, ЭтоДокументГосЗакупок");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	Если Не ИспользоватьТипыЦенНоменклатуры Тогда
		ПараметрыОбъекта.ТипЦен = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	ПараметрыОбъекта.Реализация = Истина;
	ПараметрыОбъекта.ВедетсяУчетНДСПоФЗ335 = ВедетсяУчетНДСПоФЗ335;
	ПараметрыОбъекта.ПокупательНалоговыйАгентПоНДС = ПокупательНалоговыйАгентПоНДС;
	ПараметрыОбъекта.ЭтоДокументГосЗакупок = ЭтоДокументГосЗакупок;
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокаТаблицы);
	
	Если ЭтоДокументГосЗакупок тогда
		ГосЗакупкиКлиент.ТоварыНоменклатураПриИзменении(ЭтаФорма);
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) - СтрокаТаблицы.СуммаСкидки;
	
	ОбновитьЦеныСтроки();
	ПересчитатьНаценку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыВыбораНоменклатура");
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Склад",           Объект.Склад);
	СтруктураПараметров.Вставить("ДатаОстатков",    Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",          Объект.ТипЦен);
	СтруктураПараметров.Вставить("ДатаЦен",         Объект.Дата);
	СтруктураПараметров.Вставить("ТекущаяСтрока",   Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", 
		СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ВидыНоменклатуры", "Товары, Услуги");
	
	РаботаСНоменклатуройКлиент.НоменклатураОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоДокументГосЗакупок тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяНоменклатураГосЗакупок = Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок;
		ТекущаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
		
		ГосЗакупкиКлиент.ПолеНоменклатураИлиНоменклатураГосЗакупокОбработкаВыбора(ЭтаФорма,
		                                                                          Элементы.Товары.ТекущиеДанные,
		                                                                          СтрЗаменить(Элемент.Имя, "Товары", ""),
		                                                                          ВыбранноеЗначение);
		
		ПересчитатьКоличествоИЦену();
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦенаГосЗакупок(ЭтаФорма, "Товары");
		
		Если Элементы.Товары.ТекущиеДанные.Номенклатура <> ТекущаяНоменклатура тогда
			ТоварыНоменклатураПриИзменении(Элемент);
		КонецЕсли;
		
		Если Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок <> ТекущаяНоменклатураГосЗакупок тогда
			ГосЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыТаблицыТовары("ТоварыНоменклатура", Элементы.Товары.ТекущиеДанные, ЭтаФорма,, Объект.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок) тогда
			ТекущийЭлемент = Элементы.ТоварыКоличествоГосЗакупок;
		КонецЕсли;
		
		Модифицированность = Истина;
	Иначе
		РаботаСНоменклатуройКлиент.НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
	ТоварыПриАктивизацииСтрокиНаСервере();
	
	ОбновитьЦеныСтроки();
	ПересчитатьНаценку();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураГосЗакупокПриИзменении(Элемент)
	
	ГосЗакупкиКлиент.ПолеНоменклатураИлиНоменклатураГосЗакупокОбработкаВыбора(ЭтаФорма,
	                                                                          Элементы.Товары.ТекущиеДанные,
	                                                                          "НоменклатураГосЗакупок",
	                                                                          Элементы.Товары.ТекущиеДанные.НоменклатураГосЗакупок);
	
	ПересчитатьКоличествоИЦену();
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦенаГосЗакупок(ЭтаФорма, "Товары");
	ОбновитьЦеныСтроки();
	ПересчитатьНаценку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ Строка.ЭтоУслуга И Строка.Количество < 0 Тогда
		Строка.Количество = 0;
		Строка.КоличествоГосЗакупок = 0;
	КонецЕсли;
	
	Если ЭтоДокументГосЗакупок И Строка.ЦенаГосЗакупок = 0 тогда
		ДанныеЦены = ВернутьЦенуНоменклатурыГосЗаказа(Объект.ДоговорКонтрагента, Строка.НоменклатураГосЗакупок, Строка.Номенклатура);
		Если НЕ ДанныеЦены = Неопределено тогда
			Строка.ЦенаГосЗакупок = ДанныеЦены.ЦенаГосЗакупок;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСуммуТовары();
	ПересчитатьКоличествоИЦену();
	ПересчитатьНаценку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ Строка.ЭтоУслуга И Строка.Цена < 0 Тогда
		Строка.Цена = 0;
		Строка.ЦенаГосЗакупок = 0;
	КонецЕсли;
	
	ПересчитатьСуммуТовары();
	ПересчитатьКоличествоИЦену();
	ПересчитатьНаценку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ Строка.ЭтоУслуга И Строка.Сумма < 0 Тогда
	
		Строка.Сумма = 0;
	
	КонецЕсли;
	
	Строка.СуммаСкидки = Строка.Сумма * Строка.ПроцентСкидки / 100;
	
	Если ЭтоДокументГосЗакупок тогда
		ПересчитатьКоличествоГосЗакупок();
		НалоговыйАгентПоФЗ335 = ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335;
		ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС,,НалоговыйАгентПоФЗ335);
	Иначе
		ПересчитатьЦену();
	КонецЕсли;
	
	ПересчитатьНаценку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	
	Если ВидСкидки <> 2 Тогда
		Объект.СуммаСкидки = 0;
	КонецЕсли;
	
	Если ВидСкидки <> 1 
			И (Объект.Товары.Итог("СуммаСкидки") <> 0 ИЛИ Объект.Товары.Итог("ПроцентСкидки") <> 0) Тогда
		Для каждого Строка Из Объект.Товары Цикл
			Если Строка.СуммаСкидки <> 0 или Строка.ПроцентСкидки <> 0 Тогда
				Строка.СуммаСкидки = 0;
				Строка.ПроцентСкидки = 0;
				
				НалоговыйАгентПоФЗ335 = ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335;
				ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС,,НалоговыйАгентПоФЗ335);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПоДокументуПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.ПроцентСкидки / 100;
	
	НалоговыйАгентПоФЗ335 = ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС,,НалоговыйАгентПоФЗ335);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.ПроцентСкидки = ?(СтрокаТабличнойЧасти.Сумма = 0, 0, СтрокаТабличнойЧасти.СуммаСкидки / СтрокаТабличнойЧасти.Сумма * 100);
	
	НалоговыйАгентПоФЗ335 = ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС,,НалоговыйАгентПоФЗ335);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ Строка.ЭтоУслуга И Строка.СуммаНДС < 0 Тогда
	
		Строка.СуммаНДС = 0;
	
	КонецЕсли;
	
	ПересчитатьВсего();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)

	Если ЭтоДокументГосЗакупок тогда
		ПараметрыПодбора = ПолучитьПараметрыПодбораГосЗакупки();
		Если ПараметрыПодбора <> Неопределено Тогда
			ОткрытьФорму("Обработка.ПодборНоменклатурыГосЗакупок.Форма.Форма", ПараметрыПодбора,
				ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ПараметрыПодбора = ПолучитьПараметрыПодбора();
		Если ПараметрыПодбора <> Неопределено Тогда
			ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
				ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДобавитьИзРеализации(Команда)
	
	НачатьОткрытиеФормыВыбораДокументаДляЗаполнения(
		"Товары", ИмяСпособаЗаполненияДобавить(), "РеализацияТоваровУслуг");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДобавитьИзПоступления(Команда)
	
	НачатьОткрытиеФормыВыбораДокументаДляЗаполнения(
		"Товары", ИмяСпособаЗаполненияДобавить(), "ПоступлениеТоваровУслуг");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДобавитьИзСчетаПоставщика(Команда)
	
	НачатьОткрытиеФормыВыбораДокументаДляЗаполнения(
		"Товары", ИмяСпособаЗаполненияДобавить(), "СчетНаОплатуПоставщика");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьИзРеализации(Команда)
	
	НачатьОткрытиеФормыВыбораДокументаДляЗаполнения(
		"Товары", ИмяСпособаЗаполненияЗаполнить(), "РеализацияТоваровУслуг");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьИзПоступления(Команда)
	
	НачатьОткрытиеФормыВыбораДокументаДляЗаполнения(
		"Товары", ИмяСпособаЗаполненияЗаполнить(), "ПоступлениеТоваровУслуг");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьИзСчетаПоставщика(Команда)
	
	НачатьОткрытиеФормыВыбораДокументаДляЗаполнения(
		"Товары", ИмяСпособаЗаполненияЗаполнить(), "СчетНаОплатуПоставщика");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЗаполнениеНаОснованииРеализации = ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ИзменятьЦены = Не ЗаполнениеНаОснованииРеализации;
	ДокументОбъект.СкопироватьТовары(ВыбранноеЗначение, ИзменятьЦены);
	Если ЗаполнениеНаОснованииРеализации Тогда
		ДокументОбъект.СкопироватьУслуги(ВыбранноеЗначение, ИзменятьЦены);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура;
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеВидимость();
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	// ТоварыСтавкаНДС, ТоварыСуммаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.ДокументБезНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ПокупательНалоговыйАгентПоНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ВедетсяУчетНДСПоФЗ335",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыВсего
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"Объект.ДокументБезНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		"ВидСкидки",
		ВидСравненияКомпоновкиДанных.НеРавно,
		1);
		
	ГруппаОтбора3 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора3,
		"ПокупательНалоговыйАгентПоНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора3,
		"ВедетсяУчетНДСПоФЗ335",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора3,
		"ВидСкидки",
		ВидСравненияКомпоновкиДанных.НеРавно,
		1);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыПроцентСкидки, ТоварыСуммаСкидки
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПроцентСкидки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаСкидки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВидСкидки", ВидСравненияКомпоновкиДанных.НеРавно, 1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Цвет текста итоги наценки
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаПроцент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогиНаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 14.99);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаПроцент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогиНаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 5);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИтогиНаценкаПроцент");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИтогиНаценкаПроцент", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 15);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
	// Цвет текста товары наценка представление
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНаценкаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 14.99);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНаценкаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НаценкаПроцент", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 5);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНаценкаПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.НаценкаПроцент", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 15);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано") Тогда
		
		Форма.УстановитьУсловноеОформлениеТовары();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);

	// Номенклатура
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Содержание", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Количество
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	
	СрокОплатыВРабочихДнях = Константы.СрокОплатыСчетовПокупателю.Получить();
	СрокОплаты = СрокиОплатыДокументов.СрокОплатыСчетаПокупателю(Объект.Ссылка, Объект.Дата);

	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ЗначениеЗаполнено(Объект.ОрганизацияПолучатель.ОсновнойБанковскийСчет);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, УчетАгентскогоНДСПокупателем");
		ЭтоКомиссия = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
		ПокупательНалоговыйАгентПоНДС = РеквизитыДоговора.УчетАгентскогоНДСПокупателем;
		ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
			ВалютаОплаты = ВалютаРегламентированногоУчета;
		Иначе
			ВалютаОплаты = ВалютаВзаиморасчетов;
		КонецЕсли;
	Иначе
		
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		ЭтоКомиссия = Ложь;
		ПокупательНалоговыйАгентПоНДС = Ложь;
		ВалютаОплаты = ВалютаРегламентированногоУчета;
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
		и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменение();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СуммаСкидки <> 0 Тогда
		ВидСкидки = 2;
	ИначеЕсли Объект.Товары.Итог("СуммаСкидки") <> 0 Тогда
		ВидСкидки = 1;
	Иначе
		ВидСкидки = 0;
	КонецЕсли; 	
	Элементы.ОрганизацияПолучатель.СписокВыбора.ЗагрузитьЗначения(
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(Объект.Организация).ВыгрузитьЗначения());
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Элементы.ОрганизацияПолучатель.Видимость = НЕ ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
		ИЛИ Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	УправлениеФормой(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПлательщикНДС  = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ИспользоватьТипыЦенНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры")
		И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);
	ЕстьВалютныйУчет                = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ВестиУчетПоДоговорам            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	ВедетсяУчетНДСПоФЗ335           = УчетНДС.ВедетсяУчетНДСПоФЗ335(Объект.Дата);
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.ОрганизацияПолучатель);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьПодсказкуСрокаОплаты(Форма);
	
	// Доступность взаимосвязанных полей
	Элементы.ДоговорКонтрагента.Доступность       = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ПодразделениеОрганизации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ОрганизацияПолучатель.Доступность    = ЗначениеЗаполнено(Объект.Организация)
		И Элементы.ОрганизацияПолучатель.СписокВыбора.Количество() > 1;
	Элементы.СтруктурнаяЕдиница.Доступность       = ЗначениеЗаполнено(Объект.ОрганизацияПолучатель);
	
	Элементы.ИтогиСкидка.Видимость = Форма.ВидСкидки = 1;
	Элементы.ИтогиВсего.Заголовок = ?(Форма.ВидСкидки = 0, "Всего", "Всего со скидкой");
	
	НалоговыйАгентПоФЗ335 = Форма.ПокупательНалоговыйАгентПоНДС = Истина И Форма.ВедетсяУчетНДСПоФЗ335;
	
	Элементы.ИтогиВсегоНДС.Видимость = Не (Объект.ДокументБезНДС ИЛИ НалоговыйАгентПоФЗ335);
	
	Элементы.СкидкаПоДокументу.Видимость = Форма.ВидСкидки = 2;
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	Элементы.ТоварыЦеныИВалюта.Видимость = НЕ НалоговыйАгентПоФЗ335;
	
	Элементы.ТоварыЕдиницаИзмерения.Видимость = Истина;
	
	Если Форма.ЭтоДокументГосЗакупок тогда
		Элементы.ТоварыНоменклатураГосЗакупок.Видимость = Истина;
		Элементы.ТоварыПроцентСкидки.Видимость = Ложь;
		Элементы.ТоварыСуммаСкидки.Видимость = Ложь;
		Элементы.ТоварыКоэффициентГосЗакупок.Видимость = Истина;
		Элементы.ТоварыЕдиницаИзмеренияГосЗакупок.Видимость = Истина;
		Элементы.ГруппаСкидка.Видимость = Ложь;
		Элементы.ИзменитьТовары.Видимость = Ложь;
		Элементы.ТоварыЦенаПредыдущейПродажи.Видимость = Ложь;
		Элементы.ТоварыЦена.Видимость = Ложь;
		Элементы.ТоварыЦенаГосЗакупок.Видимость = Истина;
		Элементы.ТоварыКоличество.Видимость = Ложь;
		Элементы.ТоварыКоличествоГосЗакупок.Видимость = Истина;
		Элементы.ГруппаСтатусСрокОплаты.Видимость = Ложь;
		
		Элементы.ТоварыНаценкаПредставление.Ширина = 8;
		
		Элементы.ТоварыНоменклатура.РедактированиеТекста = Ложь;
		Элементы.ТоварыНоменклатура.КнопкаВыбора = Ложь;
		Элементы.ТоварыНоменклатура.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		Элементы.ТоварыНоменклатура.КнопкаВыпадающегоСписка = Истина;
		Элементы.ТоварыНоменклатура.КнопкаСоздания = Ложь;
		
		Элементы.ТоварыГруппаСтавкаНДССуммаНДС.Группировка = ГруппировкаКолонок.Вертикальная;
	Иначе
		Элементы.ТоварыНоменклатураГосЗакупок.Видимость = Ложь;
		Элементы.ТоварыКоэффициентГосЗакупок.Видимость = Ложь;
		Элементы.ТоварыЕдиницаИзмеренияГосЗакупок.Видимость = Ложь;
		Элементы.ИзменитьТовары.Видимость = Истина;
		Элементы.ТоварыЦенаПредыдущейПродажи.Видимость = Истина;
		Элементы.ТоварыЦена.Видимость = Истина;
		Элементы.ТоварыЦенаГосЗакупок.Видимость = Ложь;
		Элементы.ТоварыКоличество.Видимость = Истина;
		Элементы.ТоварыКоличествоГосЗакупок.Видимость = Ложь;
		Элементы.ГруппаСтатусСрокОплаты.Видимость = Истина;
		
		Элементы.ТоварыНаценкаПредставление.Ширина = 16;
		
		Элементы.ТоварыНоменклатура.РедактированиеТекста = Истина;
		Элементы.ТоварыНоменклатура.КнопкаВыбора = Истина;
		Элементы.ТоварыНоменклатура.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.Авто;
		Элементы.ТоварыНоменклатура.КнопкаВыпадающегоСписка = Неопределено;
		Элементы.ТоварыНоменклатура.КнопкаСоздания = Неопределено;
		
		Элементы.ТоварыГруппаСтавкаНДССуммаНДС.Группировка = ГруппировкаКолонок.Горизонтальная;
	КонецЕсли;
	
	Элементы.КомментарийСпецификации.Видимость = НЕ ПустаяСтрока(Форма.КомментарийСпецификации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРеквизитыОрганизацииКонтрагента(ВыбранноеЗначение, ИсточникВыбора)

	ЭтаФорма.Модифицированность = Истина;
	
	ЗначениеСкладаДоИзменения = Объект.Склад;
	
	ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	Если ЗначениеСкладаДоИзменения <> Объект.Склад И ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОчиститьГрузополучателя(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРазделПеревозкаАвтотранспортом();
		ТранспортнаяЛогистикаКлиент.СформироватьНадписьДоставкаВДокументе(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

// Обслуживание типа цен - валюты - НДС:

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",       Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",       ТолькоПросмотр);

	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры
		ИЛИ (ЕстьВалютныйУчет И ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ТоварыЦеныИВалюта);		
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
			
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		ВалютаДоИзменения    = Объект.ВалютаДокумента;
		КурсДоИзменения 	 = Объект.КурсВзаиморасчетов;
		КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
		
		Объект.ТипЦен					= СтруктураЦеныИВалюта.ТипЦен;
		Объект.ВалютаДокумента 			= СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов 		= СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов 	= СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС 		= СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС		   	= СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				ВалютаДоИзменения, 
				КурсДоИзменения,
				КратностьДоИзменения,
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
		
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
		 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(Знач ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены = Ложь, ПересчитатьЦены = Ложь, ПересчитатьНДС = Ложь)
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
				СписокНоменклатуры,
				Объект.ТипЦен,
				Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Для каждого Строка Из Объект.Товары Цикл
		ЗначениеПустогоКоличества = ?(Строка.ЭтоУслуга, 1, 0);
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены,
			ПересчитатьЦены, ПересчитатьНДС, Истина, ЗначениеПустогоКоличества);
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, ЗначениеПустогоКоличества)
	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда
			
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);
			
		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		Если Объект.ДокументБезНДС Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
			
		ЦенаИзменилась = Цена <> Строка.Цена;
		
		Если ЦенаИзменилась Тогда
			Строка.Цена        = Цена;
			Строка.Сумма       = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
			Строка.СуммаСкидки = Строка.Сумма * Строка.ПроцентСкидки / 100;
		КонецЕсли;
		
		Если ЦенаИзменилась ИЛИ ПересчитатьНДС Тогда
			Строка.СуммаНДС    = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма - Строка.СуммаСкидки, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
				
			Строка.Всего       = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС) - Строка.СуммаСкидки;
		КонецЕсли;
		
	ИначеЕсли Цена <> Строка.Цена Тогда
		Строка.Цена  = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьЦенуНоменклатурыГосЗаказа(ДоговорКонтрагента, НоменклатураГосЗакупок, Номенклатура)
	
	Возврат ГосЗакупкиСервер.ВернутьЦенуНоменклатурыГосЗаказа(ДоговорКонтрагента, НоменклатураГосЗакупок, Номенклатура);
	
КонецФункции

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере(ТребуетсяВызовСервера, ТребуетсяПерерасчитатьСрокОплаты)
	
	Если ТребуетсяВызовСервера Тогда
		
		ДатаОбработатьИзменение();
		РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.Товары, Объект.Дата, ТекущаяДатаДокумента);
		УправлениеФормой(ЭтаФорма);
		
		ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
		
	КонецЕсли;
	
	Если ТребуетсяПерерасчитатьСрокОплаты Тогда
		СрокОплаты = СрокиОплатыДокументов.СрокОплатыНовогоСчетаПокупателю(Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();

	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	// Перезаполним закупочные цены и прошлые цены контрагента
	ЗаполнитьИнформационныеЦеныНаТовары();
	ПересчитатьНаценкуТабличнойЧасти(Ложь);
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()

	Если ПравоДоступа("Чтение", Метаданные.Справочники.Склады)
		И ПравоДоступа("Чтение", Метаданные.Справочники.ПодразделенияОрганизаций) Тогда
		
		ПодразделениеПоУмолчанию = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
		
		Если НЕ ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
			Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;

	Объект.ОрганизацияПолучатель = Объект.Организация;
	Объект.ДополнительныеУсловия = Объект.Организация.ДополнительныеУсловияПоУмолчанию;
	Элементы.ОрганизацияПолучатель.СписокВыбора.ЗагрузитьЗначения(
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(Объект.Организация).ВыгрузитьЗначения());

	УстановитьФункциональныеОпцииФормы();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);

	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.ОрганизацияПолучатель);
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	ЗаполнитьИнформациюОбОплатеСчета();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменение();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменение()

	МассивАдресовДоставкиКонтрагента = ПолучитьМассивАдресовДоставкиКонтрагента();
	Если МассивАдресовДоставкиКонтрагента.Количество() > 0 Тогда
		Объект.АдресДоставки = МассивАдресовДоставкиКонтрагента[0];
	Иначе
		Объект.АдресДоставки = "";
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение()
	
	ВалютаДоИзменения 	 = Объект.ВалютаДокумента;
	КурсДоИзменения   	 = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения    = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения   = Объект.СуммаВключаетНДС;
	ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, РасчетыВУсловныхЕдиницах, УстановленСрокОплаты, СрокОплаты");
	
	ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Объект.ВалютаДокумента = ВалютаВзаиморасчетов;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент  = РеквизитыДоговора.Владелец;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		 Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		 Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли;
	
	Если РеквизитыДоговора.УстановленСрокОплаты И ПравоРедактированияСрокаОплаты Тогда
		РезультатРасчета = СрокиОплатыДокументов.СрокОплатыДокументаРасчетов(Объект.Организация, Объект.Ссылка, Объект.Дата, Объект.ДоговорКонтрагента);
		Если РезультатРасчета.АвторасчетСрокаОплаты Тогда
			СрокОплаты = РезультатРасчета.СрокОплаты;
		КонецЕсли; 
	КонецЕсли; 
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	
	Если ЕстьСтрокиВТабличныхЧастях() Тогда
		ЗаполнитьРассчитатьСуммы(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ЭтоКомиссия = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	Иначе
		ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	// Обновим ремя доставки при выборе договора
	ДанныеТранспортнойЛогистики = ТранспортнаяЛогистикаСервер.ДанныеТранспортнойЛогистики(Объект);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеТранспортнойЛогистики, "ВремяЛогистикиНачало, ВремяЛогистикиОкончание");
	
	ОрганизацияПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииНаСервере()
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.ОрганизацияПолучатель);
		
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СтруктурнаяЕдиница, Объект.ОрганизацияПолучатель, ВалютаОплаты, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоДоговорПоставкиГосЗакупок(ДоговорКонтрагента)
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ГосЗакупкиСервер.ЭтоДоговорПоставкиГосЗакупок(ДоговорКонтрагента);
	
КонецФункции

&НаСервереБезКонтекста
Функция АктуальныеДоговораКонтрагента(Контрагент, Дата)
	
	Возврат Справочники.ДоговорыКонтрагентов.АктуальныеДоговораКонтрагента(Контрагент, Дата);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРазделПеревозкаАвтотранспортом(Грузоотправитель = Неопределено, Грузополучатель = Неопределено)
	
	ПраметрыПодстановки = Новый Структура;
	ПраметрыПодстановки.Вставить("ПеревозкаАвтотранспортом", Истина);
	
	Если Грузоотправитель = Неопределено Тогда
		ПраметрыПодстановки.Вставить("Грузоотправитель", Объект.Организация);
	Иначе
		ПраметрыПодстановки.Вставить("Грузоотправитель", Грузоотправитель);
	КонецЕсли;
	
	Если Грузополучатель = Неопределено Тогда
		ПраметрыПодстановки.Вставить("Грузополучатель", Объект.Контрагент);
	Иначе
		ПраметрыПодстановки.Вставить("Грузополучатель", Грузополучатель);
	КонецЕсли;
	
	ДанныеТранспортнойЛогистики = ТранспортнаяЛогистикаСервер.ДанныеТранспортнойЛогистики(Объект, ПраметрыПодстановки);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеТранспортнойЛогистики);
	
КонецПроцедуры

// Пересчеты реквизитов в строках табличных частей

&НаСервере
Процедура ПересчитатьКоличествоИЦену(ИдентификаторСтроки = Неопределено)
	
	ГосЗакупкиСервер.ПересчитатьКоличествоИЦену(ЭтаФорма, ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуТовары()

	Строка = Элементы.Товары.ТекущиеДанные;
	
	ЗначениеПустогоКоличества = ?(Строка.ЭтоУслуга, 1, 0);
	
	НалоговыйАгентПоФЗ335 = ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335;
	Если ЭтоДокументГосЗакупок тогда
		ОбщегоНазначенияБПКлиент.ПересчитатьСуммуГосЗакупок(Строка, Объект.СуммаВключаетНДС, ЗначениеПустогоКоличества,,НалоговыйАгентПоФЗ335);
	Иначе
		ОбщегоНазначенияБПКлиент.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС, ЗначениеПустогоКоличества,,НалоговыйАгентПоФЗ335);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКоличествоГосЗакупок()

	ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	Строка = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Строка.Сумма > 0 тогда
		Если Строка.ЦенаГосЗакупок = 0 тогда
			Строка.КоличествоГосЗакупок = 0;
			Строка.Количество = 0;
			Строка.Цена = 0;
			Строка.Сумма = 0;
		Иначе
			Если Строка.НоменклатураГосЗакупок.ЕдиницаИзмеренияГосЗакупок.Дробная тогда
				КоличествоГосЗакупок = Строка.Сумма / Строка.ЦенаГосЗакупок;
			Иначе
				КоличествоГосЗакупок = Окр(Строка.Сумма / Строка.ЦенаГосЗакупок, 0,1);
				Строка.Сумма = КоличествоГосЗакупок * Строка.ЦенаГосЗакупок;
			КонецЕсли;
			Строка.КоличествоГосЗакупок = КоличествоГосЗакупок;
			
			Если Строка.Номенклатура.ЕдиницаИзмерения.Дробная тогда
				Количество = Строка.КоличествоГосЗакупок * Строка.КоэффициентГосЗакупок;
			Иначе
				Количество = Окр(Строка.КоличествоГосЗакупок * Строка.КоэффициентГосЗакупок, 0,1);
			КонецЕсли;
			Строка.Количество = Количество;
			
			Если Строка.Количество = 0 тогда
				Строка.Цена = 0;
			Иначе
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Строка.КоличествоГосЗакупок = 0;
		Строка.Количество = 0;
		Строка.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену()

	Строка = Элементы.Товары.ТекущиеДанные;
	
	Если ЭтоДокументГосЗакупок тогда
		Строка.ЦенаГосЗакупок = Строка.Сумма / ?(Строка.КоличествоГосЗакупок = 0, 1, Строка.КоличествоГосЗакупок);
		Строка.Цена           = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	Иначе
		Строка.ЦенаГосЗакупок = 0;
		Строка.Цена           = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	КонецЕсли;
	
	НалоговыйАгентПоФЗ335 = ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС,,НалоговыйАгентПоФЗ335);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС()
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	НалоговыйАгентПоФЗ335 = ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335;
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС,,НалоговыйАгентПоФЗ335);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсего()

	Строка = Элементы.Товары.ТекущиеДанные;
	Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС) - Строка.СуммаСкидки;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНаценку()
	
	Строка = Элементы.Товары.ТекущиеДанные;
	
	Если Строка.ЦенаЗакупочная > 0 тогда
		Если Строка.Сумма > 0 Тогда
			Строка.Наценка = Строка.Сумма - (Строка.ЦенаЗакупочная * Строка.Количество);
			Себестоимость = Строка.Сумма - Строка.Наценка;
			Строка.НаценкаПроцент = (Строка.Сумма * 100 / Себестоимость) - 100;
		Иначе
			Строка.Наценка = 0;
			Строка.НаценкаПроцент = 0;
		КонецЕсли;
	Иначе
		Строка.Наценка = 0;
		Строка.НаценкаПроцент = 0;
	КонецЕсли;
	
	Если Строка.Наценка = 0 тогда
		Строка.НаценкаПредставление = "<Пусто>";
	Иначе
		Если ЭтоДокументГосЗакупок тогда
			Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб." + Символы.ПС + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ='(N %)'");
		Иначе
			Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб. " + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ=' (N %)'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНаценкуТабличнойЧасти(ОбновлятьЦены = Истина)
	
	Если ОбновлятьЦены Тогда
		Ценообразование.ОбновитьЦеныВТаблицеДокумента(Объект, "Товары", "ЦенаЗакупочная", "Закупочная");
	КонецЕсли;
	
	Для Каждого Строка из Объект.Товары цикл
		Если ЭтоДокументГосЗакупок И Строка.Количество = 0 тогда
			ПересчитатьКоличествоИЦену(Строка.ПолучитьИдентификатор());
		КонецЕсли;
		Если Строка.ЦенаЗакупочная > 0 тогда
			Строка.Наценка = Строка.Сумма - (Строка.ЦенаЗакупочная * Строка.Количество);
			Себестоимость = Строка.Сумма - Строка.Наценка;
			Если Строка.Сумма > 0 И Себестоимость > 0 тогда
				Строка.НаценкаПроцент = (Строка.Сумма * 100 / Себестоимость) - 100;
			Иначе
				Строка.НаценкаПроцент = 0;
			КонецЕсли;
		Иначе
			Строка.Наценка = 0;
			Строка.НаценкаПроцент = 0;
		КонецЕсли;
		
		Если Строка.Наценка = 0 тогда
			Строка.НаценкаПредставление = "<Пусто>";
		Иначе
			Если ЭтоДокументГосЗакупок тогда
				Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб." + Символы.ПС + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ='(N %)'");
			Иначе
				Строка.НаценкаПредставление = Формат(Строка.Наценка, "ЧЦ=15; ЧДЦ=3") + " руб. " + Формат(Строка.НаценкаПроцент, "ЧЦ=5; ЧДЦ=2; ЧФ=' (N %)'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ПараметрыОбъекта)

	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Вставить("Содержание", "");
		СтрокаТабличнойЧасти.ЭтоУслуга = Истина;
	Иначе
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.Номенклатура,
			"Наименование, НаименованиеПолное, ПериодичностьУслуги, Услуга");
		Если НЕ РеквизитыНоменклатуры.Услуга Тогда
			Содержание = "";
		Иначе
			Если ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное) Тогда
				Содержание = РеквизитыНоменклатуры.Наименование;
			Иначе
				Содержание = РеквизитыНоменклатуры.НаименованиеПолное;
			КонецЕсли;
			Содержание = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(
				Содержание,
				РеквизитыНоменклатуры.ПериодичностьУслуги,
				ПараметрыОбъекта.Дата);
		КонецЕсли;
		СтрокаТабличнойЧасти.Вставить("Содержание", Содержание);
		СтрокаТабличнойЧасти.ЭтоУслуга = РеквизитыНоменклатуры.Услуга;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбъекта.ТипЦен) Тогда
		ПараметрыОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура,
		ПараметрыОбъекта,
		Ложь);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		Если ПараметрыОбъекта.ЭтоДокументГосЗакупок тогда
			
			Если СведенияОНоменклатуре.Цена <> 0 Тогда
				СтрокаТабличнойЧасти.Цена  = СведенияОНоменклатуре.Цена;
			КонецЕсли;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
			
		КонецЕсли;
		
		Если ПараметрыОбъекта.ПокупательНалоговыйАгентПоНДС = Истина
			И ПараметрыОбъекта.ВедетсяУчетНДСПоФЗ335 Тогда
			
			СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ПараметрыОбъекта.Дата);
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
		Иначе
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НормализоватьТаблицуТоварыПриИзмененииДатыИлиДоговора()
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	
	ГосЗакупкиСервер.НормализоватьТаблицуФормыТоварыПриИзмененииДоговораКонтрагента(Объект.Дата,
	                                                                                Объект.Организация,
																					Объект.ДоговорКонтрагента,
																					ТаблицаТоваров,
	                                                                                Объект.СуммаВключаетНДС,
	                                                                                ТипЗнч(Объект.Ссылка));
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	ПересчитатьНаценкуТабличнойЧасти();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационныеЦеныНаТовары()
	
	Если НЕ ЭтоДокументГосЗакупок тогда
		Ценообразование.ОбновитьЦеныВТаблицеДокумента(Объект, "Товары", "ЦенаПредыдущейПродажи", "ПрошлаяПродажа");
	КонецЕсли;
	
	Ценообразование.ОбновитьЦеныВТаблицеДокумента(Объект, "Товары", "ЦенаЗакупочная", "Закупочная");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныСтроки()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеТовары = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если НЕ ЭтоДокументГосЗакупок тогда
		ТекущиеДанныеТовары.ЦенаПредыдущейПродажи = Ценообразование.ЦенаНоменклатуры("ПрошлаяПродажа",
		                                                                             Объект.Дата,
		                                                                             ТекущиеДанныеТовары.Номенклатура,
		                                                                             Объект.Контрагент);
	КонецЕсли;
	
	ТекущиеДанныеТовары.ЦенаЗакупочная = Ценообразование.ЦенаНоменклатуры("Закупочная",
	                                                                      Объект.Дата,
	                                                                      ТекущиеДанныеТовары.Номенклатура);
	
КонецПроцедуры

// Внешний вид, содержание надписей и т.п.
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	// Скидка по документу считается в итогах 
	Если Форма.ВидСкидки = 2 И Объект.Товары.Итог("Всего") > 0 Тогда
		ДанныеОбъекта = Новый Структура("СуммаСкидки, СуммаВключаетНДС");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		Итоги = ИтогиСУчетомСкидки(Объект.Товары, ДанныеОбъекта);
		
		ИтогиВсего = Итоги.ИтогиВсего;
		
		Форма.ИтогиВсего    = ИтогиВсего;
		Форма.ИтогиСкидка   = Итоги.ИтогиСкидка;
		Форма.ИтогиВсегоНДС = Итоги.ИтогиВсегоНДС;
	Иначе
		ИтогиВсего = Объект.Товары.Итог("Всего");
		
		Форма.ИтогиВсего    = ИтогиВсего;
		Форма.ИтогиСкидка   = Объект.Товары.Итог("СуммаСкидки");
		Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	ИтогиНаценка = Объект.Товары.Итог("Наценка");
	
	ИтогиНаценкаПроцент = 0;
	Если ИтогиВсего > 0 тогда
		Себестоимость = ИтогиВсего - ИтогиНаценка;
		Если Себестоимость > 0 тогда
			ИтогиНаценкаПроцент = (Форма.ИтогиВсего * 100 / Себестоимость) - 100;
		Иначе
			ИтогиНаценкаПроцент = 0;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИтогиНаценкаПроцент = ИтогиНаценкаПроцент;
	Форма.ИтогиНаценка        = ИтогиНаценка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ДокументБезНДС, ВалютаРегламентированногоУчета",
		Объект.ВалютаДокумента,
		Объект.КурсВзаиморасчетов,
		Объект.КратностьВзаиморасчетов,
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры И НЕ Форма.ЭтоДокументГосЗакупок Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСпецификацииДоговора()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЭтоДокументГосЗакупок тогда
		ДанныеСпецификации = ГосЗакупкиСервер.ДанныеСпецификацииДоговора(Объект.ДоговорКонтрагента);
		СпецификацияДоговора = ДанныеСпецификации.Ссылка;
		КомментарийСпецификации = ДанныеСпецификации.Комментарий;
	Иначе
		СпецификацияДоговора = ПредопределенноеЗначение("Документ.СпецификацияДоговора.ПустаяСсылка");
		КомментарийСпецификации = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпецификацияДоговора) тогда
		Элементы.ГруппаСпецификация.Видимость = Истина;
		Элементы.КомментарийСпецификации.Видимость = НЕ ПустаяСтрока(КомментарийСпецификации);
	Иначе
		Элементы.ГруппаСпецификация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьРеквизитыОрганизацииКонтрагента(Форма)
	
	Объект = Форма.Объект;
	
	ПустоеЗначение = "<Пусто>";
	Заголовок = "";
	
	Заголовок ="За руководителя:        " + ?(ЗначениеЗаполнено(Объект.Руководитель), Строка(Объект.Руководитель), ПустоеЗначение) + "; ";
	Заголовок = Заголовок + Символы.ПС + "За главного бухгалтера: " + ?(ЗначениеЗаполнено(Объект.ГлавныйБухгалтер), Строка(Объект.ГлавныйБухгалтер), ПустоеЗначение);
	
	Форма.Элементы.ДекорацияПодписи.Заголовок = Заголовок;
	
КонецПроцедуры

// Прочий функционал:

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаСервере
Функция ЕстьСтрокиВТабличныхЧастях()
	
	ЕстьСтроки = Объект.Товары.Количество() > 0;
	Возврат ЕстьСтроки;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Валюта = Объект.ВалютаДокумента;
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Валюта);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"     , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , "Товары");
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("Реализация", Истина);
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже", Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"		, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбораГосЗакупки()
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры (гос. закупки) в %1 (%2)'");
	
	ПредставлениеТаблицы = НСтр("ru = 'Товары (гос. закупки)'");
	ПараметрыФормы.Вставить("ПодборНоменклатуры"   , Истина);
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);

	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ДатаРасчетов"          , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"                , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("Склад"                 , Объект.Склад);
	ПараметрыФормы.Вставить("ДоговорКонтрагента"    , Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"            , Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация"           , Объект.Организация);
	ПараметрыФормы.Вставить("Заголовок"             , ЗаголовокПодбора);

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ДанныеОбъекта = Новый Структура("Дата, Организация, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
					ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), 
					ДанныеОбъекта,
					Ложь,  // Не требуется определять счета учета
					Ложь); // Не требуется определять цены
	
	// Заполнение колонок "Всего" в табличных частях
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) - СтрокаТаблицы.СуммаСкидки;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			СтрокаТаблицы.ЭтоУслуга = Истина;
		Иначе
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.ЭтоУслуга = СведенияОНоменклатуре.Услуга;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 				Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 				Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов); 
	ПараметрыОбработки.Вставить("ДокументБезНДС",               Объект.ДокументБезНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);
	
	ИменаТаблицИсточников = Новый СписокЗначений();
	ИменаТаблицИсточников.Добавить("Товары");
	ИменаТаблицИсточников.Добавить("Услуги");

	ПараметрыОбработки.Вставить("ИмяТаблицы", 					"Товары");
	ПараметрыОбработки.Вставить("РазрешитьУслуги", 				Истина);
	ПараметрыОбработки.Вставить("ПоказыватьСкидку",				ВидСкидки = 1);
	ПараметрыОбработки.Вставить("ИменаТаблицИсточников",		ИменаТаблицИсточников);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	Объект.Товары.Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивАдресовДоставкиКонтрагента()

	МассивАдресовДоставки = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат МассивАдресовДоставки;
	КонецЕсли;
	
	ТипыКИ = Новый Массив;
	ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Объекты = Новый Массив();
	Объекты.Добавить(Объект.Контрагент);
	Адреса = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(Объекты, ТипыКИ);
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо");
	
	ВидФактАдреса = ?(ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	
	Для каждого Адрес Из Адреса Цикл
		Если Адрес.Вид = ВидФактАдреса Тогда
			МассивАдресовДоставки.Вставить(0,Адрес.Представление);
		Иначе
			МассивАдресовДоставки.Добавить(Адрес.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивАдресовДоставки;

КонецФункции

&НаСервере
Процедура ОбработатьОповещениеОбИзмененииНастроекПараметровУчета()
	
	СрокОплатыВРабочихДняхНовоеЗначение = Константы.СрокОплатыСчетовПокупателю.Получить();
	
	ИзменилсяСрокОплатыВРабочихДнях = (СрокОплатыВРабочихДнях <> СрокОплатыВРабочихДняхНовоеЗначение);
	
	Если ИзменилсяСрокОплатыВРабочихДнях Тогда
		СрокОплатыВРабочихДнях = СрокОплатыВРабочихДняхНовоеЗначение;
		УстановитьПодсказкуСрокаОплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОбОплатеСчета()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Ссылка)
		И СтатусДокумента = Перечисления.СтатусОплатыСчета.ОплаченЧастично Тогда
		
		ОплаченнаяСуммаСчета = Документы.СчетНаОплатуПокупателю.ОплаченнаяСуммаСчета(Объект.Организация, Объект.Ссылка);
		ОжидаетсяОплата = Макс(0, Объект.СуммаДокумента - ОплаченнаяСуммаСчета);
		
		ШаблонСтроки = НСтр("ru = '%1 %2'");
		Если ОплаченнаяСуммаСчета <> 0 Тогда
			ТекстОплачено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				Формат(ОплаченнаяСуммаСчета, "ЧЦ=15; ЧДЦ=2; ЧН=0"),
				Объект.ВалютаДокумента);
		КонецЕсли;
		
		Если ОжидаетсяОплата <> 0 Тогда
			ТекстОжидаетсяОплата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				Формат(ОжидаетсяОплата, "ЧЦ=15; ЧДЦ=2; ЧН=0"),
				Объект.ВалютаДокумента);
		КонецЕсли;
		
	Иначе
		ТекстОплачено = "";
		ТекстОжидаетсяОплата = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытиеФормыВыбораДокументаДляЗаполнения(
	ТабличнаяЧасть, СпособЗаполнения, ИмяДокумента) Экспорт
	
	Если СпособЗаполнения = ИмяСпособаЗаполненияЗаполнить()
		И Объект[ТабличнаяЧасть].Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("ИмяДокумента", ИмяДокумента);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораДокументаДляЗаполнения(ТабличнаяЧасть, СпособЗаполнения, ИмяДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект[ДополнительныеПараметры.ТабличнаяЧасть].Очистить();
		ОткрытьФормуВыбораДокументаДляЗаполнения(
			ДополнительныеПараметры.ТабличнаяЧасть,
			ИмяСпособаЗаполненияЗаполнить(),
			ДополнительныеПараметры.ИмяДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДокументаДляЗаполнения(ТабличнаяЧасть, СпособЗаполнения, ИмяДокумента)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", ТабличнаяЧасть);
	
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаВыбора", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяСпособаЗаполненияДобавить()
	
	Возврат "Добавить";
	
КонецФункции

&НаКлиенте
Функция ИмяСпособаЗаполненияЗаполнить()
	
	Возврат "Заполнить";
	
КонецФункции

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(Знач Организация, Знач Ссылка)
	
	Возврат РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусДокумента(Ссылка)
	
	СтатусыДокумента = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
	СтатусыДокумента.Статус = СтатусДокумента;
		
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Ссылка, СтатусыДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОбИзмененииСтатусДокумента()
	
	СтатусДокумента = ПолучитьСтатусДокумента(Объект.Организация, Объект.Ссылка);
	ЗаполнитьИнформациюОбОплатеСчета();
	
КонецПроцедуры

#КонецОбласти

#Область СрокиОплатыДокументов

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуСрокаОплаты(Форма)
	
	Если Форма.Элементы.СрокОплаты.ОтображениеПодсказки = ОтображениеПодсказки.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Подстроки = Новый Массив;
	
	// Текст до гиперссылки
	Если Форма.СрокОплатыВРабочихДнях = 0 Тогда
		
		Подстроки.Добавить(НСтр("ru='Срок оплаты – 0 рабочих дней (не заполнять).'"));
		
	Иначе
		
		ПараметрыПредметаИсчисления = НСтр("ru='рабочий день, рабочих дня, рабочих дней'");
		
		ТекстКоличествоДнейОтсрочки = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			Форма.СрокОплатыВРабочихДнях,
			ПараметрыПредметаИсчисления);
		
		Подстроки.Добавить(СтрШаблон(НСтр("ru = 'Срок оплаты – %1.'"), ТекстКоличествоДнейОтсрочки));
		
	КонецЕсли;
	
	Подстроки.Добавить(Символы.ПС + НСтр("ru = 'Изменить значение по умолчанию можно в меню Продажи – '"));
	
	// Добавление гиперссылки в подсказку.
	// Используется "ПустаяСсылка", потому что не используется стандартная обработка навигационной ссылки.
	Подстроки.Добавить(Новый ФорматированнаяСтрока("Сроки оплаты покупателями",,,,"ПустаяСсылка"));
	
	// Текст после гиперссылки
	Подстроки.Добавить("." + Символы.ПС
		+ НСтр("ru = 'Если срок оплаты не заполнен, он не выводится в печатную форму.'"));
	
	Форма.Элементы.СрокОплатыРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, Ложь, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	КоличествоСтрок = Элементы.Товары.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоСтрок = ВставитьСтрокиНаСервере();
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	// Нормализум колонки таблицы значений
	ОбязательныеКолонки = Новый Структура;
	ОбязательныеКолонки.Вставить("Номенклатура"          , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбязательныеКолонки.Вставить("Количество"            , ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ОбязательныеКолонки.Вставить("Цена"                  , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ОбязательныеКолонки.Вставить("НоменклатураГосЗакупок", Новый ОписаниеТипов("СправочникСсылка.НоменклатураГосЗакупок"));
	ОбязательныеКолонки.Вставить("КоличествоГосЗакупок"  , ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ОбязательныеКолонки.Вставить("КоэффициентГосЗакупок" , ОбщегоНазначения.ОписаниеТипаЧисло(10, 5));
	ОбязательныеКолонки.Вставить("ЦенаГосЗакупок"        , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ОбязательныеКолонки.Вставить("СтавкаНДС"             , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ОбязательныеКолонки.Вставить("Сумма"                 , ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого КлючИЗначение из ОбязательныеКолонки цикл
		Если ТаблицаТоваров.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ТаблицаТоваров.Колонки.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, СуммаВключаетНДС,
	                                |ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
	                                |Склад, ДоговорКонтрагента, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	МетаданныеДокумента = ДанныеОбъекта.Ссылка.Метаданные();
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= ДанныеОбъекта.СуммаВключаетНДС;
	КонецЕсли;

	КоличествоДобавленныхСтрок = 0;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Цена = СтрокаТовара.Цена;
		ЦенаГосЗакупок = СтрокаТовара.ЦенаГосЗакупок;
		КоэффициентГосЗакупок = ?(СтрокаТовара.КоэффициентГосЗакупок = 0, 1, СтрокаТовара.КоэффициентГосЗакупок);
		
		Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовара, ДанныеОбъекта, "Товары", МетаданныеДокумента);
			
			Если ЭтоДокументГосЗакупок тогда
				ЦенаГосЗакупок = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					ЦенаГосЗакупок, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
			Иначе
				Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
			КонецЕсли;
		КонецЕсли;
			
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
			
			Если ЭтоДокументГосЗакупок тогда
				СтруктураОтбора = Новый Структура("НоменклатураГосЗакупок, Номенклатура, ЦенаГосЗакупок",
				                                   СтрокаТовара.НоменклатураГосЗакупок,
				                                   СтрокаТовара.Номенклатура,
				                                   Окр(ЦенаГосЗакупок,2,1));
			Иначе
				СтруктураОтбора = Новый Структура("Номенклатура, Цена",
				                                   СтрокаТовара.Номенклатура,
				                                   Окр(Цена,2,1));
			КонецЕсли;
			
			МассивНайденныхСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			
			Если ЭтоДокументГосЗакупок тогда
				СтрокаТабличнойЧасти.КоличествоГосЗакупок = СтрокаТабличнойЧасти.КоличествоГосЗакупок + СтрокаТовара.КоличествоГосЗакупок;
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоГосЗакупок * КоэффициентГосЗакупок;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧастиГосЗакупок(СтрокаТабличнойЧасти);
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			Иначе
				СтрокаТабличнойЧасти.КоличествоГосЗакупок = 0;
				СтрокаТабличнойЧасти.ЦенаГосЗакупок = 0;
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
			Если ПокупательНалоговыйАгентПоНДС = Истина
				И ВедетсяУчетНДСПоФЗ335 Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ДанныеОбъекта.Дата);
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = Объект.Товары.Добавить();
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара, СписокСвойств);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			// Заполняем реквизиты табличной части.
			
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура,
				"Наименование, НаименованиеПолное, Услуга, ПериодичностьУслуги");
				
			Если Не ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
					
				Если НЕ РеквизитыНоменклатуры.Услуга Тогда
					Содержание = "";
				Иначе
					Если ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное) Тогда
						Содержание = РеквизитыНоменклатуры.Наименование;
					Иначе
						Содержание = РеквизитыНоменклатуры.НаименованиеПолное;
					КонецЕсли;
					
					Содержание = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(
						Содержание,
						РеквизитыНоменклатуры.ПериодичностьУслуги,
						ДанныеОбъекта.Дата);
				КонецЕсли;
				НоваяСтрока.Содержание = Содержание;
				
			КонецЕсли;
			НоваяСтрока.ЭтоУслуга = РеквизитыНоменклатуры.Услуга;
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ДанныеОбъекта, "Товары", МетаданныеДокумента);
			
			ЗначениеПустогоКоличества = ?(ЭтоВставкаИзБуфера И НоваяСтрока.ЭтоУслуга, 1, 0);
			
			Если ЭтоДокументГосЗакупок тогда
				НоваяСтрока.Количество = НоваяСтрока.КоличествоГосЗакупок * КоэффициентГосЗакупок;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧастиГосЗакупок(НоваяСтрока, ЗначениеПустогоКоличества);
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			КонецЕсли;
			
			// Рассчитываем реквизиты табличной части.
			Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
				Если ЭтоДокументГосЗакупок тогда
					НоваяСтрока.ЦенаГосЗакупок = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							НоваяСтрока.ЦенаГосЗакупок, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
							УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
							
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧастиГосЗакупок(НоваяСтрока, ЗначениеПустогоКоличества);
					НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
				Иначе
					НоваяСтрока.ЦенаГосЗакупок = 0;
					НоваяСтрока.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							НоваяСтрока.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
							УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
							
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока, ЗначениеПустогоКоличества);
				КонецЕсли;
			КонецЕсли;
			
			Если ПокупательНалоговыйАгентПоНДС = Истина
				И ВедетсяУчетНДСПоФЗ335 Тогда
				НоваяСтрока.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ДанныеОбъекта.Дата);
				НоваяСтрока.СуммаНДС = 0;
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Объект.СуммаВключаетНДС);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;

	ЗаполнитьДобавленныеКолонкиТаблиц();

	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект.Товары, 
		Элементы.Товары.ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере()
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, "Товары");
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)

	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Содержание");
	СписокСвойств.Добавить("Количество");
	СписокСвойств.Добавить("Цена");
	СписокСвойств.Добавить("ПроцентСкидки");
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;

КонецПроцедуры

#КонецОбласти

#Область ИнтернетМагазин

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СчетПокупателю", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИтогиСУчетомСкидки(Знач ТабличнаяЧасть, ДанныеОбъекта)
	
	ТаблицаТовары = ТабличнаяЧасть.Выгрузить();
	
	ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТаблицаТовары, ДанныеОбъекта);
	
	Результат = Новый Структура;
	Результат.Вставить("ИтогиВсего"          , ТаблицаТовары.Итог("Сумма") + ?(ДанныеОбъекта.СуммаВключаетНДС, 0, ТаблицаТовары.Итог("СуммаНДС")));
	Результат.Вставить("ИтогиСкидка"         , ДанныеОбъекта.СуммаСкидки);
	Результат.Вставить("ИтогиВсегоНДС"       , ТаблицаТовары.Итог("СуммаНДС"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
