#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Ложь);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Ведомость по просроченным задолженностям " + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	// Копируем Условное оформление из варианта отчета в КомпоновщикНастроек
	Для Каждого ЭлементУсловноеОформление из Схема.ВариантыНастроек.ВедомостьПоПросроченнымЗадолженностям.Настройки.УсловноеОформление.Элементы цикл
		НовыйЭлементУО = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлементУО, ЭлементУсловноеОформление);
		
		Для Каждого ОтборУО из ЭлементУсловноеОформление.Отбор.Элементы цикл
			НовыйОтборУО = НовыйЭлементУО.Отбор.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйОтборУО, ОтборУО);
		КонецЦикла;
		
		Для Каждого ПолеУО из ЭлементУсловноеОформление.Поля.Элементы цикл
			НовоеПолеУО = НовыйЭлементУО.Поля.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПолеУО, ПолеУО);
		КонецЦикла;
		
		Для Каждого ОформлениеУО из ЭлементУсловноеОформление.Оформление.Элементы цикл
			НайденоеОформлениеУО = НовыйЭлементУО.Оформление.НайтиЗначениеПараметра(ОформлениеУО.Параметр);
			ЗаполнитьЗначенияСвойств(НайденоеОформлениеУО, ОформлениеУО);
			
			Если ОформлениеУО.Параметр = Новый ПараметрКомпоновкиДанных("СтильГраницы") тогда
				Для Каждого СтильГраницыУО из ОформлениеУО.ЗначенияВложенныхПараметров цикл
					НайденыйСтильГраницыУО = НайденоеОформлениеУО.ЗначенияВложенныхПараметров.Найти(СтильГраницыУО.Параметр);
					ЗаполнитьЗначенияСвойств(НайденыйСтильГраницыУО, СтильГраницыУО);
				КонецЦикла;
			КонецЕсли
		КонецЦикла;
		
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	СчетаУчета = Новый СписокЗначений;
	Если ПараметрыОтчета.РежимОтчета = "ДебиторскаяЗадолженность" ИЛИ ПараметрыОтчета.РежимОтчета = "ДебиторскаяИКредиторскаяЗадолженности" тогда
		СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
		СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	КонецЕсли;
	
	Если ПараметрыОтчета.РежимОтчета = "КредиторскаяЗадолженность" ИЛИ ПараметрыОтчета.РежимОтчета = "ДебиторскаяИКредиторскаяЗадолженности" тогда
		СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	КонецЕсли;
	
	//СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);
	//СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	//СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаВзаиморасчетов", СчетаУчета);
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"НачОстаток");
	Если ПараметрыОтчета.РежимОтчета = "ДебиторскаяЗадолженность" ИЛИ ПараметрыОтчета.РежимОтчета = "ДебиторскаяИКредиторскаяЗадолженности" тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"ОборотДт");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"ОборотКт");
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"ОборотКт");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"ОборотДт");
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"КонОстаток");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"ПросроченныйДолг");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор,	"ПросроченоДней");
	
	ГоризонтальнаяГруппировка = КомпоновщикНастроек.Настройки.Структура;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Группировка = ГоризонтальнаяГруппировка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГоризонтальнаяГруппировка = Группировка.Структура;
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли