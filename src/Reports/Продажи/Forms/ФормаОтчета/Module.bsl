&Вместо("УстановитьНастройкиПоУмолчанию")
Процедура Базар_УстановитьНастройкиПоУмолчанию()
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтотОбъект);

	Отчет.ПоказательСумма                 = Истина;
	Отчет.ПоказательКоличество            = Ложь;
	Отчет.ПоказательЦенаПродажи           = Ложь;
	Отчет.ПоказательСебестоимостьСрезЦен  = Ложь;
	Отчет.ПоказательНаценкаСрезЦен        = Истина;
	Отчет.ПоказательПроцентНаценкиСрезЦен = Истина;
	Отчет.ПоказательЦенаЗакупочнаяСрезЦен = Ложь;
	
	ЗаполнитьВыбранныеПоказателиПоДаннымИзОтчета();
	
КонецПроцедуры

&Вместо("ПодготовитьПараметрыОтчетаНаСервере")
Функция Базар_ПодготовитьПараметрыОтчетаНаСервере()
	
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЭтотОбъект.ИмяФормы);
	
	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();
	
	ПараметрыОтчета.НачалоПериода                     = Отчет.НачалоПериода;
	ПараметрыОтчета.КонецПериода                      = Отчет.КонецПериода;
	ПараметрыОтчета.ПоказательСумма                   = Отчет.ПоказательСумма;
	ПараметрыОтчета.ПоказательКоличество              = Отчет.ПоказательКоличество;
	ПараметрыОтчета.ПоказательНаценкаСрезЦен          = Отчет.ПоказательНаценкаСрезЦен;
	ПараметрыОтчета.ПоказательПроцентНаценкиСрезЦен   = Отчет.ПоказательПроцентНаценкиСрезЦен;
	ПараметрыОтчета.ПоказательСебестоимостьСрезЦен    = Отчет.ПоказательСебестоимостьСрезЦен;
	ПараметрыОтчета.ПоказательЦенаЗакупочнаяСрезЦен   = Отчет.ПоказательЦенаЗакупочнаяСрезЦен;
	ПараметрыОтчета.ПоказательЦенаПродажи             = Отчет.ПоказательЦенаПродажи;
	ПараметрыОтчета.Организация                       = Отчет.Организация;
	ПараметрыОтчета.ВключатьОбособленныеПодразделения = Отчет.ВключатьОбособленныеПодразделения;
	ПараметрыОтчета.Периодичность                     = Отчет.Периодичность;
	ПараметрыОтчета.РазмещениеДополнительныхПолей     = Отчет.РазмещениеДополнительныхПолей;
	ПараметрыОтчета.Группировка                       = Отчет.Группировка.Выгрузить();
	ПараметрыОтчета.ДополнительныеПоля                = Отчет.ДополнительныеПоля.Выгрузить();
	
	ПараметрыОтчета.ВыводитьДиаграмму                 = ВыводитьДиаграмму;
	ПараметрыОтчета.ВыводитьЗаголовок                 = ВыводитьЗаголовок;
	ПараметрыОтчета.ВыводитьПодвал                    = ВыводитьПодвал;
	ПараметрыОтчета.МакетОформления                   = МакетОформления;
	ПараметрыОтчета.РежимРасшифровки                  = Отчет.РежимРасшифровки;
	ПараметрыОтчета.ДанныеРасшифровки                 = ДанныеРасшифровки;
	ПараметрыОтчета.КлючТекущегоВарианта              = КлючТекущегоВарианта;
	ПараметрыОтчета.СхемаКомпоновкиДанных             = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	ПараметрыОтчета.ИдентификаторОтчета               = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	ПараметрыОтчета.НастройкиКомпоновкиДанных         = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыОтчета.ВыбранныеПоказатели               = МассивВыбранныеПоказатели();
	
	ПараметрыОтчета.Вставить("ПоказательОпределятьСуммуПоОплате", КлючТекущегоВарианта = "ПродажиПоКонтрагентамПоОплате");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&Вместо("ИнициализироватьКомпоновщикаНастроек")
Процедура Базар_ИнициализироватьКомпоновщикаНастроек()
	
	//БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект, Истина, КлючТекущегоВарианта);
	
	КомпоновщикИнициализирован = Истина;
	
	Элементы.НастройкиОтчета.Видимость = Истина;
	
	ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(ЭтаФорма);
	
	Схема = Отчеты[ИмяОтчета].ПолучитьМакет("Базар_СхемаКомпоновкиДанных");
	
	Если ПустаяСтрока(КлючТекущегоВарианта) Тогда
		КлючТекущегоВарианта = ИмяОтчета;
	КонецЕсли;
	
	ВариантНастроек = Схема.ВариантыНастроек.Найти(КлючТекущегоВарианта);
	
	Если ВариантНастроек <> Неопределено Тогда
		Настройки = ВариантНастроек.Настройки;
	Иначе
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	ТекущиеПользовательскиеНастройки = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(ПользовательскиеНастройки) Тогда
		ТекущиеПользовательскиеНастройки = ПолучитьИзВременногоХранилища(ПользовательскиеНастройки);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(ЭтаФорма, ТекущиеПользовательскиеНастройки);
	
	БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(ЭтаФорма, Отчет.Организация);
	
	БухгалтерскиеОтчетыВызовСервера.ОбновитьОписаниеОтборовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Базар_СформироватьОтчетПеред(Команда)
	
	Для Каждого ЭлементСписка из ВыбранныеПоказатели цикл
		Отчет["Показатель" + ЭлементСписка.Значение] = ЭлементСписка.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Базар_ПриОткрытииПосле(Отказ)
	
	ЗаполнитьВыбранныеПоказателиПоДаннымИзОтчета();
	
КонецПроцедуры

&НаСервере
Функция МассивВыбранныеПоказатели()
	
	МассивВыбранныхПоказателей = Новый Массив;
	Для Каждого ЭлементСписка из ВыбранныеПоказатели цикл
		Если НЕ ЭлементСписка.Пометка тогда
			Продолжить;
		КонецЕсли;
		МассивВыбранныхПоказателей.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Возврат МассивВыбранныхПоказателей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВыбранныеПоказателиПоДаннымИзОтчета()
	
	Если ВыбранныеПоказатели.Количество() = 0 тогда
		ВыбранныеПоказатели.Добавить("Количество", "Количество (продано)", Отчет.ПоказательКоличество);
		ВыбранныеПоказатели.Добавить("Сумма", "Сумма (продано)", Отчет.ПоказательСумма);
		ВыбранныеПоказатели.Добавить("ЦенаПродажи", "Цена продажи (сумма / количество)", Отчет.ПоказательЦенаПродажи);
		ВыбранныеПоказатели.Добавить("НаценкаСрезЦен", "Наценка (по ценам номенклатуры)", Отчет.ПоказательНаценкаСрезЦен);
		ВыбранныеПоказатели.Добавить("СебестоимостьСрезЦен", "Себестоимость (по ценам номенклатуры)", Отчет.ПоказательСебестоимостьСрезЦен);
		ВыбранныеПоказатели.Добавить("ЦенаЗакупочнаяСрезЦен", "Цена закупочная (по ценам номенклатуры)", Отчет.ПоказательЦенаЗакупочнаяСрезЦен);
		ВыбранныеПоказатели.Добавить("ПроцентНаценкиСрезЦен", "% наценки (по ценам номенклатуры)", Отчет.ПоказательПроцентНаценкиСрезЦен);
	КонецЕсли;
	
КонецПроцедуры