&Вместо("ЗаполнитьПараметрыРасшифровкиОтчета")
Процедура Базар_ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполниим соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Соответствие;
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение",  ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда 
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		
		Если Группировка.Использование Тогда
			
			СоответствиеПолей.Вставить(Группировка.Поле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеПолей.Вставить("Период");
		
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки"                 , Истина);
	ДополнительныеСвойства.Вставить("Организация"                      , ДанныеОтчета.Объект.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода"                    , ДанныеОтчета.Объект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода"                     , ДанныеОтчета.Объект.КонецПериода);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок"                , ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал"                   , ДанныеОтчета.Объект.ВыводитьПодвал);
	ДополнительныеСвойства.Вставить("МакетОформления"                  , ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить("Периодичность"                    , ДанныеОтчета.Объект.Периодичность);
	ДополнительныеСвойства.Вставить("ВыводитьДиаграмму"                , Ложь);
	ДополнительныеСвойства.Вставить("ПоказательКоличество"             , ДанныеОтчета.Объект.ПоказательКоличество);
	ДополнительныеСвойства.Вставить("ПоказательСумма"                  , ДанныеОтчета.Объект.ПоказательСумма);
	ДополнительныеСвойства.Вставить("ПоказательНаценкаСрезЦен"         , ДанныеОтчета.Объект.ПоказательНаценкаСрезЦен);
	ДополнительныеСвойства.Вставить("ПоказательПроцентНаценкиСрезЦен"  , ДанныеОтчета.Объект.ПоказательПроцентНаценкиСрезЦен);
	ДополнительныеСвойства.Вставить("ПоказательСебестоимостьСрезЦен"   , ДанныеОтчета.Объект.ПоказательСебестоимостьСрезЦен);
	ДополнительныеСвойства.Вставить("ПоказательЦенаЗакупочнаяСрезЦен"  , ДанныеОтчета.Объект.ПоказательЦенаЗакупочнаяСрезЦен);
	ДополнительныеСвойства.Вставить("ПоказательЦенаПродажи"            , ДанныеОтчета.Объект.ПоказательЦенаПродажи);
	ДополнительныеСвойства.Вставить("КлючТекущегоВарианта"             , ДанныеОтчета.Объект.КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ОчищатьТаблицуГруппировок"        , Истина);
	ДополнительныеСвойства.Вставить("ПоказательОпределятьСуммуПоОплате", ДанныеОтчета.Объект.ПоказательОпределятьСуммуПоОплате);
	ДополнительныеСвойства.Вставить("ВыбранныеПоказатели"              , ДанныеОтчета.Объект.ВыбранныеПоказатели);
	
	// Получаем соответствие полей доступных в расшифровке
	Данные_Расшифровки = БухгалтерскиеОтчеты.ПолучитьДанныеРасшифровки(ДанныеОтчета.ДанныеРасшифровки, СоответствиеПолей, Расшифровка);
	
	Договор = Данные_Расшифровки.Получить("Договор");
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		ДополнительныеСвойства.Вставить("Организация", Договор.Организация);
		
	КонецЕсли;
	
	Период = Данные_Расшифровки.Получить("Период");
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ДанныеОтчета.Объект.Периодичность, ДанныеОтчета.Объект.НачалоПериода, ДанныеОтчета.Объект.КонецПериода);
		ДополнительныеСвойства.Вставить("Периодичность",		Периодичность);
		ДополнительныеСвойства.Вставить("КонецПериода", КонецДня(БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, Периодичность)));
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоДня(БухгалтерскиеОтчетыКлиентСервер.НачалоПериода(Период, Периодичность)));

	КонецЕсли;
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из Данные_Расшифровки Цикл
		Если ЗначениеРасшифровки.Ключ <> "Период" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Группировка = Новый Массив();
	ЕстьГруппировкаПоДокументу = Ложь;
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
			
			Если СтрокаГруппировки.Поле = "Документ" Тогда
				ЕстьГруппировкаПоДокументу = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьГруппировкаПоДокументу Тогда
		
		СтрокаДляРасшифровки = Новый Структура();
		СтрокаДляРасшифровки.Вставить("Использование", 	Истина);
		СтрокаДляРасшифровки.Вставить("Поле", 			"Документ");
		СтрокаДляРасшифровки.Вставить("Представление", 	"Документ");
		СтрокаДляРасшифровки.Вставить("ТипГруппировки", 0);
		
		Группировка.Добавить(СтрокаДляРасшифровки);
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	
	СписокПунктовМеню.Добавить("Продажи", "Продажи");
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить("Продажи", ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

&Вместо("ПолучитьНаборПоказателей")
Функция Базар_ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("Количество");
	НаборПоказателей.Добавить("Сумма");
	НаборПоказателей.Добавить("СебестоимостьСрезЦен");
	НаборПоказателей.Добавить("НаценкаСрезЦен");
	НаборПоказателей.Добавить("ПроцентНаценкиСрезЦен");
	НаборПоказателей.Добавить("ЦенаЗакупочнаяСрезЦен");
	НаборПоказателей.Добавить("ЦенаПродажи");
	
	Возврат НаборПоказателей;
	
КонецФункции

&Вместо("ПередКомпоновкойМакета")
Процедура Базар_ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	СчетаКассы = Новый Массив;
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.Касса);                          // 50
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями); // 62.Р
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам); //57.03
	
	СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаКассы);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаКассы", СчетаКассы);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаВыручки", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДоговорыПоСертификатам", ДоговорыПоСертификатам(ПараметрыОтчета.Организация));
	
	Периодичность = БухгалтерскиеОтчетыКлиентСервер.ПолучитьЗначениеПериодичности(ПараметрыОтчета.Периодичность, ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	СхемаЭталон = ПолучитьМакет("Базар_СхемаКомпоновкиДанных");
	ТекстЗапроса = СхемаЭталон.НаборыДанных.Продажи.Запрос;
	
	ПериодичностьОтчета = Новый Соответствие;
	ПериодичностьОтчета.Вставить(6, "ДЕНЬ");
	ПериодичностьОтчета.Вставить(9, "МЕСЯЦ");
	ПериодичностьОтчета.Вставить(10, "КВАРТАЛ");
	ПериодичностьОтчета.Вставить(11, "ПОЛУГОДИЕ");
	ПериодичностьОтчета.Вставить(12, "ГОД");
	
	Схема.НаборыДанных.Продажи.Запрос = СтрЗаменить(ТекстЗапроса, ".ПериодДень", ".Период" + ПериодичностьОтчета.Получить(Периодичность));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОпределятьСуммуПоОплате", ПараметрыОтчета.ПоказательОпределятьСуммуПоОплате);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ТипЦенЗакупочный", ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка"));
	СистемныеНастройкиБазар = ОбщегоНазначенияБазарСервер.СистемныеНастройкиБазар(КонецДня(ПараметрыОтчета.КонецПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ТипЦенЗакупочный", СистемныеНастройкиБазар.ТипЦенСебестоимость);
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	СчетаДенежныхСредств = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаДенежныхСредств);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаДенежныхСредств", СчетаДенежныхСредств);
	
	СчетаРасчетовСПокупателями = Новый Массив;
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	СчетаРасчетовСПокупателями = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПокупателями);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаРасчетовСКонтрагентами", СчетаРасчетовСПокупателями);
	
	ВыводитьДиаграмму = Неопределено;
	
	Если НЕ ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Истина;
		
	КонецЕсли;
	
	Таблица   = Неопределено;
	ДиаграммаСумма = Неопределено;
	ДиаграммаКоличество = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ЭлементСтруктуры.Имя = "Таблица" Тогда
			Таблица = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаСумма" Тогда
			ДиаграммаСумма = ЭлементСтруктуры;
		ИначеЕсли ЭлементСтруктуры.Имя = "ДиаграммаКоличество" Тогда
			ДиаграммаКоличество = ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Если ДиаграммаСумма <> Неопределено Тогда
		
		Если ВыводитьДиаграмму И ПараметрыОтчета.ПоказательСумма Тогда
			
			ДиаграммаСумма.Точки.Очистить();
			ГруппировкаПериод = ДиаграммаСумма.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
			ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ПорядокПериод = ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПорядокПериод.Поле = ПолеГруппировки.Поле;
			
			// Группировка
			ДиаграммаСумма.Серии.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					Группировка = ДиаграммаСумма.Серии.Добавить();
					ЗаполнитьГруппировкуДиаграммы(ПолеВыбраннойГруппировки, Группировка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			//УстановитьВыводЗаголовкаДиаграммы(ДиаграммаСумма, ПараметрыОтчета.ПоказательКоличество И ПараметрыОтчета.ПоказательСумма);
			
		Иначе
			
			ДиаграммаСумма.Использование = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДиаграммаКоличество <> Неопределено Тогда
		
		Если ВыводитьДиаграмму И ПараметрыОтчета.ПоказательКоличество И НЕ ПараметрыОтчета.ПоказательСумма Тогда
			
			ДиаграммаКоличество.Точки.Очистить();
			ГруппировкаПериод = ДиаграммаКоличество.Точки.Добавить();
			ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
			ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
			ПолеГруппировки.НачалоПериода =	НачалоДня(ПараметрыОтчета.НачалоПериода);
			ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
			
			ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ПорядокПериод = ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПорядокПериод.Поле = ПолеГруппировки.Поле;
			
			// Группировка
			ДиаграммаКоличество.Серии.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					Группировка = ДиаграммаКоличество.Серии.Добавить();
					БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			//УстановитьВыводЗаголовкаДиаграммы(ДиаграммаКоличество, ПараметрыОтчета.ПоказательКоличество И ПараметрыОтчета.ПоказательСумма);
			
		Иначе
			
			ДиаграммаКоличество.Использование = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		
		Таблица.Колонки.Очистить();
		ГруппировкаПериод = Таблица.Колонки.Добавить();
		ПолеГруппировки = ГруппировкаПериод.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных("Период");
		ПолеГруппировки.ТипДополнения = БухгалтерскиеОтчетыВызовСервера.ПолучитьТипДополненияПоИнтервалу(Периодичность);
		ПолеГруппировки.НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
		ПолеГруппировки.КонецПериода  = КонецДня(ПараметрыОтчета.КонецПериода);
		
		ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПорядокПериод = ГруппировкаПериод.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ПорядокПериод.Поле = ПолеГруппировки.Поле;
		
		// Группировка
		Таблица.Строки.Очистить();
		Группировка = Таблица.Строки;
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			Если ПолеВыбраннойГруппировки.Использование Тогда
				
				Если ТипЗнч(Группировка) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
					Группировка = Группировка.Добавить();
				Иначе
					Группировка = Группировка.Структура.Добавить();
				КонецЕсли;
				БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
				
				ПолеОтбора = Новый ПолеКомпоновкиДанных("Сумма");
				НовыйЭлемент = Группировка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Истина;
				НовыйЭлемент.ЛевоеЗначение  = ПолеОтбора;
				НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
				НовыйЭлемент.ПравоеЗначение = 0;
				ПараметрВыводитьОтбор = Группировка.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
				ПараметрВыводитьОтбор.Использование = Истина;
				ПараметрВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ИмяВыбранногоПоля из ПараметрыОтчета.ВыбранныеПоказатели цикл
			ПолеВыбора = Новый ПолеКомпоновкиДанных(ИмяВыбранногоПоля);
			НовоеПолеВыбора = Таблица.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеПолеВыбора.Поле = ПолеВыбора;
			НовоеПолеВыбора.Использование = Истина;
		КонецЦикла;
		
	КонецЕсли;
		
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

&Вместо("НастройкиОтчетаСохраняемыеВРассылке")
Функция Базар_НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Вставить("Показатель" + Показатель, Ложь);
	КонецЦикла;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("Периодичность"                    , 0);
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьДиаграмму"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	КоллекцияНастроек.Вставить("ВыбранныеПоказатели"              , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции
