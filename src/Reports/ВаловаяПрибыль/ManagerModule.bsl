// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
&Вместо("ПередКомпоновкойМакета")
Процедура Базар_ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.Свойство("ВыводитьДиаграмму") тогда
		ПараметрыОтчета.ВыводитьДиаграмму = Ложь;
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	#Область УстановкаПараметровСхемыКомпоновки
	
	ПредставлениеПериода = СтрЗаменить(
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода),
		"за",
		"");
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ПредставлениеПериода",
		СОкрЛП(ПредставлениеПериода));
	
	// Счета расчетов с розничными покупателями.
	СчетаКассы = Новый Массив;
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.Касса);                          // 50
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями); // 62.Р
	СчетаКассы.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);       //57.03
	СчетаКассы = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаКассы);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаКассы", СчетаКассы);
	
	// Счета выручки.
	СчетаВыручкиЕНВД = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	СчетаВыручки     = Новый Массив(БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	СчетаВыручки     = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаВыручки, СчетаВыручкиЕНВД);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетаВыручкиЕНВД",
		СчетаВыручкиЕНВД);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетаВыручки",
		СчетаВыручки);
		
	// Счета себестоимости.
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетаСебестоимости",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж));
		
	// Счета расчетов с покупателями, в том числе и розничными.
	СчетаРасчетовСПокупателями = БухгалтерскиеОтчеты.СчетаРасчетовСПокупателямиССубсчетами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаРасчетовСПокупателями, СчетаКассы);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетаРасчетовСПокупателями",
		СчетаРасчетовСПокупателями);
	
	// Счета учета номенклатуры.
	СчетаУчетаНоменклатуры = СчетаУчетаТоваров();
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетУчетаНоменклатурыСПартиями",
		СчетаУчетаНоменклатуры.СчетаСПартионнымУчетом);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетУчетаНоменклатурыБезПартии",
		СчетаУчетаНоменклатуры.СчетаБезПартионногоУчета);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетУчетаНоменклатурыСПартиямиБезСклада",
		СчетаУчетаНоменклатуры.СчетаСПартионнымУчетомБезСклада);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетУчетаНоменклатурыБезСкладаБезПартии",
		СчетаУчетаНоменклатуры.СчетаБезПартионногоУчетаБезСклада);
		
	// Счета учета торговой наценки.
	СчетаУчетаТорговойНаценки = СчетаУчетаТорговойНаценки();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетТорговойНаценкиСПартиями",
		СчетаУчетаТорговойНаценки.СчетаСПартионнымУчетом);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетТорговойНаценкиБезПартии",
		СчетаУчетаТорговойНаценки.СчетаБезПартионногоУчета);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетТорговойНаценкиБезСкладаСПартиями",
		СчетаУчетаТорговойНаценки.СчетаСПартионнымУчетомБезСклада);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетТорговойНаценкиБезСкладаБезПартии",
		СчетаУчетаТорговойНаценки.СчетаБезПартионногоУчетаБезСклада);
		
	// Периодичность.
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"Периодичность",
		ПараметрыОтчета.Периодичность);
	
	//СхемаЭталон = ПолучитьМакет("СхемаКомпоновкиДанных");
	СхемаЭталон = ПолучитьМакет("Базар_СхемаКомпоновкиДанных");
	
	ПериодичностьОтчета = Новый Соответствие;
	ПериодичностьОтчета.Вставить(6, "ДЕНЬ");
	ПериодичностьОтчета.Вставить(9, "МЕСЯЦ");
	ПериодичностьОтчета.Вставить(10, "КВАРТАЛ");
	ПериодичностьОтчета.Вставить(11, "ПОЛУГОДИЕ");
	ПериодичностьОтчета.Вставить(12, "ГОД");
	
	Периодичность = ПериодичностьОтчета.Получить(ПараметрыОтчета.Периодичность);
	
	// Скорректируем текст запроса для выбранной периодичности.
	Если Периодичность <> Неопределено Тогда
		ТекстЗапроса = СхемаЭталон.НаборыДанных.ВаловаяПрибыль.Запрос;
		Схема.НаборыДанных.ВаловаяПрибыль.Запрос = СтрЗаменить(
			ТекстЗапроса,
			".ПериодДень",
			".Период" + Периодичность);
		
	КонецЕсли;
	
	// Начало периода.
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"НачалоПериода",
			НачалоДня(ПараметрыОтчета.НачалоПериода));
			
	КонецЕсли;
	
	// Конец периода.
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"КонецПериода",
			КонецДня(ПараметрыОтчета.КонецПериода));
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"ПараметрПериод",
			КонецДня(ПараметрыОтчета.КонецПериода));
			
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	// Если отключен суммовой учет по складам на счетах учета товаров,
	// то расчет себестоимости выполняется без детализации по складам.
	// Проверяем 41 счет: если на нем включен суммовой учет по складам, 
	// то считаем, что на всех остальных товарных счетах также включен.
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ВедетсяСуммовойУчетПоСкладам",
		БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары));
	
	#КонецОбласти
	
	#Область ФормированиеСтруктурыОтчета
	
	ВыводитьДиаграмму = Неопределено;
	
	Если НЕ ПараметрыОтчета.Свойство("ВыводитьДиаграмму", ВыводитьДиаграмму) Тогда
		
		ВыводитьДиаграмму = Истина;
		
	КонецЕсли;
	
	Диаграмма = Неопределено;
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ЭлементСтруктуры.Имя = "Диаграмма" Тогда
			Диаграмма = ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	// Настройка диаграммы.
	Если Диаграмма <> Неопределено Тогда
		
		Если ВыводитьДиаграмму Тогда
			
			// Группировка.
			Диаграмма.Использование = Ложь;
			Диаграмма.Точки.Очистить();
			Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
				Если ПолеВыбраннойГруппировки.Использование Тогда
					
					Группировка = Диаграмма.Точки.Добавить();
					
					БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
					
					Группировка.Выбор.Элементы.Очистить();
					ЭлементВыбора = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					ЭлементВыбора.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
					
					Диаграмма.Использование = Истина;
					
					// Диаграмма группируется по самой первой группировке.
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			Диаграмма.Использование = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Группировка
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	#КонецОбласти
	
	// Дополнительные данные.
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Ресурс Валовая прибыль есть в отчете всегда.
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Выручка");
	
	// Отбор по организации.
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры