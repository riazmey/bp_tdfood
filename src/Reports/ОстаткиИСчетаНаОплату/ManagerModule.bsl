#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат "Остатки и счета на оплату" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	// Отборы
	ВыделяемыеВПараметрыМассивыСсылок = Новый ТаблицаЗначений;
	ВыделяемыеВПараметрыМассивыСсылок.Колонки.Добавить("ИмяПоля");
	ВыделяемыеВПараметрыМассивыСсылок.Колонки.Добавить("Исключение");
	ВыделяемыеВПараметрыМассивыСсылок.Колонки.Добавить("ВИерархии");
	ВыделяемыеВПараметрыМассивыСсылок.Колонки.Добавить("СписокСсылок");
	
	ОбрабатываемыеПоляКомпоновкиДанных = Новый Массив;
	ОбрабатываемыеПоляКомпоновкиДанных.Добавить(Новый ПолеКомпоновкиДанных("Контрагент"));
	ОбрабатываемыеПоляКомпоновкиДанных.Добавить(Новый ПолеКомпоновкиДанных("Грузополучатель"));
	
	СчетчикЭлементовОтбора = 1;
	ВсегоЭлементовОтбора   = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
	
	Для Каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы цикл
		
		Если НЕ ЭлементОтбора.Использование тогда
			Продолжить;
		КонецЕсли;
		
		ОбрабатываемоеПоле = Ложь;
		Для Каждого ОбрабатываемоеПолеКомпоновкиДанных из ОбрабатываемыеПоляКомпоновкиДанных цикл
			Если ЭлементОтбора.ЛевоеЗначение = ОбрабатываемоеПолеКомпоновкиДанных тогда
				ОбрабатываемоеПоле = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ОбрабатываемоеПоле тогда
			Продолжить;
		КонецЕсли;
			 
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Ложь,
				Ложь
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
			ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементОтбора.ПравоеЗначение);
			
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Ложь,
				Истина
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
			ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементОтбора.ПравоеЗначение);
			
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Ложь,
				Ложь
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			Для Каждого ЭлементСписка из ЭлементОтбора.ПравоеЗначение цикл
				ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
				ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Ложь,
				Истина
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			Для Каждого ЭлементСписка из ЭлементОтбора.ПравоеЗначение цикл
				ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
				ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Истина,
				Ложь
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
			ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементОтбора.ПравоеЗначение);
			
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Истина,
				Истина
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
			ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементОтбора.ПравоеЗначение);
			
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Истина,
				Ложь
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			Для Каждого ЭлементСписка из ЭлементОтбора.ПравоеЗначение цикл
				ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
				ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии тогда
			
			СтруктураПоиска = Новый Структура(
				"ИмяПоля,
				|Исключение,
				|ВИерархии",
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Истина,
				Истина
			);
			
			НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
			Если НайденыеСтроки.Количество() = 0 тогда
				ДанныеМассиваСсылок = ВыделяемыеВПараметрыМассивыСсылок.Добавить();
			Иначе
				ДанныеМассиваСсылок = НайденыеСтроки.Получить(0);
			КонецЕсли;
			
			Если НЕ ТипЗнч(ДанныеМассиваСсылок.СписокСсылок) = Тип("СписокЗначений") тогда
				ДанныеМассиваСсылок.СписокСсылок = Новый СписокЗначений;
			КонецЕсли;
			
			Для Каждого ЭлементСписка из ЭлементОтбора.ПравоеЗначение цикл
				ЗаполнитьЗначенияСвойств(ДанныеМассиваСсылок, СтруктураПоиска);
				ДанныеМассиваСсылок.СписокСсылок.Добавить(ЭлементСписка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Ложь;
		
	КонецЦикла;
	
	// Параметры
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОтборГдеЗаказаноЗаполнено", ПараметрыОтчета.ОтборГдеЗаказаноЗаполнено);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация"              , ПараметрыОтчета.Организация);
	
	Для Каждого ОбрабатываемоеПолеКомпоновкиДанных из ОбрабатываемыеПоляКомпоновкиДанных цикл
		
		СтруктураПоиска = Новый Структура(
			"ИмяПоля,
			|Исключение,
			|ВИерархии",
			Строка(ОбрабатываемоеПолеКомпоновкиДанных),
			Ложь,
			Ложь
		);
		
		ИмяПараметра = СтруктураПоиска.ИмяПоля;
		СписокСсылок = Новый СписокЗначений;
		
		НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
		Если НЕ НайденыеСтроки.Количество() = 0 тогда
			СписокСсылок = НайденыеСтроки.Получить(0).СписокСсылок;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, СписокСсылок);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра + "ПрименитьОтбор", СписокСсылок.Количество() > 0);
		
		СтруктураПоиска.ВИерархии = Истина;
		
		ИмяПараметра = СтруктураПоиска.ИмяПоля + "ВИерархии";
		СписокСсылок = Новый СписокЗначений;
		
		НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
		Если НЕ НайденыеСтроки.Количество() = 0 тогда
			СписокСсылок = НайденыеСтроки.Получить(0).СписокСсылок;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, СписокСсылок);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра + "ПрименитьОтбор", СписокСсылок.Количество() > 0);
		
		
		СтруктураПоиска = Новый Структура(
			"ИмяПоля,
			|Исключение,
			|ВИерархии",
			Строка(ОбрабатываемоеПолеКомпоновкиДанных),
			Истина,
			Ложь
		);
		
		ИмяПараметра = "Исключение" + СтруктураПоиска.ИмяПоля;
		СписокСсылок = Новый СписокЗначений;
		
		НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
		Если НЕ НайденыеСтроки.Количество() = 0 тогда
			СписокСсылок = НайденыеСтроки.Получить(0).СписокСсылок;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, СписокСсылок);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра + "ПрименитьОтбор", СписокСсылок.Количество() > 0);
		
		СтруктураПоиска.ВИерархии = Истина;
		
		ИмяПараметра = "Исключение" + СтруктураПоиска.ИмяПоля + "ВИерархии";
		СписокСсылок = Новый СписокЗначений;
		
		НайденыеСтроки = ВыделяемыеВПараметрыМассивыСсылок.НайтиСтроки(СтруктураПоиска);
		Если НЕ НайденыеСтроки.Количество() = 0 тогда
			СписокСсылок = НайденыеСтроки.Получить(0).СписокСсылок;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, СписокСсылок);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ИмяПараметра + "ПрименитьОтбор", СписокСсылок.Количество() > 0);
		
	КонецЦикла;
	
	// Группировки
	ГоризонтальнаяГруппировка = КомпоновщикНастроек.Настройки.Структура;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Группировка = ГоризонтальнаяГруппировка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГоризонтальнаяГруппировка = Группировка.Структура;
			
			ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			НовыйЭлемент = Группировка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.Использование  = Истина;
			НовыйЭлемент.ЛевоеЗначение  = ПолеОтбора;
			НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
			ПараметрВыводитьОтбор = Группировка.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
			ПараметрВыводитьОтбор.Использование = Истина;
			ПараметрВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			
			Если НЕ ПолеВыбраннойГруппировки.Поле = "Номенклатура" И
				 НЕ ПолеВыбраннойГруппировки.Поле = "Организация" И
				 НЕ ПолеВыбраннойГруппировки.Поле = "Подразделение" И
				 НЕ ПолеВыбраннойГруппировки.Поле = "Склад" тогда
				
				ЭлементОформления = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
				ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОформления.Использование = Истина;
				
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = ''"));
				
				ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				
				ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
				ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("НачОстаток");
				
				ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
				ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("КонОстаток");
				
			КонецЕсли;
			
			ПолеВыбора = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если НЕ ПолеВыбраннойГруппировки.Поле = "Склад" тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группировка.Выбор,	"НачОстаток");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группировка.Выбор,	"Заказано");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группировка.Выбор,	"КонОстаток");
			КонецЕсли;
			
			Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

#КонецЕсли